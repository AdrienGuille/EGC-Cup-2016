Dedal : un ADL à trois dimensions
pour gérer l’évolution des architectures à base de composants
Huaxi (Yulin) Zhang, Christelle Urtado, Sylvain Vauttier
LGI2P / Ecole des Mines d’Alès,
Parc Scientifique G. Besse, F30035 Nîmes Cedex, France
{Huaxi.Zhang, Christelle.Urtado, Sylvain.Vauttier}@mines-ales.fr
Résumé. Une architecture logicielle peut être définie à différents niveaux d’abs-
traction, correspondants aux différentes étapes de son processus de développe-
ment : spécification, implémentation et déploiement. La cohérence entre les dif-
férentes définitions d’une architecture doit être maintenue : sa définition à un
niveau d’abstraction doit être conforme à sa définition au niveau d’abstraction
immédiatement supérieur. Ce principe permet de contrôler l’évolution d’une ar-
chitecture, en validant les modifications réalisées à un certain niveau d’abstrac-
tion ou en motivant la création d’une nouvelle version pour propager les modi-
fications entre niveaux d’abstraction. Malheureusement, aucun ADL ne propose
un modèle de définition d’architectures séparant clairement les niveaux d’abs-
traction couvrant le cycle de vie d’une architecture. Cet article présente Dedal,
un ADL permettant une définition séparée de la spécification, de la configuration
et de l’assemblage d’une architecture afin de prévenir l’érosion ou la dérive qui
surviennent lors des évolutions entre les différents niveaux de définitions des
architectures.
1 Introduction
Le développement à base de composants est la principale réponse proposée à la probléma-
tique de l’accroissement de la complexité des logiciels, afin de diminuer les temps et les coûts
de développement sans sacrifier la qualité des logiciels produits. Il propose une démarche
de construction des logiciels à large maille, par assemblage de blocs de programmation pré-
existants – les composants – définis de manière suffisamment indépendante et découplée afin
d’être réutilisables dans de multiples contextes (Sommerville, 2006; Crnkovic et al., 2006).
La définition d’un logiciel ainsi produit est décrite sous la forme d’une architecture logicielle,
listant composants utilisés et les connections devant les relier. Pour assurer la gestion d’un lo-
giciel tout au long de son cycle de vie, depuis sa spécification jusqu’à son déploiement puis son
exploitation, la définition d’une architecture logicielle doit rassembler des méta-informations
correspondant à différents niveaux d’abstraction. La cohérence de la définition d’une archi-
tecture repose sur la conformance de sa description à un niveau d’abstraction donné avec sa
description au niveau d’abstraction immédiatement supérieur. Ce principe permet de proposer
des processus contrôlés de développement et d’évolution des architectures. Malheureusement,
