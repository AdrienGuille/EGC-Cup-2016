Approche innovante pour la recherche et l'extraction
cooperative et dynamique d'informations sur
Internet
Xavier Denis;, Gaele Simon
Nicolas Chanchevrier
UFR Sciences & Techniques, 25 Rue Philippe Lebon, 76600 Le Havre
xavier.denis@operamail.com, gaele.simon@iut.univ-lehavre.fr
http ://www-lih.univ-lehavre.fr
EADS S&DE, Parc d'Aaires des Portes BP613, 27106 Val De Reuil Cedex
nicolas.chanchevrier@tiscali.fr
http ://www.eads.com
Resume. Il existe de nombreuses techniques qui permettent de classier
des documents textuels en fonction du centre d'intere^t d'un utilisateur
(kNN, SVM, . . .). Malheureusement, l'integration de ces methodes dans
des plate-formes de textmining est souvent tres statique et ne permet pas
facilement d'aner les traitements et/ou resultats au cours du temps. Le
but de cet article est de presenter une plate-forme de webmining dans
laquelle les donnees heterogenes sont representees uniformement selon un
formalisme XML/TEI et ou l'utilisateur peut interagir sur les processus de
recuperation et d'analyse de ces donnees. Pour cela, les modules de trai-
tements sont representes par des agents fonctionnant sur la plate-forme
MadKit et l'apprentissage se fait sur une methode derivee de VSM1 et
TFIDF utilisant un principe de listes noires ponderees permettant la re-
connaissance de documents indesirables. La dynamique de la plate-forme
repose principalement sur la possibilite d'ajouter a la volee des agents de
traitement et de pouvoir modier l'ordre et les parametres d'analyse des
documents.
1 Introduction
La richesse des informations disponibles en ligne [Woodru et al., 1996] et leur di-
versite de contenu a ouvert la porte a un besoin grandissant ces dernieres annees : la re-
cherche, l'analyse et la distribution d'informations. Ces trois grandes etapes denissent
ce qui est communement appele un processus de veille [Goujon, 2000]. Des logiciels
existent deja pour repondre a un certain nombre de ces besoins mais leur conception
generalement fermee (API obscure et non documentee, outils commerciaux, . . .) limite
leur utilisabilite.
L'approche qui a ete retenue ici est basee sur un systeme multi-agents MadKit
[Gutknecht et Ferber, 2000] ou chaque agent, relie ou non a un autre (principe de ux
d'agents decrit au paragraphe 2.4), participe a chaque etape du processus de veille.
Bien qu'assez simple en apparence, ce principe de ux implique une grande souplesse
1Vector Space Model
Utilisation d'agents pour la veille sur le Web
d'utilisation d'autant que les documents qui peuvent e^tre amenes a e^tre analyses sont
representes dans un format XML et conformes a la norme universelle de representation
des documents appelee TEI (voir paragraphe 2.3).
2 Description de la plate-forme
La plate-forme qui est decrite dans cet article est en cours de developpement au
sein du laboratoire de developpement d'EADS S&DE base au Val-de-Reuil (Eure) et
au Laboratoire d'Informatique du Havre (Seine-Maritime). Les paragraphes qui suivent
vont donc decrire le fonctionnement de celle-ci et les choix technologiques qui ont ete
retenus.
2.1 Objectifs
Le but de la plate-forme est de creer des environements de veille dans lesquels des
agents telechargent, analysent et redistribuent des documents recuperes sur diverses
sources (Internet, chiers Word, . . .). La problematique n'est pas liee a la localisation
de ces sources mais pluto^t a l'analyse des pointeurs qui vont permettre d'extraire
des informations interessantes. Ainsi c'est a l'utilisateur (personne interesses par la
surveillance d'une source) de denir ce qu'il recherche en utilisant un principe de ux
dans lequel les documents telecharges sont annotes (informations ajoutees) a la volee.
2.2 Architecture generale
La plate-forme presentee est basee sur un nouveau concept de communications
d'agents guidees par l'utilisateur : en eet, le but est de creer un ux ou les agents lo-
giciels sont connectes statiquement par l'utilisateur (principe equivalent a Clementine
ou TextVis [Landau et al., 1998]). Les agents communiquent en envoyant des messages
correspondant a des documents XML (paragraphe 2.3) et travaillent dessus en mo-
diant/ajoutant des marqueurs relatifs a des informations trouvees. Cette approche
n'empe^che pas les agents d'utiliser les schemas traditionnels de communication clas-
sique par messages broadcasts ou messages par ro^le [Ferber et Gutknecht, 1998].
Dans l'implementation qui a ete faite de cette plate-forme, il existe 3 types d'agents
qui permettent de realiser une veille complete ou me^me des operations plus simples
comme le telechargement d'un site Web complet :
{ Agents de 'dump' : agents utilises pour se connecter a une source de donnees et
recuperer son contenu (Internet, e-mails, . . .).
{ Agents d'analyse : agents utilises pour analyser le contenu des documents (Cer-
tains ajoutent des informations, d'autres ltrent, . . .).
{ Agents d'alerte : agents utilises pour envoyer une alerte a un utilisateur (par mail,
SMS, . . .).
Le principe de ux derive avant tout de la facon dont les agents vont pouvoir
s'interconnecter entre eux. En eet, les agents disposent d'entees/sorties qui vont servir
a creer ce ux et les possibilites de connexions de ces entrees/sorties vont denir les
possibilites de connexion des agents. Les agents de 'dump' possederont en general une
RNTI - E - 2
Denis et al.
seule sortie, les agents d'analyse auront une entree et au moins une sortie et les agents
d'alerte une seule sortie. Cela permet donc d'eviter la creation de cha^nes invalides (a
quoi servirait un agent d'alerte avant un agent de 'dump' ?).
Le but d'un agent est donc (entre autres) de recuperer un document (en entree),
d'y ajouter des informations (liees a son traitement), et ensuite de le redonner a l'agent
suivant (en sortie). Les documents sont decrits dans le paragraphe 2.3.
2.3 Les documents XML
Comme indique precedemment, les agents s'echangent (sur les canaux de commu-
nication representant le ux) des informations sous forme de documents XML. Ces
derniers contiennent en fait des proprietes (exposees ci-dessous) utilisees pendant le
parcours du document dans le ux d'agents :
{ Contenu binaire : c'est le contenu du document original telecharge.
{ Contenu textuel : c'est le document transforme au format XML/TEI.
{ Annotations : ce sont les informations rajoutees par les agents/utilisateurs et qui
pointent vers des parties du document XML/TEI.
{ Date, URI, . . . : autres informations pouvant e^tre utiles pour les traitements.
La representation sous forme XML/TEI [Sperberg-McQueen et Burnard, 2002] per-
met de manipuler n'importe quel format de chier textuel en utilisant des balises stan-
dardisees de representation du document [McKelvie et al., 1997]. Ainsi il est possible, a
partir d'un document TEI valide, de le transformer en document Word, PDF ou me^me
Postscript en utilisant un chier de conversion CSS. Il est donc theoriquement possible
d'analyser le contenu textuel d'un document de n'importe quel type.
L'autre intere^t d'utiliser un format de representation XML est de pouvoir ajouter
des annotations sur ce document [Brew, 2000]. En eet il est possible, a partir des
balises du document original, de faire 'pointer' une annotation vers une partie de ce
document (technologie XPath/XPointer denie par le W3C2). A charge aux agents
d'analyse d'ajouter ces annotations lors de la circulation du document dans le ux.
2.4 Le ux d'agents
Dans les approches traditionnelles orientees multi-agents, le reseau d'accointances
des agents se construit generalement de deux manieres dierentes :
1. L'agent est concu pour repondre a des reque^tes predenies (correspondant a une
approche reactive).
2. L'agent contruit son reseau d'accointances en fonction des resultats obtenus lors
de ses collaborations avec d'autres agents (suivant son ro^le/groupe comme le
denit Ferber ce qui correspond a une aproche pro-active).
Dans ces deux approches, l'utilisateur est souvent passif et ne peut donc pas in-
tervenir ecacement dans le fonctionnement de l'agent. Or dans la cas de la veille,
il est primordial que l'utilisateur puisse modier les comportement des agents pour
obtenir les resultats qu'il souhaite. Pour repondre a cette exigence l'approche retenue
2World Wide Web Consortium.
RNTI - E - 2
Utilisation d'agents pour la veille sur le Web
Fig. 1 { Architecture des agents et principe de ux.
consiste a pouvoir construire a la volee une partie du reseau d'accointances des agents :
cela permet d'etablir un ux d'agents dans lequel les documents circulent ce qui per-
met aux agents de les annoter a la volee (gure 1). Pour autant, il ne s'agit pas de
xer denitivement les communications. Celles-ci peuvent e^tre modiees au cours du
temps et, de plus, l'agent dispose toujours du moyen de communication non ge qui
est la communication classique par messages (denis par la FIPA et implementes dans
MadKit).
L'agent dispose donc de deux moyens de communications possibles :
1. Les documents qui circulent sur les entrees/sorties (leur nombre est determine
par l'implementation de l'agent : un agent qui ltre un document par mot-cles
va par exemple posseder une seule entree et deux sorties qui correspondent aux
ltrages positif et negatif du document).
2. Les autres messages (broadcasts ou bien cibles) qui restent utilisables (un exemple
est donne dans le paragraphe 3 concernant l'agent de clustering).
Pour resumer, cette plate-forme permet la creation de cha^nes de traitements3 intel-
ligentes basees sur une approche multi-agents. Une description plus detaillee est donnee
dans [Xavier Denis, 2002].
2.5 Capture d'ecran
La gure 2 represente une capture d'ecran de la plate-forme avec une cha^ne de
tra^tement simple constituee d'un agent de dump, de quelques agents de ltrage (nou-
veaute, mots-cles) et d'un agent de classement par contenu (clustering). On peut aussi
voir quatre clusters qui ont ete crees. Le terme 'Macro Agent' designe un environnement
ferme (d'ou les messages ne peuvent sortir) dans lequel des agents evoluent ; plusieurs
environnements peuvent evidemment exister simultanement dans la plate-forme.
3'Workow' dans la litterature anglo-saxone
RNTI - E - 2
Denis et al.
Fig. 2 { Capture d'ecran de la plate-forme.
Fig. 3 { Problematique du clustering.
3 Le probleme de la classication de documents
Un processus de veille implique souvent de devoir categoriser des documents en
fonction du centre d'intere^t d'un utilisateur (gure 3). Cela se fait essentiellement par
construction d'une bibliotheque d'apprentissage initiale representant des ensembles de
documents dits 'interessants' et par l'ajout continuel de nouveaux documents dans
ces categories predenies [Debole et Sebastiani, 2003]. Cependant, dans les approches
classiques des logiciels de veille, il est tres rare de pouvoir corriger des problemes lies a
la classication au cours du temps sans devoir remettre en cause le classement original.
Pour repondre a cette limitation, la plate-forme integre un agent d'analyse charge de
classier des documents arrivant sur son entree de ux et qui gere le retour d'experience
de l'utilisateur. Cet agent est appele 'contro^leur de clusters' (paragraphe 3.3) et uti-
lise un autre type d'agents appeles 'cluster' (paragraphe 3.2) charge de contenir les
documents.
RNTI - E - 2
Utilisation d'agents pour la veille sur le Web
3.1 Operations disponibles sur les clusters
An de pouvoir ameliorer les resultats du clustering au cours du temps, un certain
nombre d'operations doivent e^tre disponibles pour l'utilisateur. Celles-ci sont decrites
ci-dessous :
{ Categorisation automatique de nouveaux documents dans des clusters existants.
{ Creation automatique de nouveaux clusters pour des documents dont la thematique
est eloignee de ceux presents dans les clusters.
{ Ajout/suppression de documents dans des clusters.
{ Suppression de clusters.
{ Deplacement de documents d'un cluster a un autre.
{ Apprentissage des besoins de l'utilisateur (eviter que des documents deplaces
d'un cluster A a un cluster B ne reviennent dans A).
{ Visualisation des documents d'un cluster.
{ Anage manuel des parametres de sensibilite.
{ Rejetter un document d'un cluster et le re-categoriser immediatement.
Toutes ces operations sont disponibles dans l'implementation actuelle de la plate-
forme. Une description de la facon dont les algorithmes fonctionnent est donnee dans
le paragraphe 3.4.
3.2 Description des agents cluster
L'agent cluster est l'entite qui represente un cluster (ensemble de documents proches
en terme de contenu). La proximite ou non de ces documents est denie par la me-
sure TFIDF communement utilisee en recherche d'information [Chakrabarti, 2000] et
decrite au paragraphe 3.4. Le choix de cette mesure est avant tout liee a la simplicite
et aux relativement bons resultats qu'elle obtient. Bien su^r il peut (et doit) exister
plusieurs de ces agents pour representer des groupes de documents semblables. Ainsi
la problematique de categorisation exposee dans la gure 3 consiste pour les agents
cluster a analyser le contenu des nouveaux documents qu'ils recoivent et a repondre
(positivement ou negativement) a l'evaluation par score en fonction des documents
qu'ils contiennent deja.
L'intere^t du clustering est de pouvoir identier et regrouper des documents sem-
blables. Cependant que se passe-t-il si un document est accepte par un cluster A alors
qu'il devrait arriver dans un cluster B ? Et surtout comment modier le systeme pour
qu'un utilisateur puissse deplacer le document en question et indiquer a l'agent cluster
A que des documents semblables ne doivent plus revenir ? De cette question est nee
le principe de liste noire de documents : chaque cluster contient sa liste de documents
(dits positifs) et un ensemble de documents dits negatifs. Ainsi un agent cluster ne peut
accepter un nouveau document que si celui-ci n'est pas trop proche (distance expliquee
au paragraphe 3.4) des documents negatif. Ceux-ci se construisent au fur et a mesure
des actions entreprises par l'utilisateur (ou par le systeme) : des qu'un document d est
deplace de A vers B, d est automatiquement ajoute a la liste des documents negatifs
du cluster A.
Ce paragraphe presente le principe de fonctionnement des agents clusters. Cepen-
dant, et pour permettre de decider quel agent cluster doit au nal accueillir le document,
RNTI - E - 2
Denis et al.
Fig. 4 { Problematique du clustering avec les agents.
un nouvel agent est necessaire : cet agent organise un vote parmi les agents clusters et
decide ou va le document. Il est appele agent contro^leur de clusters.
La gure 4 montre des agents cluster contenant des documents, l'agent contro^leur
des clusters (paragraphe 3.3) et les documents entrants.
3.3 Description de l'agent contro^leur de clusters
Le principal but de l'agent contro^leur de clusters est de gerer les reponses donnees
par les agents clusters lors de l'arrivee de nouveaux documents. Son fonctionnement
est assez simple :
1. A la reception d'un document il contacte tous les agents clusters pour savoir
combien existent.
2. S'il n'en existe aucun alors il en cree un et lui assigne le document. Sinon il inter-
roge tous les clusters pour demander le score que chacun atttribue au document
(en terme de distance representee par la mesure TFIDF).
3. Il attend ensuite les reponses et selectionne le cluster qui obtient le meilleur score
pour lui assigner le document. Au cas ou aucun agent cluster ne repond (car le
document est trop proche de la liste noire des clusters), le document est associe
a un nouveau cluster.
Il est important de preciser qu'un agent cluster doit conna^tre l'integralite du corpus
(ensemble des documents deja categorises) pour qu'il puisse donner un score a un
document (cela peut impliquer des problemes d'espace memoire qui ne sont pas pris
en compte ici). Cette recuperation du corpus est faite par l'agent contro^leur de cluster
pendant la deuxieme phase decrite precedemment :
1. Il envoit un message broadcast pour contacter les agents clusters. Ceux-ci repondent
en envoyant un tableau contenant le vocabulaire (mots) de leurs documents.
2. A partir des reponses obtenues precedemment, il reconstruit le vocabulaire com-
plet du corpus (etape necessaire dependante de l'implementation de la mesure
TFIDF) et envoit un nouveau message aux clusters qui ont repondu. Celui-ci
contient le document a categoriser et les informations sur le corpus. A partir de
ce moment les agents clusters peuvent repondre en envoyant le score evalue.
RNTI - E - 2
Utilisation d'agents pour la veille sur le Web
TFIDF (wi; d) = tf (wi; d)  idf (wi)
ou tf (wi; d) represente la frequence du mot wi dans le document d
et idf (wi) = log

1+N
1+df(wi)

(N la taille maximale evaluee du corpus).
Tab. 1 { Mesure TFIDF
Document d et cluster C a evaluer
dist (d; C) =
P
TFIDF (w;d):TFIDF (w;C)pP
TFIDF (w;d):
pP
TFIDF (w;C)
8w 2 d \ C
Tab. 2 { Distance cosine entre un document et un cluster
Cette etape permet de s'assurer que le corpus est bien synchronise avec les agents
clusters existants (en particulier si un utilisateur supprime des agents clusters a la
main).
3.4 Description des algorithmes
Ce paragraphe concerne la description des algorithmes utilises pour la classication
des documents et un rappel de la mesure TFIDF. Celle-ci repose sur une representation
vectorielle des documents. En eet, chaque document va e^tre represente par un vec-
teur contenant la frequence des mots dans l'espace vectoriel de l'ensemble du corpus4
[Mladenic, 1998]. De la me^me facon un corpus est represente par son centrode qui est
le vecteur representant la frequence de mots du cluster dans l'espace vectoriel du corpus
complet.
La mesure TFIDF est depuis longtemps utilisee dans les problemes de categorisation :
bien qu'assez simple, elle donne de bons resultats [Joachims, 1997]. La table 1 en donne
la formule. La table 2 donne la distance entre un cluster et un document. Enn la table
3 resume l'algorithme applique par l'agent contro^leur de clusters pour categoriser un
nouveau document. Il introduit un seuil de sensibilite de creation de nouveaux clusters
qui est a determiner experimentalement (en fonction des besoins de l'utilisateur et des
types de documents).
3.5 Apport des agents dans la resolution du probleme
Le probleme tel qu'il a ete decrit pour le moment est tres proche d'une implementation
parallelisee du clustering. Quel est donc l'apport du systeme multi-agents ?
Tout d'abord, il autorise une distribution du probleme sur plusieurs ordinateurs :
cela permet d'alleger la charge de traitement du logiciel. Ensuite, l'autonomie des agents
ouvre la voie a un certain nombre de possibilites (non implementees dans la version
actuelle de la plate-forme mais en cours d'elaboration) :
4representation par 'bag of words'
RNTI - E - 2
Denis et al.
d : le nouveau document a categoriser
clusterAgents = contacterTousLesAgentsClusters()
statsCorpus = calculerCorpus(clusterAgents)
Pour chaque agent dans clusterAgents
scores += recueillirScore(agent)
Fin pour
Si scores est vide Alors
creerNouveauCluster()
Sinon
Si meilleurScore(scores) > seuil Alors
AjouterAuMeilleurAgentCluster()
Sinon
creerNouveauCluster()
Fin si
Fin si
Tab. 3 { Algorithme de decision de classication
{ Reorganisation automatique des clusters par communication entre agents clus-
ters : les agents peuvent s'echanger des documents qu'ils considerent trop eloignes
et les proposer a d'autres clusters (par un systeme de vote equivalent a celui decrit
au paragraphe 3.4 mais sans passer par l'agent controleur de clusters). Bien que
cette methode ne soit pas encore implementee, elle ore des perspectives tout a
fait interessantes surtout du point de vue de l'amelioration des resultats au cours
du temps.
{ Reorganisation automatique du ux d'agents par insertion d'agents ltrants (en
fonction du retour d'experience utilisateur). Ce ltre permettrait d'eliminer des
documents des leur telechargement en fonction d'un retour d'experience utilisa-
teur plus general (refus explicite de documents).
4 Tests de performance
Ce paragraphe concerne les tests preliminaires de performance sur le clustering avec
retour d'experience.
4.1 Documents utilises
Les tests ont ete eectues sur une base de 30 documents issus du site http ://fr.news.yahoo.com.
Bien su^r, cela ne sert pas a evaluer les performances brutes de la mesure TFIDF puisque
de nombreux articles en parlent deja. En fait, ces documents servent a conrmer que
l'utilisation d'une liste noire peut ameliorer grandement les performances de la classi-
cation et donc de la veille. Le tableau 4 decrit les sujets des documents recuperes.
RNTI - E - 2
Utilisation d'agents pour la veille sur le Web
Categorie Irak Multimedia Sports Total
- 14 10 7 31
Tab. 4 { Sujets des documents de test.
N Taille Sujet
1 14 14 Irak (5 Irak, 2 Kurdistan, 7 NU)
2 6 6 Multimedia (Microsoft, RedHat, HP)
3 1 1 Multimedia (intrusion)
4 1 1 Multimedia (mobilite)
5 1 1 Multimedia (blu-ray)
6 1 1 Multimedia (Linux XBox)
7 2 2 Sport (cyclisme)
8 1 1 Sport (rugby)
9 3 3 Sport (2 golf, 1 tennis)
10 1 1 Sport (basket-ball)
Tab. 5 { Clusters trouves (sans retour d'experience).
4.2 Tests
La premiere etape de la clusterisation consiste a trouver un seuil convenable pour
le reperage de nouveaux clusters. Pour les documents presentes precedemment, celle-ci
correspond a 0,15. Ainsi, les clusters obtenus automatiquement sont decrits dans la
table 5. On peut voir qu'il existe deux clusters qui concernent Microsoft (clusters 2
et 6) : que se passe-t-il si de nouveaux documents concernant Windows doivent e^tre
categorises? La table 6 repond a cette question en comparant les clusters choisis pour
stocker de nouveaux documents issus du me^me site (5 concernant Windows) sans retour
d'experience de l'utilisateur avec ensuite avec (seuls les clusters modies 2 et 6 sont
representes). On peut voir que sans avoir deplace le document parlant de Microsoft du
cluster 2 au cluster 6, les nouveaux documents auraient ete scindes en deux parties. La
gestion de la liste noire permet donc d'empe^cher qu'un document ne revienne dans un
cluster.
Bien su^r, l'exemple des cinq documents ne sert ici qu'a illustrer le bon fonction-
nement du principe de liste noire. D'autres tests ont ete eectues et montrent que le
retour d'experience de l'utilisateur permet de construire des clusters mieux structures
au cours du temps. Il reste cependant a tester cette methode sur un corpus plus grand
et normalise pour verier que la liste noire ne bloque pas entierement le cluster.
5 Conclusion
Les tests eectues montrent qu'un retour d'experience utilisateur peut grandement
ameliorer les performances d'un systeme de veille : la plate-forme presentee permet
RNTI - E - 2
Denis et al.
N Taille Sujet Avant Action Apres
2 6 6 (Microsoft, RH, HP) +4 Windows -1* Windows
6 1 1 (Linux XBox) +1 Windows +1* Windows +5 Windows
Tab. 6 { Clusters trouves en deplacant le document concernant Windows du cluster 2
vers le 6 (colonne 'Action').
d'utiliser des agents et ce retour d'experience de maniere assez simple. Cependant
des tests plus pousses doient e^tre realises pour conrmer ces resultats preliminaires
(utilisation d'une base de donnees de documents reconnue) et une autre implemenation
de l'algorithme de clustering doit aussi e^tre choisie (SVM semble e^tre une des meilleures
possibilites et est en cours d'implementation).
References
[Brew, 2000] Chris Brew. Xml and linguistic annotation, 2000.
[Chakrabarti, 2000] Chakrabarti. Data mining for hypertext : A tutorial survey.
SIGKDD : SIGKDD Explorations : Newsletter of the Special Interest Group (SIG)
on Knowledge Discovery and Data Mining, ACM, 1, 2000.
[Debole et Sebastiani, 2003] Franca Debole et Fabrizio Sebastiani. Supervised term
weighting for automated text categorization, 2003.
[Ferber et Gutknecht, 1998] J. Ferber et O. Gutknecht. A meta-model for the analysis
and design of organizations in multi-agent systems, 1998.
[Goujon, 2000] B. Goujon. Extraction d'informations techniques pour la veille par
exploration de notions independantes d'un domaine. Terminologies nouvelles, 19 :33{
42, 2000.
[Gutknecht et Ferber, 2000] Olivier Gutknecht et Jacques Ferber. The MADKIT agent
platform architecture. In Agents Workshop on Infrastructure for Multi-Agent Sys-
tems, pages 48{55, 2000.
[Joachims, 1997] Thorsten Joachims. A probabilistic analysis of the Rocchio algo-
rithm with TFIDF for text categorization. In Douglas H. Fisher, editor, Proceedings
of ICML-97, 14th International Conference on Machine Learning, pages 143{151,
Nashville, US, 1997. Morgan Kaufmann Publishers, San Francisco, US.
[Landau et al., 1998] David Landau, Ronen Feldman, Yonatan Aumann, Moshe
Fresko, Yehuda Lindell, Orly Liphstat, et Oren Zamir. Textvis : An integrated
visual environment for text mining. In Principles of Data Mining and Knowledge
Discovery, pages 56{64, 1998.
[McKelvie et al., 1997] D. McKelvie, C. Brew, et H. Thompson. Using sgml as a basis
for data-intensive nlp, 1997.
[Mladenic, 1998] Dunja Mladenic. Feature subset selection in text-learning. In Euro-
pean Conference on Machine Learning, pages 95{100, 1998.
RNTI - E - 2
Utilisation d'agents pour la veille sur le Web
[Sperberg-McQueen et Burnard, 2002] C.M.. Sperberg-McQueen et L. (eds.) Burnard.
Tei p4 : Guidelines for electronic text encoding and interchange. text encoding ini-
tiative consortium., 2002.
[Woodru et al., 1996] Allison Woodru, Paul M. Aoki, Eric Brewer, Paul Gauthier,
et Lawrence A. Rowe. An investigation of documents from the World Wide Web.
Computer Networks and ISDN Systems, 28(7{11) :963{980, 1996.
[Xavier Denis, 2002] Nicolas Chanchevrier Xavier Denis. Plate-forme de veille multi-
approche pour l'aide a la decision. In 1ere JESIADIS, pages 103{118, Brest, FR,
2002.
Summary
Many techniques exist to classify text documents depending on the user's needs
(kNN, SVM, . . .). Unfortunately, integrating these algorithms into a textmining plat-
form is often done statically and prevents enhancing the processing in real-time. The
aim of this article is to introduce a textmining platform in which heterogeneous data
are represented using XML/TEI technology and where the user can interact with the
full process of getting and analysing these data. To achieve that, the processing mo-
dules are represented as agents working on the MadKit platform. The learning process
is based on a method derived from VSM and TFIDF using a kind of weighted black list
(enabling undesired documents detection). The dynamic of the platform mainly relies
on the possibility to add agents on the y and to modify the parameters and order of
the documents processing.
RNTI - E - 2
