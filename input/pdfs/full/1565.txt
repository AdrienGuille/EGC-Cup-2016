La fragmentation dans les entrepoˆts de donne´es :
une approche base´e sur les algorithmes ge´ne´tiques
Ladjel Bellatreche∗, Boukhalfa Kamel ∗∗
∗ LISI/ENSMA
Futuroscope - France
bellatre@ensma.fr
∗∗ Universite´ de Laghouat Route de Ghardaia,BP 37G
Laghouat Alge´rie
k.boukhalfa@mail.lagh-univ.dz
Re´sume´. La fragmentation horizontale est une technique d’optimisation
non redondante de requeˆtes de´cisionnelles de type ROLAP. L’utilisation
de cette technique dans les entrepoˆts de donne´es repre´sente un enjeu plus
important que dans un contexte de bases de donne´es traditionnelles. Cette
importance est due au diffe´rents choix des tables (de dimensions ou des
faits) a` fragmenter. Dans le contexte des entrepoˆts, la fragmentation n’a
un sens que si la table des faits est partitionne´e en fonction des sche´mas
de fragmentation des tables de dimensions. Mais ce type de fragmenta-
tion de la table des faits pourrait engendrer un nombre important de
fragments qui rendrait le processus de maintenance tre`s couˆteux. Afin de
re´duire ce nombre ou le rendre controˆlable par l’administrateur de l’en-
trepoˆt, nous proposons l’utilisation d’un algorithme ge´ne´tique. Ce dernier
a pour but de se´lectionner les tables de dimension a` fragmenter pour (1)
e´viter l’explosion du nombre de fragments de la table des faits et (2)
garantir une meilleure performance d’exe´cution des requeˆtes. Notre al-
gorithme ge´ne´tique est de´veloppe´ sous visual C et valide´ par une e´tude
expe´rimentale en utilisant le banc d’essai APB-1 release II.
1 Introduction
Les principales caracte´ristiques des entrepoˆts de donne´es sont leur grande taille et la
complexite´ des requeˆtes de´cisionnelles dues aux ope´rations de jointure et d’agre´gation.
Plusieurs techniques d’optimisation ont e´te´ propose´es pour re´duire le couˆt d’exe´cution
de requeˆtes. Ces techniques peuvent eˆtre divise´es en deux cate´gories : structures re-
dondantes et structures non redondantes. Les structures redondantes ne´cessitent un
espace de stockage et un couˆt de mises a` jour. Parmi ces dernie`res, on peut citer
les vues mate´rialise´es et les index [Kotidis et Roussopoulos, 1999, Gupta, 1999]. La
deuxie`me cate´gorie ne ne´cessite pas de couˆt de stockage. C’est le cas des techniques de
fragmentation (horizontale et verticale) [Sanjay et al., 2004]. La plupart des syste`mes
commerciaux comme ORACLE, DB2 proposent les deux structures [Zilio et al., 2004,
Sanjay et al., 2004]. Dans ce papier nous nous inte´ressons a` une structure non redon-
dante, a` savoir la fragmentation horizontale. Plusieurs travaux de recherche et des pro-
duits commerciaux ont montre´ son utilite´ dans le processus d’optimisation des requeˆtes
- 141 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
de´cisionnelles [Sanjay et al., 2004, Bellatreche et al., 2004].
La fragmentation horizontale dans les entrepoˆts de donne´es repre´sente un enjeu
plus important que dans un contexte de base de donne´es relationnelles ou objet. Cette
importance est due au choix des tables (de dimensions ou des faits) a` fragmenter. Les
choix possibles sont les suivants :
1. Fragmenter seulement quelques tables de dimensions. Ce choix n’est pas souhai-
table pour les requeˆtes de´cisionnelles, pour deux raisons : (i) les tailles des tables
de dimensions sont ge´ne´ralement petites, (ii) les requeˆtes de´cisionnelles acce`dent
a` la table des faits qui est tre`s volumineuse. En conse´quence, toute fragmentation
ne prenant pas en conside´ration la table des faits est a` exclure.
2. Partitionner seulement la table des faits. La table des faits est compose´e des
cle´s e´trange`res des tables de dimensions et des donne´es brutes. Ces dernie`res
repre´sentent des mesures nume´riques, comme le montant des ventes, le nombre
d’articles solde´s, etc. Ge´ne´ralement, dans une requeˆte de´cisionnelle, nous trouvons
rarement des pre´dicats de se´lection de´finis sur la table des faits. De plus, une
requeˆte de´cisionnelle typique commence par la se´lection des crite`res selon lesquels
s’effectuera l’analyse sur les tables de dimensions, puis s’orientera sur la valeur
des indicateurs pour la se´lection effectue´e [Noaman et Barker, 1999]. Ce choix est
donc moins souhaitable pour le processus de la fragmentation.
3. Fragmenter totalement ou partiellement les tables de dimensions et utiliser leurs
sche´mas de fragmentation pour partitionner la table des faits (dans ce cas, la
table des faits est alors partitionne´e en utilisant la fragmentation de´rive´e). Ce
choix est bien adapte´ aux entrepoˆts, car il prend en conside´ration les exigences
des requeˆtes de´cisionnelles, ainsi que les relations entre les tables de dimensions
et la table des faits [Bellatreche et al., 2004].
Supposons que chaque table de dimension Di fragmente´e a mi fragments :
{Di1, Di2, ..., Dimi}, ou` chaque fragment Dij est de´fini par :
Dij = σclij (Di) avec cl
i
j (1 ≤ i ≤ g, 1 ≤ j ≤ mi) repre´sentant une conjonction de
pre´dicats simples.
Ainsi le sche´ma de fragmentation de la table des faits F est de´fini comme suit :
Fi = FD1iD2i...Dgi, avec qui repre´sente l’ope´ration de la semi-jointure.
Exemple 1 Conside´rons un sche´ma en e´toile avec trois tables de dimension (Client,
Temps, Produit) et une table des faits Ventes. Supposons que seule la table de dimen-
sions CLIENT soit de´compose´e en deux fragments horizontaux Client 1 et Client 2
de´finis par les clauses suivantes :
Client 1 = σSexe=‘M ′ (CLIENT ) (1)
Client 2 = σSexe=‘F ′(CLIENT ) (2)
La table des faits VENTES peut alors eˆtre de´compose´e en utilisant la fragmentation
horizontale de´rive´e, en deux fragments horizontaux Ventes 1 et Ventes 2 tels que :
V entes 1 = V ENTES  Client 1 (3)
V entes 2 = V ENTES  Client 2 (4)
RNTI - E -
- 142 -RNTI-B-1
Bellatreche et al.
   
Mois      : 4 bytes
   
59 bytes
     CLIENT
TID       : 2 bytes
Année    : 4 bytes
Saison    : 4  bytes
30 bytes
     TEMPS
CID                    : 4 bytes 
   
     PRODUIT
   
Ventes_Dollar    : 8 bytes
Coût_Dollars      : 8 bytes
    VENTES
   300, 000 tuples
3, 000, 000 tuples
          1, 094 tuples
Légende:
:  Table des faits
: Table de dimension
TID                    : 2  bytes
Type_paquet : 4 bytes
Date      : 16 bytes
CID       : 4 bytes
Sexe       : 1 byte
Ville       : 25 bytes
Etat         : 25 bytes
Age         : 4  bytes
: Clé étrangère
 
Poids              : 4 bytes
Taille             : 4 bytes
Gamme          : 10 bytes
SKU             : 25 bytes
PID               : 4 bytes
51 bytes
Coût_Unitaire      : 8 bytes
34 bytes
100, 000, 000 tuples
PID                     : 4 bytes
Fig. 1 – Sche´ma en e´toile des activite´s de ventes
Le sche´ma en e´toile initial (Ventes, Client, Produit, Temps) est la juxtaposition de deux
sous-sche´mas en e´toile S1 et S2 tels que : S1 : (Ventes 1, Client 1, Produit, Temps)
(ventes des clients masculins) et S2 : (Ventes 2, Client 2, Produit, Temps) (ventes des
clients fe´minins).
2 Complexite´ de la fragmentation de´rive´e de la table
des faits
Soit un sche´ma en e´toile de d tables de dimensions et une table des faits. Soit g
(g ≤ d) le nombre de tables de dimensions horizontalement fragmente´es. Le nombre de
fragments horizontaux (de´note´ par N) de la table des faits est donne´ par l’e´quation
suivante :
N =
g∏
i=1
mi (5)
ou` mi repre´sente le nombre de fragments de la table de dimensions Di.
D’apre`s l’e´quation 5, nous constatons que la fragmentation de´rive´e de la table des
faits peut ge´ne´rer un tre`s grand nombre de fragments et en conse´quence beaucoup de
sous-sche´mas en e´toile.
Exemple 2 Conside´rons le sche´ma en e´toile de l’exemple 1 telles que les tables de
dimensions soient partitionne´es comme suit :
– CLIENT en 50 fragments en utilisant l’attribut “Etat” 1,
– TEMPS en 36 fragments en utilisant l’attribut “Mois”, et
– PRODUIT en 80 fragments en utilisant l’attribut type de produit.
1cas de 50 e´tats aux U.S.A.
RNTI - E -
- 143 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
La table des faits est donc fragmente´e en 144000 (= 50 × 36 × 80) fragments et le
sche´ma en e´toile en 144000 sous-sche´mas. Il devient difficile pour l’administrateur de
l’entrepoˆt de ge´rer tous ces fragments.
A travers l’exemple pre´ce´dent, il apparaˆıt indispensable de re´duire le nombre de frag-
ments de la table des faits pour une meilleure gestion. Il est donc ne´cessaire d’introduire
des me´thodes de se´lection des tables de dimension a` fragmenter pour :
– E´viter l’explosion du nombre de fragments de la table des faits.
– Garantir une meilleure performance d’exe´cution d’un ensemble de requeˆtes les
plus fre´quentes.
Pour atteindre le premier objectif, nous donnons a` l’administrateur de l’entrepoˆt la
possibilite´ de choisir le nombre maximum de fragments (W ). Ce nombre est fixe´ en
fonction du couˆt de maintenance de l’entrepoˆt fragmente´. Pour satisfaire le deuxie`me
objectif, nous devons avoir la possibilite´ d’augmenter le nombre de fragments tant
que la performance globale peut eˆtre ame´liore´e. Le proble`me est donc de trouver un
compromis entre le couˆt de maintenance et le couˆt d’exe´cution des requeˆtes, comme le
montre la Figure 2.
Pour satisfaire ce compromis nous allons utiliser les algorithmes ge´ne´tiques vu leurs
capacite´ d’explorer un espace de solutions plus large [Ba¨ck, 1995, Bennett et al., 1991].
Notre proble`me ressemble au proble`me d’allocation de documents sur multiprocesseurs
[Frieder et Siegelmann, 1997], et re´plication des donne´es [Loukopoulos et Ahmad, 2004],
ou` les algorithmes ge´ne´tiques ont donne´ des meilleurs re´sultats. Notons que ces algo-
rithmes ont e´te´ e´galement utilise´s pour re´soudre plusieurs proble`mes d’optimisation
des requeˆtes OLAP comme la se´lection des vues mate´rialise´es [Zhang et Yang, 1999].
Coût d’exécution de requêtes Coût de  maintenance
Coûts
Nombre de fragments (N)
Fig. 2 – Evolution des couˆts en fonction du nombre de fragments
Cet article est divise´ en cinq sections. Apre`s l’introduction du proble`me de la frag-
mentation dans le contexte des entrepoˆts de donne´es mode´lise´s par un sche´ma en e´toile,
nous pre´sentons ses contraintes d’optimisation. La section 2 pre´sente la complexite´ de
la fragmentation horizontale de´rive´e de la table des faits. La section 3 pre´sente l’al-
gorithme ge´ne´tique avec ses quatre e´tapes principales (se´lection, codage, mutation et
fonction se´lective). Une e´tude expe´rimentale est re´alise´e en utilisant un benchmark
RNTI - E -
- 144 -RNTI-B-1
Bellatreche et al.
APB-1 release II (Section 4). La section 5 conclut le papier et pre´conise quelques voies
de recherche.
3 Algorithme ge´ne´tique
Les algorithmes ge´ne´tiques (AG) sont des me´thodes d’optimisation de fonctions
[Ba¨ck, 1995]. Ces algorithmes s’inspirent de l’e´volution ge´ne´tique des espe`ces, sche´mati-
quement, ils copient de fac¸on extreˆmement simplifie´e certains comportements des popu-
lations naturelles. Ainsi, ces techniques reposent toutes sur l’e´volution d’une population
des solutions, qui, sous l’action de re`gles pre´cises optimisent un comportement donne´,
exprime´ sous une fonction, dite fonction se´lection (fitness function) ou adaptation a`
l’environnement.
3.1 Concepts de base
Un AG est un algorithme ite´ratif de recherche d’optimum, il manipule une popu-
lation de taille constante. Cette dernie`re est forme´e de candidats appele´s individus.
La taille constante de la population entraˆıne un phe´nome`ne de compe´tition entre les
individus. Chaque individu repre´sente le codage d’une solution potentielle au proble`me
a` re´soudre. Il est constitue´ d’un ensemble d’e´le´ments appele´s ge`nes, pouvant prendre
plusieurs valeurs appartenant a` un alphabet non force´ment nume´rique [Ba¨ck, 1995].
A chaque ite´ration, appele´e ge´ne´ration, est cre´e´e une nouvelle population avec le
meˆme nombre d’individus. Cette ge´ne´ration consiste en des individus mieux ”adapte´s”
a` leur environnement tel qu’il est repre´sente´ par la fonction se´lective. Au fur et a` mesure
des ge´ne´rations, les individus vont tendre vers l’optimum de la fonction se´lective. La
cre´ation d’une nouvelle population, a` partir de la pre´ce´dente, se fait par application
des ope´rateurs ge´ne´tiques que sont : la se´lection, le croisement et la mutation. Ces
ope´rateurs sont stochastiques.
La se´lection des meilleurs individus est la premie`re ope´ration dans un algorithme
ge´ne´tique. Au cours de cette ope´ration, l’algorithme se´lectionne les e´le´ments pertinents
qui optimisent le mieux la fonction. Le croisement permet de ge´ne´rer deux individus
nouveaux ”enfants” a` partir de deux individus se´lectionne´s ”parents” , tandis que la
mutation re´alise l’inversion d’un ou plusieurs ge`nes d’un individu [Ba¨ck, 1995].
La Figure 3 illustre les diffe´rentes ope´rations qui interviennent dans un algorithme
ge´ne´tique : Les AGs fonctionnent sur une population d’individus N (la population
repre´sente tous les sche´mas de fragmentation possibles), que l’on croise entre eux pour
trouver un individu ”parfait” qui correspond au proble`me pose´. Dans le cas de notre
e´tude, le but est de trouver un sche´ma de fragmentation optimal de l’entrepoˆt de
donne´es.
Etant donne´ qu’un individu doit repre´senter une solution a` part entie`re du proble`me
pose´, il devra donc repre´senter un sche´ma de fragmentation possible de l’entrepoˆt. Ce
sche´ma de fragmentation doit eˆtre repre´sente´ par un individu unique qui repre´sente un
sche´ma de fragmentation possible d’un entrepoˆt de donne´es.
RNTI - E -
- 145 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
Génération aléatoire de la population initiale
Calcul de la fonction sélective
Répéter
     Sélection
     Croisement
     Mutation
     Calcul de la fonction sélective
Jusqu’à satisfaction du critère d’arrêt
Fig. 3 – Algorithme ge´ne´tique
3.2 Processus de cre´ation d’un individu
Tout algorithme de fragmentation horizontale ne´cessite un ensemble de requeˆtes
les plus fre´quentes. A partir de ces requeˆtes, nous extrairons deux types d’informa-
tions : qualitative et quantitative. Les informations qualitatives concernent les tables de
dimension et sont repre´sente´es par les pre´dicats de se´lection simples utilise´s dans les
requeˆtes. Les informations quantitatives concernent la se´lectivite´ de ces pre´dicats et les
fre´quences d’acce`s des requeˆtes. Nous rappelons qu’un pre´dicat simple p est de´fini par
p : Ai θ Valeur ,
ou` Ai est un attribut d’une relation a` fragmenter, θ ∈ {=, <,≤, >,≥, =}, Valeur
∈ Dom(Ai).
Avant de de´crire le processus de codage des individus de la population, nous devons
re´aliser les taˆches suivantes :
1. l’extraction de tous les pre´dicats de se´lection simples utilise´s par les n requeˆtes.
2. L’attribution a` chaque table de dimension Di (1 ≤ i ≤ d) d’un ensemble de
pre´dicats simples EPSDi qui lui est propre.
3. Toute table de dimension Di ayant EPSDi = φ, ne sera pas fragmente´e. Soit
Dcandidat l’ensemble de toutes les tables de dimension ayant leur ensemble de
pre´dicats simples non vide. Soit g la cardinalite´ de l’ensemble Dcandidat (g ≤ d).
4. L’application de l’algorithme COM MIN [O¨zsu et Valduriez, 1999] a` chaque en-
semble de pre´dicats simples d’une table de dimension Di. Il fournit en sortie une
forme comple`te et minimale de ces ensembles. La re`gle de comple´tude et de mini-
malite´ assure que si une table est fragmente´e en au moins deux fragments, elle sera
acce´de´e diffe´remment par au moins une application [O¨zsu et Valduriez, 1999].
3.2.1 Une repre´sentation des fragments horizontaux
L’analyse des clauses repre´sentant les fragments horizontaux permet d’effectuer
une partition du domaine des attributs de fragmentation en sous-domaines ap-
pele´s sous-domaines stables (SDS) [Simonet et Simonet, 1994]. Les e´le´ments de
cette partition sont de´termine´s par les pre´dicats de simples.
Exemple 3 Pour montrer comment les pre´dicats de fragmentation de´finissent
des partitions de chaque domaine des attributs de fragmentation (un attribut de
RNTI - E -
- 146 -RNTI-B-1
Bellatreche et al.
fragmentation est un attribut qui participe dans le processus de partitionnement).
Conside´rons trois attributs de fragmentation Age et Ville (de la table de dimension
Client), Saison (de la table de dimension Temps). Supposons que les domaines
des attributs de fragmentation sont :
– Dom(Age) = ]0, 120]
– Dom(Sexe) = {‘M ′, ‘F ′},
– Dom(V ille) = {“Grenoble′′, “Paris′′}.
– Sur l’attribut Age, trois pre´dicats simples sont de´finis : p1 : Age ≤ 18, p2 :
Age ≥ 60, et p3 : 18 < Age < 60. Le domaine de l’attribut Age (]0, 120])
est donc partitionne´ en trois SDSs par les trois pre´dicats (p1, p2, et p3) de la
manie`re suivante (voir Figure 4) :
Dom(Age) = d11∪d12∪d13, avec d11 = ]0, 18], d12 = ]18, 60[, d13 = [60, 120].
– D’une manie`re similaire, le domaine de l’attribut Sexe est partitionne´ en deux
SDSs : Dom(Sexe) = d21 ∪ d22, avec d21 = {‘M ′}, d22 = {‘F ′}
– Finalement, l’attribut Ville est partitionne´ en deux SDSs : Dom(Ville) = d31∪
d32, avec d31 = {“Grenoble”} et d32 = {“Paris”}.
Les diffe´rents SDSs de chaque attribut de fragmentation sont repre´sente´s par la
Figure 4.
0
d
11
12060181 32
d
13
d
12
Age
1 20
‘M’ ‘F’
Sexe
0
‘Poitiers’ ‘Lyon’
Ville
1 2
Fig. 4 – Les SDSs des attributs de fragmentation
Age
Ville
Sexe d11 d12 d13
d22
d21
d31
d32
Un fragment horizontal
Fig. 5 – Un exemple de repre´sentation de fragments dans le cas de trois attributs
Chaque attribut de fragmentation sera repre´sente´ par un tableau d’entier de
n cellules, ou` n correspond au nombre de sous domaines, les valeurs dans les
RNTI - E -
- 147 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
cellules de ce tableau oscilleront entre 1 et n. Si deux cellules ont la meˆme valeur,
on regroupe les sous domaines de manie`re a` n’en former qu’un.
Chaque individu (un sche´ma de fragmentation) est donc repre´sente´ par un tableau
d’entier (voir Table 1) ou par un cube (voir Figure 5).
Sexe 1 1
Saison 2 1 3 3
Age 2 1 2
Tab. 1 – Un exemple d’un individu
A partir de cette table, on peut de´duire que la fragmentation de l’entrepoˆt ne se
fera pas sur l’attribut Sexe, car tous les sous domaine de l’attribut ont la meˆme valeur.
En conse´quence, on fragmentera en utilisant l’attribut Saison et l’attribut Age. Pour
l’attribut Saison, trois pre´dicats de fragmentation sont possibles, a` savoir :
1. P1 : Saison = ”Printemps”,
2. P2 : Saison = ”Ete´”,
3. P3 : Saison = ”Automne” ∨ Saison = ”Hiver”.
Pour l’attribut Age, deux pre´dicats sont possibles : P4 : Age ≤ 18 ∨ Age ≥ 60 et
P5 : 18 < Age < 60
A partir de ces pre´dicats, nous pouvons fragmenter le sche´ma de l’entrepoˆt en 6
fragments, ou` chaque fragment est de´fini par une clause de pre´dicats :
1. P1 ∧ P4 ;
2. P1 ∧ P5 ;
3. P2 ∧ P4 ;
4. P2 ∧ P5 ;
5. P3 ∧ P4 ;
6. P3 ∧ P5.
Notons que chaque fragment est repre´sente´ par une clause conjonctive de pre´dicats
simples. Notons que tout algorithme de fragmentation doit satisfaire les re`gles de cor-
rection suivante [O¨zsu et Valduriez, 1999] :
– Comple´tude : elle assure que tous les n-uplets d’une relation sont associe´s a` au
moins un fragment.
– Disjonction : elle assure que les fragments d’une relation sont disjoints deux a`
deux
– Reconstruction : elle assure qu’une relation peut eˆtre reconstruite a` partir de ses
fragments.
Le codage de notre ge´nome doit satisfaire les re`gles de correction. Pour cela, nous avons
de´cide´ de repre´senter un individu par un tableau d’entier pour chaque attribut, ou` une
cellule correspondrait a` un sous domaine de l’attribut.
RNTI - E -
- 148 -RNTI-B-1
Bellatreche et al.
3.2.2 Inte´reˆt de ce codage
Notre codage pre´sente plusieurs avantages :
1. les nouveaux individus issus du croisement sont compris dans la limite du do-
maine.
2. Il n’y a pas de chevauchement de fragments.
3. Tous les sous domaines sont repre´sente´s.
4. La mutation ne peut pas rendre un individu invalide
Cette repre´sentation d’un individu permet de de´finir les fragments d’une table des faits
ou bien d’une table dimension.
L’avantage d’une telle repre´sentation est que, quelle que soit la fac¸on dont est
obtenue l’individu, elle est toujours valide dans les cas d’une ge´ne´ration ale´atoire ou
un croisement. Eviter de ve´rifier a` chaque cre´ation d’un individu s’il est valide ou non
repre´sente un gain de temps en calcul.
3.3 Se´lection des individus
Nous utilisons la me´thode de la roulette pour se´lectionner nos individus parents.
Dans cette me´thode chaque individu est accompagne´ de son e´valuation. Plus cette
e´valuation est e´leve´e, plus l’individu a de chances d’eˆtre se´lectionne´. Les individus
choisis sont appele´s le ”pe`re” et la ”me`re”.
– Une fois les individus choisis, on de´termine si on va les croiser ou non. On
de´termine si on croise ou pas en tirant un chiffre ale´atoire ;
– Si ce chiffre est supe´rieur a` un certain taux de croisement (en ge´ne´ral fixe´ entre
70 et 90 %), on ne croise pas et les individus sont re´injecte´s directement dans la
population de ge´ne´ration suivante.
– Si le pe`re et la me`re sont trop semblables, un seul sera re´injecte´.
Dans l’autre cas, on cre´e deux enfants a` partir des deux parents. On ajoute alors ces
enfants a` la population.
3.4 Types de croisements
Plusieurs types de croisement peuvent eˆtre envisage´s : le croisement mono-point
(1 seul point de croisement par individu), le croisement multipoints (2 ou plusieurs
points de croisement par individu), le croisement uniforme (ope´ration bit a` bit entre
les individus).
Nous avons choisi d’utiliser un croisement multipoints pour la raison suivante :
nous savons depuis la cre´ation d’un individu que les pre´dicats sont place´s les uns a` la
suite des autres dans le vecteur d’entiers. Les individus sont croise´s une fois sur chaque
pre´dicat, pour ne pas de´savantager le croisement d’un pre´dicat par rapport a` un autre.
On sait en effet que chaque pre´dicat dispose d’un nombre d’entiers diffe´rents. Si on
n’effectue qu’un croisement par individu le pre´dicat qui a un grand nombre d’entiers
(ex : ville : autant d’entiers que de villes) aura une probabilite´ de croisement supe´rieure
a` un pre´dicat qui n’a que quelque entiers (sexe : masculin-fe´minin donne 2 entiers).
Cette ope´ration de se´lection est effectue´e tant que la population n’a pas atteint le
nombre convenable d’individus.
RNTI - E -
- 149 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
3.5 Evaluation de l’individu (la fonction se´lective)
L’e´valuation d’un individu permet de de´finir quel individu est meilleur par rapport a`
un autre. Cette e´valuation donne un pourcentage qui est la somme de deux parame`tres :
le respect du seuil repre´sentant le nombre de fragments et la rapidite´ des requeˆtes. Un
nombre de point modifiable est alloue´ a` ces deux parame`tres.
– respect du seuil : par de´faut 55 points sur cent sont alloue´s. Si le nombre de
fragments obtenus est e´gale a` plus ou moins cinq pour cent le nombre de fragments
pre´conise´ par l’administrateur (ou seuil), tous les points sont alloue´s. Par la suite
plus on s’e´loigne du seuil, moins de points sont ajoute´s au re´sultat.
– rapidite´ des requeˆtes : un nombre de points uniforme est alloue´ a` chaque requeˆte.
Par de´faut, comme il reste 45 points (100 - 55 du seuil) et que nous avons 15
requeˆtes, 3 points sont alloue´s a` chaque requeˆte. La rapidite´ d’une requeˆte de´pend
d’un calcul selon un mode`le de couˆt qui nous donne le nombre d’entre´es sorties
qu’effectue la requeˆte. Ce mode`le est explique´ ci-dessous. Comme pre´ce´demment
pour le seuil, on donne tous les points (ici 3) si le nombre d’entre´es-sorties est
infe´rieur a` un certain chiffre. Puis, plus le nombre d’entre´es-sorties augmente,
moins on donne de points, selon une fonction line´airement de´croissante. Quand
le nombre d’entre´es-sorties pour une requeˆte est trop e´leve´, aucun point n’est
attribue´.
Les performances des requeˆtes de´pendent du transfert des donne´es de la me´moire
secondaire (disque dur) vers la me´moire vive. Nous supposons que les tables de dimen-
sion re´sident en me´moire.
Notons que chaque pre´dicat de fragmentation pi d’une table de dimension Dj est as-
socie´ a` un facteur de se´lectivite´ SelpiDj (compris entre 0 et 1). Ce pre´dicat pi a e´galement
un facteur de se´lectivite´ sur la table des faits note´ par SelpiF .
Pour exe´cuter une requeˆte Q sur un sche´ma d’un entrepoˆt de donne´es fragmente´
en N sous-sche´mas de l’entrepoˆt {SED1, SED2, ..., SEDN}, nous devons identifier
le(s) sous-sche´ma(s) valide(s). Pour re´aliser cette identification, une variable boole´enne
de´note´e par valide(Q,SEDi) est de´finie :
valide(Q,SEDi) =
{
1 si le sous-sche´ma SEDi est valide pour la requeˆte Q
0 sinon
Pour exe´cuter une requeˆte Q sur un sche´ma d’un entrepoˆt de donne´es fragmente´ en
N , nous proposons un mode`le de couˆt donne´ par l’e´quation suivante :
Nombre E/S =
N∑
j=1
valide(Q,SDEj)
Mj∏
i=1
(SelpiF × ||F || × L)
PS
(6)
avec, ||F || = le nombre d’enregistrements de la table des faits, L la taille d’un enregis-
trement, Mj repre´sente le nombre de pre´dicats de se´lection de´finissant la clause d’un
fragment de la table des faits du sche´ma SDEj et PS la taille d’une page disque.
Dans cette e´tude, nous avons utilise´ la se´lectivite´ des pre´dicats dans la table des
faits et non dans les tables dimensions. La se´lectivite´ peut se faire de manie`re uniforme,
on parle alors de re´partition uniforme (RU) et de manie`re non uniforme (RNU) par
une initialisation des facteurs de se´lectivite´.
RNTI - E -
- 150 -RNTI-B-1
Bellatreche et al.
3.6 La mutation
L’analogie avec le monde vivant nous ame`ne a` nous poser la question de la mutation.
Dans la nature, les mutations sont fre´quentes et entraˆınent des variations plus ou moins
marque´es de l’individu. Dans notre mode`le nous avons choisi un taux de mutation qui
se situe entre 30% et 6%, c’est le taux habituellement utilise´. Il faut choisir un juste
milieu entre une trop faible et une trop forte mutation. Les mutations s’effectuent aux
niveau des attributs de notre individu. Suivant un nombre ale´atoire, nous choisissons
de muter un ou plusieurs attributs de l’individu. On peut voir sur le sche´ma suivant la
mutation d’un attribut.
Fig. 6 – Un exemple de mutation
Sur l’exemple ci-dessus figure la mutation d’un individu sur l’un de ses attributs.
On remarque qu’il y avait trois fragments dans l’individu initial en ce qui concerne
l’attribut 2. Sur l’individu mute´, on remarque qu’il y a toujours trois fragments mais
les intervalles pris en compte ne sont plus les meˆmes. Dans la pratique, il pourrait
y avoir plus d’intervalles distincts ou un regroupement d’intervalles. De meˆme, les
mutations pourraient se produire sur plusieurs attributs de l’individu.
4 Evaluation de notre approche
Le moteur ge´ne´tique a e´te´ de´veloppe´ en Visual C sur une machine Pentium 4
fre´quence 2.80 Ghz et une Ram de 256 Mo. L’architecture de notre application est
de´crite par la Figure 7. Afin de valider notre e´tude, nous avons utilise´ le benchmark
APB-1 release II [Council, 1998]. Ce benchmark utilise un sche´ma en e´toile de´crit dans
la Figure 8. Il comporte quatre tables de dimensions (Prodlevel, Custlevel, Timelevel
et Chanlevel) et une table des faits (Actvars). Les caracte´ristiques de chaque table sont
repre´sente´es dans le table 2.
On a utilise´ 15 requeˆtes de´cisionnelles. Chaque requeˆte comporte des pre´dicats de
se´lections (chacun ayant un facteur de se´lectivite´). Chaque requeˆte a une fre´quence
d’acce`s. Nous avons utilise´ un taux de croisement de 70% et un taux de mutation :
variable de 30% au de´but jusqu’a` 6% a` la fin, de´cre´mente´ chaque 50 ge´ne´rations. Le
but vise´ est d’eˆtre permissif au de´but (taux de mutation e´leve´) pour pouvoir explorer
RNTI - E -
- 151 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
Requêtes
fréquentes
Schéma de
fragmentation
Moteur
génétique
Fichier paramètres
Fichier algorithmes
génétiques
Fichier contraintes
Entrepôt de données
……
Seuil
Fig. 7 – Architecture de moteur ge´ne´tique
Customer_level
Product_level
Channel_level
Time_level
UnitsSold
DollarSales  
DollarCost
Actvars
Store_level
Retailer_level
Custlevel
Code_level
Class_level
Group_level
Family_level
Line_level
Division_level
Prodlevel
Base_level
All_level
Chanlevel
Tid
Year_level
Quarter_level
Month_level
Timelevel
Fig. 8 – Le sche´ma du banc d’essai (APB-1)
plus de points dans l’espace de recherche. Apre`s plusieurs ge´ne´rations, un petit taux de
mutation (6%) est exige´ pour e´viter de rendre la recherche tre`s ale´atoire. Nous avons
utilise´ 1 500 ge´ne´rations, dont 40 individus par ge´ne´ration. 9 attributs de fragmentation
sont conside´re´s.
Si l’administrateur de´cide de fixer un seuil tre`s grand Seuil = 2000, les tables de
dimension sont fragmente´es de la manie`re suivante comme le montre la Figure 10.
La meilleure fac¸on de fragmenter l’entrepoˆt est la suivante :
1. la table Prodlevel en 48 fragments,
2. la table Timelevel en 7 fragments,
3. la table Custlevel en 2 fragments,
RNTI - E -
- 152 -RNTI-B-1
Bellatreche et al.
Table Nombre d’enregistrements Taille d’un enregistrement
Actvars 24786000 74
Chanlevel 9 24
Custlevel 900 24
Prodlevel 9000 72
Timelevel 24786000 36
Tab. 2 – Tailles des tables
0
50000
100000
150000
200000
250000
300000
350000
E/S
2 3 4 5 6 7 8 9
nombre d'attributs
Nombre d'E/S par nombre d'attributs utilisés
RNU
RU
Fig. 9 – Nombre d’E/S par rapport au nombre d’attributs utilise´s
Code_level 0 1 2 0 3 Fragments  Prodlevel
Group_level 0 1 2 Fragments  Prodlevel
Family_level 1 2 0 2 3 4 Fragments  Prodlevel
Line_level 0 0 1 Fragment    Prodlevel
Division_level 1 1 0 0 2 Fragments  Prodlevel
Year_level 0 0 1 Fragment   Timelevel
Month_level 5 10 7 4 10 2 4 0 3 7 4 2 7 Fragments  Timelevel
Retailer_level 1 1 1 2 2 Fragments  Custlevel
All_level 1 0 2 0 2 3 Fragments  Chanlevel
Fig. 10 – La Structure des fragments finaux
4. la table Chanlevel en 3 fragments,
5. et table des faits en 2016 fragments
La Figure 9 montre l’e´volution du nombre d’E/S par rapport au nombre d’attributs
RNTI - E -
- 153 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
utilise´s dans la fragmentation. Les re´sultats montrent que le nombre d’attributs utilise´s
dans le processus de fragmentation a un impact tre`s important dans la re´duction du
nombre d’E/S total. On remarque aussi que la re´partition non uniforme donne de
meilleurs re´sultats par rapport a` la re´partition uniforme.
0
500
1000
1500
2000
2500
Nombre de 
fragments
2 3 4 5 6 7 8 9
Nombre d'attributs
Nombre de fragments par rapport au nombre 
d'attributs
RU
RNU
Fig. 11 – Nombre de fragments par rapport au nombre d’attributs utilise´s
La Figure 11 montre l’e´volution du nombre de fragments de la table des faits avec
l’augmentation des attributs utilise´s dans la fragmentation. On constate que le type de
re´partition n’a pas d’effet conside´rable sur le nombre total de fragments.
RU
RNU
Sans 
Fragmentation
0
100000
200000
300000
400000
500000
RU RNU Sans
Fragmentation
Répartition
Nombre d'E/S
Fig. 12 – Nombre d’E/S total par rapport a` la re´partition
La Figure 12 montre clairement que la fragmentation diminue largement le nombre
d’E/S total d’exe´cution des requeˆtes ce qui confirme la the´orie de la fragmentation.
On constate aussi que la re´partition non uniforme est plus be´ne´fique que la re´partition
uniforme.
La Figure 13 montre que le nombre de tables de dimensions fragmente´es joue un
roˆle tre`s important dans la re´duction du nombre d’E/S. Tant que le nombre de tables
RNTI - E -
- 154 -RNTI-B-1
Bellatreche et al.
0
20000
40000
60000
80000
100000
120000
140000
160000
1 2 3 4
Nombre d'E/S par rapport au nombre de Table de dimensions 
Fragmentées
RNU
RU
Fig. 13 – Nombre d’E/S par rapport au nombre de tables de dimensions fragmente´es
de dimension augmente, la performance de requeˆtes e´galement. La Figure 14 montre
0
500
1000
1500
2000
2500
Nombre de frag
1 2 3 4
 Nombre de T D fragmentées
Nombre de frag par rapport aux nombre de T  D 
fragmentées seuil=2000
RNU
RU
Fig. 14 – Nombre de fragments vs. nombre de tables de dimensions fragmente´es
que le nombre de fragments augmente avec l’augmentation du nombre de tables de
dimensions a` fragmenter mais notre algorithme permet de controˆler cette augmentation
pour donner un nombre de fragments qui ne viole pas la contrainte du seuil.
Dans la Figure 15 on constate que le rapport entre le nombre de fragments re-
tourne´ par l’algorithme et le nombre de fragments possibles varie selon le nombre de
fragments utilise´s. Lorsqu’on utilise moins de six attributs, ce rapport est grand (plus
de 35%) car le nombre de fragments possible est petit. A partir de six attributs uti-
lise´s, l’algorithme retourne un rapport minime jusqu’a` arriver a` un rapport tre`s petit
(moins de 2%) lorsqu’on utilise neuf attributs. Cela est duˆ d’un coˆte´ a` l’augmentation
du nombre de fragments possibles (par l’augmentation du nombre d’attributs) et de
l’autre cote´, le nombre de fragments retourne´s se stabilise au voisinage du seuil. La
Figure 16 repre´sente l’e´volution du nombre d’E/S par rapport au seuil. On constate
RNTI - E -
- 155 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
0
10
20
30
40
50
60
70
80
2 3 4 5 6 7 8 9
nombre attributs
Pourcentage du nombre de fragments
Seuil 2000
NBFrag/NB Max
Fig. 15 – Nombre de fragments vs. nombre de fragments possibles
0
2000
4000
6000
8000
10000
12000
14000
500 1000 2000 3000 4000 5000 6000 7000 8000
NB E/S par rapport au seuil
RNU
RU
Fig. 16 – Evolution du nombre d’E/S par rapport au seuil
qu’un seuil de 4000 est le plus adapte´. Il repre´sente 2,6% du nombre total de fragments.
La Figure 17 montre que le nombre de fragments retourne´s par l’algorithme aug-
mente toujours avec l’augmentation du seuil mais reste toujours au voisinage de ce
dernier.
Dans les figures qui suivent 18, 19 et 20 on a change´ la se´lectivite´ des pre´dicats
pour voir l’effet de la se´lectivite´ sur le nombre total d’E/S et le nombre de fragments.
On constate que lorsqu’on augmente la se´lectivite´ des pre´dicats, le nombre total
d’E/S augmente. Cela est duˆ au fait qu’une forte se´lectivite´ implique un nombre d’en-
registrements satisfaisant le pre´dicat plus grand. Ce qui conduit a` un nombre d’E/S
plus important. On constate aussi que la se´lectivite´ n’a pas d’effet important sur le
nombre de fragments total.
RNTI - E -
- 156 -RNTI-B-1
Bellatreche et al.
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
500 1000 2000 3000 4000 5000 6000 7000 8000
Nombre de frag par rapport au seuil
RNU
RU
Fig. 17 – Evolution du nombre de fragments par rapport au seuil
0
20000
40000
60000
80000
100000
120000
E/S
1 2 3 4
Tables  dimensions fragmentées
E/S par rapport à la sélectivité
basse sélectivité
Haute sélectiv ité
Fig. 18 – Nombre d’E/S par rapport a` la se´lectivite´ et le nombre de tables fragmente´es
5 Conclusion
Dans ce papier nous avons formalise´ le proble`me de la fragmentation horizontale
dans les entrepoˆts de donne´es mode´lise´s par des sche´mas en e´toile. Nous avons d’abord
de´veloppe´ une me´thodologie de fragmentation pour la table des faits, en adaptant les
techniques utilise´es dans les bases de donne´es relationnelles. Par la suite, nous avons
pre´sente´ les proble`mes lie´s a` la fragmentation de la table des faits en fonction des tables
de dimensions et nous avons sugge´re´ l’utilisation des algorithmes ge´ne´tiques. Un pro-
cessus de codage des sche´mas de fragmentation possibles est de´crit. Un mode`le de couˆt
qui repre´sente la fonction se´lective a e´te´ de´veloppe´ afin de mesurer la qualite´ de la so-
lution choisie. Finalement des expe´riences ont e´te´ conduites et ont montre´ qu’avec une
fragmentation ade´quate des tables de dimensions, il est possible d’ame´liorer les perfor-
mances d’exe´cution des requeˆtes de´cisionnelles en respectant le seuil des fragments que
l’administrateur doit choisir.
RNTI - E -
- 157 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
0
500
1000
1500
2000
2500
Nombre fragments
1 2 3 4
Tables dimensions  fragmentées
Nombre  fragments par rapport à la sé lectivité
Basse selectivité
Haute sélectivité
Fig. 19 – Nombre de fragments par rapport a` la se´lectivite´ et le nombre de tables
fragmente´es
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
NB Fragments
500 1000 2000 3000 4000 5000 6000 7000 8000
Seuil
Nombre fragments par rapport au seuil et à la sélectivité
Basse sélectivité
Haute sélectivité
Fig. 20 – Evolution du nombre de fragments par rapport a` la se´lectivite´ et au seuil
Comme perspective il serait donc inte´ressant de de´velopper ou d’ame´nager notre
algorithme ge´ne´tique pour tenir compte de l’e´volution des requeˆtes tant dans leurs
structures que dans leurs fre´quences.
Re´fe´rences
[Ba¨ck, 1995] T. Ba¨ck. Evolutionnary algorithms in theory and practice. Oxford Uni-
versity Press, New York, 1995.
[Bellatreche et al., 2004] L. Bellatreche, M. Schneider, H. Lorinquer, et M. Mohania.
Bringing together partitioning, materialized views and indexes to optimize perfor-
mance of relational data warehouses. Proceeding of the International Conference on
RNTI - E -
- 158 -RNTI-B-1
Bellatreche et al.
Data Warehousing and Knowledge Discovery (DAWAK’2004), pages 15–25, Septem-
ber 2004.
[Bennett et al., 1991] K. P. Bennett, M. C. Ferris, et Y. E. Ioannidis. A genetic al-
gorithm for database query optimization. in Proceedings of the 4th International
Conference on Genetic Algorithms, pages 400–407, July 1991.
[Council, 1998] OLAP Council. Apb-1 olap benchmark, release ii.
http ://www.olapcouncil.org/research/bmarkly.htm, 1998.
[Frieder et Siegelmann, 1997] O. Frieder et H.T. Siegelmann. Multiprocessor document
allocation : A genetic algorithm approach. IEEE Transactions on Knowledge and
Data Engineering, 9(4) :640–642, July 1997.
[Gupta, 1999] H. Gupta. Selection and maintenance of views in a data warehouse.
Ph.d. thesis, Stanford University, September 1999.
[Kotidis et Roussopoulos, 1999] Y. Kotidis et N. Roussopoulos. Dynamat : A dynamic
view management system for data warehouses. Proceedings of the ACM SIGMOD
International Conference on Management of Data, pages 371–382, June 1999.
[Loukopoulos et Ahmad, 2004] T. Loukopoulos et I. Ahmad. Static and adaptive dis-
tributed data replication using genetic algorithms. in Journal of Parallel and Dis-
tributed Computing, 64(11) :1270–1285, November 2004.
[Noaman et Barker, 1999] A. Y. Noaman et K. Barker. A horizontal fragmentation
algorithm for the fact relation in a distributed data warehouse. in the 8th Interna-
tional Conference on Information and Knowledge Management (CIKM’99), pages
154–161, November 1999.
[O¨zsu et Valduriez, 1999] M. T. O¨zsu et P. Valduriez. Principles of Distributed Data-
base Systems : Second Edition. Prentice Hall, 1999.
[Sanjay et al., 2004] A. Sanjay, V. R. Narasayya, et B. Yang. Integrating vertical and
horizontal partitioning into automated physical database design. Proceedings of the
ACM SIGMOD International Conference on Management of Data, pages 359–370,
June 2004.
[Simonet et Simonet, 1994] A. Simonet et M. Simonet. Objects with views and
constraints : From databases to knowledge bases. in the Proceeding of the Internatio-
nal Conference on Object Oriented Information Systems, OOIS’94, pages 182–195,
December 1994.
[Zhang et Yang, 1999] C. Zhang et J. Yang. Genetic algorithm for materialized view se-
lection in data warehouse environments. Proceeding of the International Conference
on Data Warehousing and Knowledge Discovery (DAWAK’99 ), pages 116–125, Sep-
tember 1999.
[Zilio et al., 2004] D. C. Zilio, J. Rao, S. Lightstone, G. M Lohman, A. Storm,
C. Garcia-Arellano, et S. Fadden. Db2 design advisor : Integrated automatic phy-
sical database design. Proceedings of the International Conference on Very Large
Databases, pages 1087–1097, August 2004.
RNTI - E -
- 159 - RNTI-B-1
Algorithme Ge´ne´tique et la Fragmentation dans les entrepoˆts
Summary
The problem of selecting an optimal fragmentation schema of a data warehouse
for query optimization is more challenging compared to that in relational and object
databases. This challenge is due to the several choices of partitioning star or snowflake
schemas. Data partitioning is beneficial if and only if the fact table is fragmented ba-
sed on the partitioning schemas of dimension tables. This may increase the number of
fragments of the fact tables dramatically and makes their maintenance very costly. The-
refore, the right selection of fragmenting schemas is important for better performance of
OLAP queries. In this paper, we present a genetic algorithm for schema partitioning se-
lection problem. The proposed algorithm gives better solutions since the search space
is constrained by the schema partitioning. We conduct several experimental studies
using the APB-1 release II benchmark for validating the proposed algorithm.
RNTI - E -
- 160 -RNTI-B-1
