Une nouvelle me´thode graphique pour interroger
et ve´rifier des diagrammes de classes UML
Thomas Raimbault
LERIA, Universite´ d’Angers, 2 boulevard Lavoisier 49045 ANGERS Cedex 01
thomas.raimbault@info.univ-angers.fr
Re´sume´. UML est le langage graphique de re´fe´rence dans l’industrie
pour la mode´lisation objet. Cependant UML reste un langage, et ne four-
nit aucun moyen de ve´rification ou d’interrogation de ses sche´mas. Il existe
aujourd’hui des outils de ve´rification, mais ils se comportent comme des
boˆıtes noires ou` l’utilisateur ne peut acce´der. Nous proposons une me´thode
graphique de ve´rification et d’interrogation de diagrammes de classes
UML. L’aspect intuitif et dessinable de notre me´thode offre a` l’utilisa-
teur la possibilite´ d’interroger le contenu de diagrammes de classes, ainsi
que de de´finir et d’adapter ses propres crite`res de ve´rification. Le mode`le
calculatoire de notre approche est celui des graphes conceptuels.
1 Introduction
UML, Unified Modeling Language (Booch et al. 1998), est le langage graphique de
re´fe´rence dans l’industrie pour la mode´lisation objet. Cependant UML reste un langage,
et ne fournit aucun moyen de ve´rification ou d’interrogation de ses sche´mas. Il existe
des outils commerciaux de ve´rification, tels que Rational Software Rose (IBM 2004)
ou Borland Together (Borland 2004). Mais les ve´rifications propose´es sont uniquement
standards, ve´rifiant la cohe´rence des diagrammes par rapport aux spe´cifications objet.
De plus, la me´thode de ve´rification est dans une boˆıte noire : les traitements sont de
bas niveau et non accessibles a` l’utilisateur. Enfin, l’interrogation de diagrammes n’est
pas totalement libre mais limite´ a` un cadre pre´-formate´ de questions.
Pour re´pondre aux exigences de qualite´ et d’interaction en mode´lisation, nous propo-
sons une me´thode graphique d’interrogation et de ve´rification de diagrammes de classes
UML. L’aspect intuitif et dessinable de cette me´thode offre a` l’utilisateur la possibilite´
de de´finir et d’adapter ses propres crite`res de ve´rification, ainsi que d’interroger libre-
ment le contenu de diagrammes de classes UML. Le travail pre´sente´ dans cet article
est issu de (Raimbault 2004), et est traite´ pour l’atelier EGC 2005 “Mode´lisation des
connaissances” de fac¸on intuitive au travers un exemple. Concre`tement, notre me´thode
utilise pour les calculs le mode`le des graphes conceptuels (Sowa 1984).
Cet article est structure´ comme suit : la section 2 traite de notre me´thode gra-
phique d’interrogation et de ve´rification de diagrammes de classes UML. En section 3,
nous abordons l’aspect calculatoire de notre me´thode qui utilise la mode`le des graphes
conceptuels. La section 4 discute des re´sultats et des perspectives de notre me´thode.
2 Interroger et Ve´rifier un diagramme de classes
Nous indiquons d’une part comment formuler une requeˆte pour interroger le contenu
d’un diagramme de classes UML, d’autre part, comment de´finir les crite`res de validite´
- 7 - RNTI-E-5
Interroger et ve´rifier graphiquement des diagrammes de classes UML
de diagrammes de classes. Ces ve´rifications peuvent eˆtre des standards que l’on retrouve
en mode´lisation objets ou des ve´rifications dites de me´tier qui sont spe´cifiques aux
besoins de l’utilisateur. L’aspect dessinable et intuitif des requeˆtes ou des crite`res de
validite´ les rend accessibles et manipulables par l’utilisateur. De plus, contrairement a`
des outils commerciaux, les ve´rifications des diagrammes de classes ne se comportent
pas comme des boˆıtes noires.
2.1 Interrogation
Pour interroger un diagramme de classes, il suffit de formuler la requeˆte sous forme
d’un diagramme de classes. La re´ponse a` une requeˆte, si elle existe, est une sous par-
tie du diagramme de classes a` interroger dans laquelle le diagramme requeˆte se pro-
jette. Supposons que nous voulons interroger le diagramme de classes Figure 1 par la
requeˆte suivante : “la classe ‘4x4’ a-t-elle une classe me`re?”. Cette requeˆte est formule´e
par le diagramme requeˆte pre´sente´ a` gauche de la Figure 2 ou` la classe ‘4x4’ a pour
ge´ne´ralisation une classe ge´ne´rique, note´e *. Cette requeˆte admet une re´ponse, via une
projection du diagramme requeˆte sur le diagramme Figure 1, qui est : “Oui, la classe
‘4x4’ posse`de bien une classe me`re ; de plus, cette classe me`re est la classe ‘Voiture”’.
Fig. 1 – Exemple de diagramme de classes UML.
Fig. 2 – Exemple de diagramme requeˆte et sa re´ponse.
Des requeˆtes plus riches peuvent eˆtre mode´lise´es. Par exemple, “obtenir les attri-
buts statiques des sous-classes d’une classe donne´e” ou bien “quelles sont les classes
publiques associe´es avec une multiplicite´ de 1 a` une classe donne´e”.
2.2 Ve´rification
Nous disposons de deux types de crite`res de validite´ de diagrammes de classes UML.
Un crite`re positif est de la forme “si condition, il faut que obligation”, et un crite`re
ne´gatif de la forme “si condition, il ne faut pas interdiction”.
Un crite`re de validite´, positif ou ne´gatif, est mode´lise´ sous la forme d’un diagramme
de classes bicolore ou` la condition est sur fond blanc et l’obligation ou l’interdiction sur
- 8 -RNTI-E-5
Thomas Raimbault
fond noir. Un crite`re de validite´ positif est repe´re´ par le symbole + , et un ne´gatif
par − . La Figure 3 pre´sente trois crite`res de validite´ positifs, C1, C2 et C3, et
deux crite`res de validite´ ne´gatifs, C4 et C5. Le crite`re C1 a pour condition une classe,
note´e * car non spe´cifie´e, qui posse`de une ope´ration abstraite non spe´cifie´e elle aussi.
L’obligation de ce crite`re est que la classe doit eˆtre abstraite. En d’autres termes, C1
exprime le fait que “Si une classe posse`de une ope´ration abstraite, alors cette classe
doit eˆtre de´clare´e abstraite”. C2 stipule que “Si une classe A posse`de des ope´rations
abstraites, alors une sous-classe B de A ne peut eˆtre non abstraite qu’a` la condition
que les ope´rations abstraites de A soient rede´finies comme non abstraites dans B”. C3
indique que “toute classe doit eˆtre associe´e a` une autre classe”. C4 interdit tout cycle
d’he´ritage. La condition de C5 est une classe posse´dant une ope´ration finale note´e $x,
et l’interdiction est que cette meˆme ope´ration $x soit pre´sente dans une sous-classe de
cette classe. Donc, “une ope´ration finale, d’une classe A, ne peut eˆtre rede´finie dans
une classe B qui est sous-classe de A”.
Remarquons d’une part que pour les crite`res de validite´ pre´sente´s Figure 3, le lien
de ge´ne´ralisation est conside´re´ comme transitif. D’autre part, ces meˆmes crite`res de
validite´, a` l’exception de C3, sont des crite`res standard de validite´ en mode´lisation
objet. C3 est un exemple de crite`re de validite´ qui peut eˆtre spe´cifique aux besoins
d’un utilisateur, nous le nommons crite`re me´tier.
Fig. 3 – Exemple de crite`res de validite´ positifs et ne´gatifs.
3 Graphes conceptuels, Re`gles et Contraintes
Les graphes conceptuels (GCs) constituent un mode`le formel de repre´sentation des
connaissances, de la famille des re´seaux se´mantiques (Lehmann 1992). (Sowa 1984)
introduit un mode`le simple des GCs muni d’une se´mantique logique du premier ordre.
Les GCs permettent une interpre´tation du dessin le repre´sentant en termes de relations
entre des concepts.
Dans la pratique, une connaissance donne´e est mode´lise´e par un GC. Il s’agit d’un
graphe biparti e´tiquete´, ou` les e´tiquettes d’une cate´gorie de sommets correspondent a`
des noms de concepts et celles de l’autre cate´gorie a` des noms de relations. Ce GC est
de´fini sur un support qui spe´cifie le vocabulaire de base pour repre´senter les connais-
sances sur le domaine mode´lise´. Chaque e´le´ment du mode`le des GCs est interpre´table
en logique du premier ordre par un ope´rateur qui traduit un GC en une formule logique.
Notre me´thode graphique d’interrogation et de ve´rification de diagrammes de classes
UML est de´veloppe´e en utilisant le mode`le des GCs (Mugnier et Chein 1996) emboˆıte´s
type´s (Chein et Mugnier 1997), avec liens de core´fe´rence (Chein et Mugnier 2004), re`gles
- 9 - RNTI-E-5
Interroger et ve´rifier graphiquement des diagrammes de classes UML
(Salvat 1998) et contraintes (Baget et Mugnier 2002). L’ide´e cle´ de cette imple´mentation
est de mode´liser un diagramme de classes UML dans le formalisme des GCs, ou` d’un
cote´ le support de´finit les notations UML et d’un autre coˆte´ l’agencement des sommets
entre eux d’un GC ainsi que les marqueurs individuels des sommets concepts de´finissent
un diagramme de classes donne´. Ensuite, nous utilisons les possibilite´s de raisonnement
logique qu’offre le mode`le des GCs avec l’utilisation d’ope´rateurs graphiques. L’appli-
cation de re`gles permet de faire ressortir de fac¸on explicite des informations implicites,
comme par exemple la transitivite´ du lien de ge´ne´ralisation entre classes. Les crite`res de
validite´ positifs et ne´gatifs sont respectivement mode´lise´s par des contraintes positives
et ne´gatives. La ve´rification de ces contraintes de´termine si un diagramme de classes
est valide ou non selon les crite`res choisis par l’utilisateur.
La Figure 4 repre´sente la mode´lisation, en un GC, des classes ‘Conducteur’ et ‘Voi-
ture’ de la Figure 1 et leur association. La classe ‘Voiture’ par exemple est mode´lise´e
par un sommet concept de type class (type de´fini dans le support) qui a pour marqueur
individuel Voiture. Cette classe posse`de des attributs et des ope´rations qui eux aussi
sont mode´lise´s par des sommets concepts. Ces derniers de´crivent la classe ‘Voiture’ et
sont donc emboˆıte´s au sein du sommet concept qui la repre´sente. Tout comme la classe
‘Voiture’, ses attributs et ope´rations posse`dent leurs propres descriptions qui sont res-
pectivement emboˆıte´s dans les sommets concepts les repre´sentant. Ces emboˆıtements
ne sont pas visibles sur la Figure 4 mais sous-entendus avec les caracte`res ‘. . . ’. L’as-
sociation entre les classes ‘Conducteur’ et ‘Voiture’ est centralise´e autour de la classe
d’association ‘Location’ par l’interme´diaire de sommets relations de type association.
Remarquons que les emboˆıtements d’un sommet concept constituent des niveaux de
lecture plus internes de l’information le repre´sentant. L’utilisateur peut ainsi plus ou
moins zoomer sur la description d’une partie du diagramme de classes.
Fig. 4 – Mode´lisation en un GC des classes ‘Conducteur’, ‘Voiture’ et leur association.
4 Re´sultats et perspectives
Un prototype a e´te´ de´veloppe´ pour d’une part re´e´crire un diagramme de classes
UML au format XMI (OMG 2002) dans le formalisme des GCs emboˆıte´s type´s au format
BCGCT (Haemmerle´ O. 1995). D’autre part, re`gles et contraintes ont e´te´ e´crites au
format BCGCT pour ve´rifier des diagrammes de classes et satisfaire au concept objet.
La ve´rification tout comme l’interrogation d’un diagramme de classes, sous forme d’un
GC, a e´te´ teste´ sur la plateforme CoGITaNT (Genest 2004). Les re´sultats obtenus
sur des exemples simples de diagrammes de classes sont tout a` fait satisfaisants. Ils
- 10 -RNTI-E-5
Thomas Raimbault
fournissent les exigences souhaite´es et ce de fac¸on quasi instantane´e.
Nous souhaitons e´tendre notre me´thode graphique de mode´lisation, d’interrogation
et de ve´rification aux diffe´rents diagrammes UML. Cette extension offrira ainsi un
formalisme unique et visuel pour mode´liser tous les diagrammes UML ainsi que des
requeˆtes ou des ve´rifications a` effectuer sur et entre ces derniers. Actuellement, une
interface est en cours de de´veloppement pour permettre a` l’utilisateur de formuler ses
requeˆtes et ve´rifications dans un formalisme UML (cf. Figure 3). Ainsi, le mode`le des
GCs peut eˆtre transparent pour l’utilisateur qui le de´sire.
Re´fe´rences
Baget J.F. et MugnierM.-L (2002), Extensions of Simple Conceptual Graph : the com-
plexity of Rules and Contraints. JAIR, vol. 16, pp. 425-465, 2002.
Booch G., Jacobson C. et Rumbaugh J. (1998), The Unified Modeling Language - a
reference manual. Addison Wesley.
Borland (2004), Together, http://www.borland.com/together/.
Chein M. et Mugnier M.-L. (1997), Positive Nested Conceptuals Graphs. In Proc. of
ICCS’97, vol. 1257 of LNAI, pages 95-109, Springer Verlag.
Chein M. et Mugnier M.-L. (2004), Concept types and coreference in simple conceptual
graphs. In Proc. of ICCS’2004, vol. 3127 of LNAI, pages 303-318, Springer Verlag.
Genest D. (2004), CoGITaNT 5.1.5, LIRMM-LERIA, http://cogitant.sourceforge.net
Haemmerle´ O. (1995), Plate-forme CoGITo, Rapport technique 95012, LIRMM.
IBM (2004), Rational Software Rose, http://www-306.ibm.com/software/rational/
Lehmann F. (1992), Semantic Networks in Artificial Intelligence, Pergamon Press.
Mugnier M.-L. et Chein M. (1996), Repre´senter des connaissances et raisonner avec
des graphes, vol.10 dans RIA, n◦1, 7-56.
OMG (2002), Object Management Group Documentation, XMLMetadata Interchange
(XMI), http://www.omg.org/technology/documents/formal/xmi.htm
Raimbault T. (2004), Une nouvelle me´thode graphique pour ve´rifier et interroger des
diagrammes de classes UML, Me´moire de DEA, LERIA.
Salvat E. (1998), Theorem Proving Using Graph Operations in the Conceptual Graph
Formalism. In Proc. of ECAI’98.
Sowa J.F. (1984), Conceptual Structures - Information Processing in Mind and Ma-
chine, Addison-Wesley.
Summary
UML is an industrial reference graphic modeling language to express object systems.
However UML is just a language, it does not provide any means to check or interrogate
diagrams. There are commercial tools today, but they behave as black boxes where the
user cannot accede into. We propose a graphic method to check and interrogate UML
class diagrams. The intuitive and drawing aspect of our method make it possible to the
user to interrogate contents of UML class diagrams, and to define and adapt its own
criteria of checks. The calculative model of our approach is that of conceptual graphs.
- 11 - RNTI-E-5
- 12 -RNTI-E-5
