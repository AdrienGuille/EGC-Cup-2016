EUROPEAN WORKSHOP ON DATA STREAM ANALYSIS • March, 14-16, 2007 • Caserta, Italy
1© Revue MODULAD, 2007 Numéro 36
EUROPEAN WORKSHOP ON DATA STREAM ANALYSIS • March, 14-16, 2007 • Caserta, Italy
2© Revue MODULAD, 2007 Numéro 36
EUROPEAN WORKSHOP ON DATA STREAM ANALYSIS • March, 14-16, 2007 • Caserta, Italy
3© Revue MODULAD, 2007 Numéro 36
EUROPEAN WORKSHOP ON DATA STREAM ANALYSIS • March, 14-16, 2007 • Caserta, Italy
4© Revue MODULAD, 2007 Numéro 36
EUROPEAN WORKSHOP ON DATA STREAM ANALYSIS • March, 14-16, 2007 • Caserta, Italy
5© Revue MODULAD, 2007 Numéro 36
1Fundamentals of 
Analyzing and Mining 
Data Streams 
Graham Cormode
graham@research.att.com
Fundamentals of Analyzing and Mining Data Streams2
Outline
1. Streaming summaries, sketches and samples
– Motivating examples, applications and models
– Random sampling: reservoir and minwise
 Application: Estimating entropy
– Sketches: Count-Min, AMS, FM
2. Stream Data Mining Algorithms
– Association Rule Mining
– Change Detection
– Clustering
2Fundamentals of Analyzing and Mining Data Streams3
 Data is growing faster than our ability to store or 
index it
 There are 3 Billion Telephone Calls in US each day, 
30 Billion emails daily, 1 Billion SMS, IMs. 
 Scientific data: NASA's observation satellites 
generate billions of readings each per day.
 IP Network Traffic: up to 1 Billion packets per hour 
per router.  Each ISP has many (hundreds) routers!
 Whole genome sequences for many species now 
available: each megabytes to gigabytes in size
Data is Massive
Fundamentals of Analyzing and Mining Data Streams4
Massive Data Analysis
Must analyze this massive data:
 Scientific research (monitor environment, species)
 System management (spot faults, drops, failures)
 Customer research (association rules, new offers) 
 For revenue protection (phone fraud, service abuse)
Else, why even measure this data?
3Fundamentals of Analyzing and Mining Data Streams5
Example: Network Data
 Networks are sources of massive data: the metadata per 
hour per router is gigabytes
 Fundamental problem of data stream analysis: 
Too much information to store or transmit
 So process data as it arrives: one pass, small space: the 
data stream approach.
 Approximate answers to many questions are OK, if there 
are guarantees of result quality
Fundamentals of Analyzing and Mining Data Streams6
Streaming Data Questions
 Network managers ask questions requiring us to 
analyze and mine the data: 
– Find hosts with similar usage patterns (clusters)?
– Which destinations or groups use most bandwidth?
– Was there a change in traffic distribution overnight? 
 Extra complexity comes from limited space and time
 Will introduce solutions for these and other problems
4Fundamentals of Analyzing and Mining Data Streams7
Other Streaming Applications
 Sensor networks
– Monitor habitat and environmental parameters
– Track many objects, intrusions, trend analysis…
 Utility Companies
– Monitor power grid, customer usage patterns etc.
– Alerts and rapid response in case of problems
Fundamentals of Analyzing and Mining Data Streams8
Data Stream Models
 We model data streams as sequences of simple tuples
 Complexity arises from massive length of streams
 Arrivals only streams:
– Example: (x, 3), (y, 2), (x, 2) encodes
the arrival of 3 copies of item x, 
2 copies of y, then 2 copies of x.
– Could represent eg. packets on a network; power usage
 Arrivals and departures:
– Example: (x, 3), (y,2), (x, -2) encodes
final state of (x, 1), (y, 2).
– Can represent fluctuating quantities, or measure 
differences between two distributions
x
y
x
y
5Fundamentals of Analyzing and Mining Data Streams9
Approximation and Randomization
 Many things are hard to compute exactly over a stream
– Is the count of all items the same in two different streams?
– Requires linear space to compute exactly
 Approximation: find an answer correct within some factor
– Find an answer that is within 10% of correct result
– More generally, a (1± ε) factor approximation
 Randomization: allow a small probability of failure
– Answer is correct, except with probability 1 in 10,000
– More generally, success probability (1-δ)
 Approximation and Randomization: (ε, δ)-approximations
Fundamentals of Analyzing and Mining Data Streams10
Structure
1. Stream summaries, sketches and samples
– Answer simple distribution agnostic questions about stream
– Describe properties of the distribution
– E.g. general shape, item frequencies, frequency moments
2. Data Mining Algorithms
– Extend existing mining problems to the stream domain
– Go beyond simple properties to deeper structure
– Build on sketch, sampling ideas
 Only a representative sample of each topic, many other 
problems, algorithms and techniques not covered
6Fundamentals of Analyzing and Mining Data Streams11
Outline
1. Streaming summaries, sketches and samples
– Motivating examples, applications and models
– Random sampling: reservoir and minwise
 Application: Estimating entropy
– Sketches: Count-Min, AMS, FM
2. Stream Data Mining Algorithms
– Association Rule Mining
– Change Detection
– Clustering
Fundamentals of Analyzing and Mining Data Streams12
Sampling From a Data Stream
 Fundamental prob: sample m items uniformly from stream
– Useful: approximate costly computation on small sample
 Challenge: don’t know how long stream is  
– So when/how often to sample?
 Two solutions, apply to different situations:
– Reservoir sampling (dates from 1980s?)
– Min-wise sampling (dates from 1990s?)
7Fundamentals of Analyzing and Mining Data Streams13
Reservoir Sampling
 Sample first m items
 Choose to sample the i’th item (i>m) with probability m/i
 If sampled, randomly replace a previously sampled item
 Optimization: when i gets large, compute which item will 
be sampled next, skip over intervening items. [Vitter 85]
Fundamentals of Analyzing and Mining Data Streams14
Reservoir Sampling - Analysis
 Analyze simple case: sample size m = 1
 Probability i’th item is the sample from stream length n:
– Prob. i is sampled on arrival × prob. i survives to end
1 i  i+1 n-2 n-1
i i+1 i+2 n-1 n
× × … ×
= 1/n
 Case for m > 1 is similar, easy to show uniform probability
 Drawbacks of reservoir sampling: hard to parallelize
8Fundamentals of Analyzing and Mining Data Streams15
Min-wise Sampling
 For each item, pick a random fraction between 0 and 1
 Store item(s) with the smallest random tag [Nath et al.’04]
0.391 0.908 0.291 0.555 0.619 0.273
 Each item has same chance of least tag, so uniform
 Can run on multiple streams separately, then merge
Fundamentals of Analyzing and Mining Data Streams16
Application of Sampling: Entropy
 Given a long sequence of characters
S = <a1, a2, a3… am> each aj ∈ {1… n}
 Let fi = frequency of i in the sequence
 Compute the empirical entropy:
H(S) = - ∑i fi/m log fi/m = - ∑i pi log pi
 Example: S = < a, b, a, b, c, a, d, a>
– pa = 1/2, pb = 1/4, pc = 1/8, pd = 1/8
– H(S) = ½ + ¼ × 2 + 1/8 × 3 + 1/8 × 3 = 7/4
 Entropy promoted for anomaly detection in networks
9Fundamentals of Analyzing and Mining Data Streams17
Sampling Based Algorithm
 Simple estimator: 
– Randomly sample a position j in the stream 
– Count how many times aj appears subsequently = r
– Output X = -(r log r/m – (r-1) log(r-1)/m)
 Claim: Estimator is unbiased – E[X] = H(S)
– Proof: prob of picking j = 1/m, sum telescopes correctly
 Variance is not too large – Var[X] = O(log2 m)
– Can be proven by bounding |X| ≤ log m
Fundamentals of Analyzing and Mining Data Streams18
Analysis of Basic Estimator
 A general technique in data streams:
– Repeat in parallel an unbiased estimator with bounded 
variance, take average of estimates to improve result
– Apply Chebyshev bounds to guarantee accuracy
– Number of repetitions depends on ratio Var[X]/E2[X] 
– For entropy, this means space O(log2m/H2(S))
 Problem for entropy: when H(S) is very small?
– Space needed for an accurate approx goes as 1/H2!
10
Fundamentals of Analyzing and Mining Data Streams19
Outline of Improved Algorithm
 Observation: only way to get H(S) =o(1) is to have only 
one character with pi close to 1
– aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaa
 If we can identify this character, and make an estimator 
on stream without this token, can estimate H(S)
 How to identify and remove all in one pass?
 Can do some clever tricks with ‘backup samples’ by 
adapting the min-wise sampling technique
 Full details and analysis in [Chakrabarti, C, McGregor 07]  
– Total space is O(ε-2 log m log 1/δ) for (ε,δ) approx
Fundamentals of Analyzing and Mining Data Streams20
Outline
1. Streaming summaries, sketches and samples
– Motivating examples, applications and models
– Random sampling: reservoir and minwise
 Application: Estimating entropy
– Sketches: Count-Min, AMS, FM
2. Stream Data Mining Algorithms
– Association Rule Mining
– Change Detection
– Clustering
11
Fundamentals of Analyzing and Mining Data Streams21
Sketches
 Not every problem can be solved with sampling
– Example: counting how many distinct items in the stream
– If a large fraction of items aren’t sampled, don’t know if 
they are all same or all different
 Other techniques take advantage that the algorithm can 
“see” all the data even if it can’t “remember” it all 
 (To me) a sketch is a linear transform of the input
– Model stream as defining a vector, sketch is result of 
multiplying stream vector by an (implicit) matrix
linear projection
Fundamentals of Analyzing and Mining Data Streams22
Trivial Example of a Sketch
 Test if two (asynchronous) binary streams are equal 
d= (x,y) = 0 iff x=y, 1 otherwise
 To test in small space: pick a random hash function h
 Test h(x)=h(y) : small chance of false positive, no chance 
of false negative. 
 Compute h(x), h(y) incrementally as new bits arrive 
(Karp-Rabin: h(x) = xi2i mod p) 
– Exercise: extend to real valued vectors in update model
1 0 1 1 1 0 1 0 1 …
1 0 1 1 0 0 1 0 1 …
12
Fundamentals of Analyzing and Mining Data Streams23
Count-Min Sketch
 Simple sketch idea, can be used for as the basis of many 
different stream mining tasks.
 Model input stream as a vector x of dimension U
 Creates a small summary as an array of w × d in size
 Use d hash function to map vector entries to [1..w]
 Works on arrivals only and arrivals & departures streams
W
d
Array: 
CM[i,j]
Fundamentals of Analyzing and Mining Data Streams24
CM Sketch Structure
 Each entry in vector x is mapped to one bucket per row.
 Merge two sketches by entry-wise summation
 Estimate x[j] by taking mink CM[k,hk(j)]
– Guarantees error less than ε||x||1 in size O(1/ε log 1/δ)
– Probability of more error is less than 1-δ
+c
+c
+c
+c
h1(j)
hd(j)
j,+c
d=log 1/δ
w = 2/ε
[C, Muthukrishnan ’04]
13
Fundamentals of Analyzing and Mining Data Streams25
Approximation
Approximate x’[j] = mink CM[k,hk(j)]
 Analysis: In k'th row, CM[k,hk(j)] = x[j] + Xk,j
– Xk,j = Σ x[i] | hk(i) = hk(j)
– E(Xk,j) = Σ x[k]*Pr[hk(i)=hk(j)] ≤ Pr[hk(i)=hk(k)] * Σ a[i]
= ε ||x||1/2 by pairwise independence of h
– Pr[Xk,j ≥ ε||x||1] = Pr[Xk,j ≥ 2E(Xk,j)] ≤ 1/2 by Markov inequality 
 So, Pr[x’[j]≥ x[j] + ε ||x||1] = Pr[∀ k. Xk,j>ε ||x||1] ≤1/2log 1/δ = δ
 Final result: with certainty x[j] ≤ x’[j] and 
with probability at least 1-δ,  x’[j]< x[j] + ε ||x||1
Fundamentals of Analyzing and Mining Data Streams26
L2 distance
 AMS sketch (for Alon-Matias-Szegedy) proposed in 1996
– Allows estimation of L2 (Euclidean) distance between 
streaming vectors, || x - y ||2
– Used at the heart of many streaming and non-streaming 
mining applications: achieves dimensionality reduction
 Here, describe AMS sketch by generalizing CM sketch. 
 Uses extra hash functions g1...glog 1/δ {1...U}Æ {+1,-1}
 Now, given update (j,+c), set CM[k,hk(i)] += c*gk(j)
linear 
projection
AMS sketch
14
Fundamentals of Analyzing and Mining Data Streams27
L2 analysis
 Estimate ||x||22 = mediank ∑i CM[k,i]2
 Each row’s result is ∑k g(i)2xi2 + ∑h(i)=h(j) 2 g(i) g(j) xi xj
 But g(i)2 = -12 = +12 = 1, and ∑i xi2 = ||x||22
 g(i)g(j) has 1/2 chance of  +1 or –1 : expectation is 0 …
+c*g1(j)
+c*g2(j)
+c*g3(j)
+c*g4(j)
h1(j)
hd(j)
j,+c
d=log 1/δ
w = 4/ε2
Fundamentals of Analyzing and Mining Data Streams28
L2 accuracy
 Formally, one can show an (ε, δ) approximation 
– Expectation of each estimate is exactly ||x||22 and 
variance is bounded by ε2 times expectation squared. 
– Using Chebyshev’s inequality, show that probability that 
each estimate is within ± ε ||x||22 is constant
– Take median of log (1/δ) estimates reduces probability 
of failure to δ (using Chernoff bounds)
 Result: given sketches of size O(1/ε2 log 1/δ) can 
estimate ||x||22 so that result is in (1±ε)||x||22 with 
probability at least 1-δ 
– Note: same analysis used many time in data streams
 In Practice: Can be very fast, very accurate!  
– Used in Sprint ‘CMON’ tool
15
Fundamentals of Analyzing and Mining Data Streams29
0
FM Sketch
 Estimates number of distinct inputs (count distinct)
 Uses hash function mapping input items to i with prob 2-i
– i.e. Pr[h(x) = 1] = ½, Pr[h(x) = 2] = ¼, Pr[h(x)=3] = 1/8 …
– Easy to construct h() from a uniform hash function by 
counting trailing zeros  
 Maintain FM Sketch =  bitmap array of L = log U bits 
– Initialize bitmap to all 0s
– For each incoming value x, set FM[h(x)] = 1
x = 5 h(x) = 3 0 0 0 001
FM BITMAP
6      5     4     3     2      1
Fundamentals of Analyzing and Mining Data Streams30
FM Analysis
 If d distinct values, expect d/2 map to FM[1], d/4 to FM[2]…
– Let R = position of rightmost zero in FM, indicator of log(d)
– Basic estimate d = c2R for scaling constant c ≈ 1.3
– Average many copies (different hash fns) improves accuracy
 With O(1/ε2 log 1/δ) copies, get (ε,δ) approximation
– 10 copies gets ≈ 30% error, 100 copies < 10% error
fringe of 0/1s 
around  log(d)
0 0 0 00 1
FM BITMAP
0 00 111 1 11111
position ≈ log(d)position ≈ log(d)
1L R
16
Fundamentals of Analyzing and Mining Data Streams31
Sketching and Sampling Summary
 Sampling and sketching ideas are at the heart of many 
stream mining algorithms
– Entropy computation, association rule mining, clustering 
(still to come)
 A sample is a quite general representative of the data 
set; sketches tend to be specific to a particular purpose
– FM sketch for count distinct, AMS sketch for L2 estimation
Fundamentals of Analyzing and Mining Data Streams32
Practicality
 Algorithms discussed here are quite simple and very fast
– Sketches can easily process millions of updates per 
second on standard hardware
– Limiting factor in practice is often I/O related
 Implemented in several practical systems:
– AT&T’s Gigascope system on live network streams
– Sprint’s CMON system on live streams
– Google’s log analysis
 Sample implementations available on the web
– http://www.cs.rutgers.edu/~muthu/massdal-code-index.html
– or web search for ‘massdal’
17
Fundamentals of Analyzing and Mining Data Streams33
Other Streaming Algorithms
Many fundamentals have been studied, not covered here:
 Different streaming data types
– Permutations, Graph Data, Geometric Data (Location 
Streams)
 Different streaming processing models
– Sliding Windows, Exponential and other decay, Duplicate 
sensitivity, Random order streams, Skewed streams
 Different streaming scenarios
– Distributed computations, sensor network computations
Fundamentals of Analyzing and Mining Data Streams34
Outline
1. Streaming summaries, sketches and samples
– Motivating examples, applications and models
– Random sampling: reservoir and minwise
 Application: Estimating entropy
– Sketches: Count-Min, AMS, FM
2. Stream Data Mining Algorithms
– Association Rule Mining
– Change Detection
– Clustering
18
Fundamentals of Analyzing and Mining Data Streams35
Data Mining on Streams
 Pattern finding: finding common patterns or features
– Association rule mining, Clustering, Histograms, 
Wavelet & Fourier Representations
 Data Quality Issues
– Change Detection, Data Cleaning, Anomaly detection, 
Continuous Distributed Monitoring
 Learning and Predicting
– Building Decision Trees, Regression, Supervised Learning
 Putting it all together: Systems Issues
– Adaptive Load Shedding, Query Languages, Planning and 
Execution
Fundamentals of Analyzing and Mining Data Streams36
Association Rule Mining
 Classic example: supermarket wants to discover 
correlations in buying patterns [Agrawal, Imielinski, Swami 93]
– (bogus) result: diapers Æ beer
 Input: transactions t1 = {eggs, milk, bread}, t2 = {milk} ...tn
 Output: rules of form {eggs, milk} Æ bread
– Support: proportion of input containing {eggs, milk, bread}
– Confidence: proportion containing {eggs, milk, bread}
proportion containing {eggs, milk}
 Goal: find rules with support, confidence above threshold
19
Fundamentals of Analyzing and Mining Data Streams37
Frequent Itemsets
 Association Rule Mining (ARM) algorithms first find all 
frequent itemsets: subsets of items with support > φ
– m-itemset: itemset with size m, i.e. |X| = m
 Use these frequent itemsets to generate the rules
 Start by finding all frequent 1-itemsets
– Even this is a challenge in massive data streams
Fundamentals of Analyzing and Mining Data Streams38
Heavy Hitters Problem
 The ‘heavy hitters’ are the frequent 1-itemsets
 Many, many streaming algorithms proposed:
– Random sampling
– Lossy Counting [Manku, Motwani 02]
– Frequent [Misra, Gries 82, Karp et al 02, Demaine et al 02]
– Count-Min, Count Sketches [Charikar, Chen, Farach-Colton 02]
– And many more...
 1-itemsets used to find, e.g heavy users in a network
– The basis of general frequent itemset algorithms
– A non-uniform kind of sampling
20
Fundamentals of Analyzing and Mining Data Streams39
Space Saving Algorithm
 “SpaceSaving” algorithm [Metwally, Agrawal, El Abaddi 05]
merges ‘Lossy Counting’ and ‘Frequent’ algorithms
– Gets best space bound, very fast in practice
 Finds all items with count ≥ φn, none with count < (φ−ε)n
– Error 0 <  ε < 1, e.g. ε = 1/1000
– Equivalently, estimate each frequency with error ±εn 
 Simple data structure:
– Keep k = 1/ε item names and counts, initially zero
– Fill counters by counting first k distinct items exactly
Fundamentals of Analyzing and Mining Data Streams40
SpaceSaving Algorithm
 On seeing new item:
– If it has a counter, increment counter
– If not, replace item with least count, increment count
7
5
123
21
Fundamentals of Analyzing and Mining Data Streams41
SpaceSaving Analysis
 Smallest counter value, min, is at most εn
– Counters sum to n by induction
– 1/ε counters, so average is εn: smallest cannot be bigger
 True count of an uncounted item is between 0 and min
– Proof by induction, true initially, min increases monotonically
– Hence, the count of any item stored is off by at most εn
 Any item x whose true count > εn is stored 
– By contradiction: x was evicted in past, with count ≤ mint
– Every count is an overestimate, using above observation
– So est. count of x > εn ≥ min ≥ mint, and would not be evicted
So: Find all items with count > εn, error in counts ≤ εn
Fundamentals of Analyzing and Mining Data Streams42
Extending to Frequent Itemsets
 Use similar “approximate counting” ideas for finding 
frequent itemsets [Manku, Motwani 02]
– From each new transaction, generate all subsets
– Track potentially frequent itemsets, prune away infrequent
– Similar guarantees: error in count at most εn
 Efficiency concerns: 
– Buffer as many transactions as possible, generate subsets 
together so can prune early
– Need compact representation of itemsets
22
Fundamentals of Analyzing and Mining Data Streams43
Trie Representation of subsets
Compact representation of itemsets in lexicographic order.
50
40
30
31 29 32
45
42
50              40             30             31            29
45              32           42
Sets with frequency counts 
Adapted from slides by Gurmeet Manku
Use ‘a priori’ rule: if a subset is infrequent, so are all 
of its supersets – so whole subtrees can be pruned
Fundamentals of Analyzing and Mining Data Streams44
ARM Summary
 [Manku, Motwani 02] gives details on when and how to prune
 Final Result: can monitor and extract association rules 
from frequent item sets with high accuracy
 Many extensions and variations to study:
– Space required depends a lot on input, can be many 
potential frequent itemsets
– How to mine when itemsets are observed over many sites 
(e.g. different routers; stores) and guarantee discovery?
– Variant definitions: frequent subsequences, sequential 
patterns, maximal itemsets etc.
– Sessions later in workshop…
23
Fundamentals of Analyzing and Mining Data Streams45
Outline
1. Streaming summaries, sketches and samples
– Motivating examples, applications and models
– Random sampling: reservoir and minwise
 Application: Estimating entropy
– Sketches: Count-Min, AMS, FM
2. Stream Data Mining Algorithms
– Association Rule Mining
– Change Detection
– Clustering
Fundamentals of Analyzing and Mining Data Streams46
Change Detection
Basic question: monitor a stream of events (network, power 
grid, sensors etc.), detect “changes” for:
– Anomaly detection – trigger alerts/alarms
– Data cleaning – detect errors in data feeds
– Data mining – indicate when to learn a new model
 What is “change”?
– Change in behaviour of some subset of items
– Change in patterns and rules detected
– Change in underlying distribution of frequencies
24
Fundamentals of Analyzing and Mining Data Streams47
Approaches to Change Detection
General idea: compare a reference distribution to a current 
window of events
 Item changes: individual items with big frequency change
– Techniques based on sketches
 Fix a distribution (eg. mixture of gaussians), fit parameters 
– Not always clear which distribution to fix a priori
 Non-parametric change detection
– Few parameters to set, but must specify when to call a 
change significant
Fundamentals of Analyzing and Mining Data Streams48
Non-parametric Change Detection
Technique due to [Dasu et al 06]
 Measure change using Kullback-Leibler divergence (KL)
– Standard measure in statistics
– Many desirable properties, generalizes t-test and χ2
 KL divergence = D(p||q) = Σx p(x) log2 p(x)/q(x)
– for probability distributions p, q
– If p, q are distributions over high dimensional spaces, no 
intersection between samples – need to capture density 
25
Fundamentals of Analyzing and Mining Data Streams49
Space Division Approach
 Use a hierarchical space division (kd-tree) to define r
regions ri of (approximately equal) weight for the 
reference data
 Compute discrete probability 
p over the regions
 Apply same space division 
over a window of recent 
stream items to create q
 Compute KL divergence D(p||q)
r1
r2
r3
r4
r5
r6
Fundamentals of Analyzing and Mining Data Streams50
Bootstrapping
How to tell if the KL divergence is significant?
 Statistical bootstrapping approach: use the input data to 
compute a distribution of distances
 Pool reference and first sliding window data, randomly 
split into two pieces, measure KL divergence
 Repeat k times, find e.g. 0.99 quantile of divergences
 If KL distance between reference and window > 0.99 
quantile of distances for several steps, declare “change”
26
Fundamentals of Analyzing and Mining Data Streams51
Streaming Computation
For each update:
 Slide window, update region counts
 Update KL divergence between 
reference p and window q, size w
 Test for significance
Reference Sliding Window
Fundamentals of Analyzing and Mining Data Streams52
Efficient Implementation
 Don’t have to recompute KL divergence from scratch
– Can write normalized KL divergence in terms of 
Σi (p(ri) + 1/(2w)) log
– Only two terms change per update
 Total time cost per update: 
– Update two regional counts in kd-tree, O(log w)
– Update KL divergence, in time O(1)
– Compare to stored divergence cut off for significance test
– Overall, O(log w)
 Space cost: store tree and counts, O(w)
p(ri) + 1/(2w)
q(ri) + 1/(2w)
27
Fundamentals of Analyzing and Mining Data Streams53
Change Detection Summary
 Proposed technique is pretty efficient in practice
– Competitive in accuracy with custom, application-aware 
change detection
– Pretty fast – tens of microseconds per update
– Produces simple description of change based on regions
 Extensions and open problems:
– Other approaches – histogram or kernel based?
– Better bootstrapping: quantile approach is only first order 
accurate…
Fundamentals of Analyzing and Mining Data Streams54
Outline
1. Streaming summaries, sketches and samples
– Motivating examples, applications and models
– Random sampling: reservoir and minwise
 Application: Estimating entropy
– Sketches: Count-Min, AMS, FM
2. Stream Data Mining Algorithms
– Association Rule Mining
– Change Detection
– Clustering
28
Fundamentals of Analyzing and Mining Data Streams55
Clustering Data Streams
 We often talk informally about “clusters”: ‘cancer 
clusters’, ‘disease clusters’ or ‘crime clusters’
 Clustering has an intuitive appeal.  We see a bunch of 
items... we want to discover the clusters...
Fundamentals of Analyzing and Mining Data Streams56
Stream Clustering Large Points
For clustering, need to compare the points.  What 
happens when the points are very high dimensional? 
– Eg. trying to compare whole genome sequences
– comparing yesterday’s network traffic with today’s 
– clustering huge texts based on similarity
 If each point is size d, d very large  cost is very high 
(at least O(d). O(d2) or worse for some metrics)
 We can do better: create a sketch for each point
 Do clustering using sketched approximate distances 
29
Fundamentals of Analyzing and Mining Data Streams57
Stream Clustering Many Points
 What does it mean to cluster on the stream when there 
are too many points to store?
 We see a sequence of points one after the other, and we 
want to output a clustering for this observed data. 
 Moreover, since this clustering changes with time, for 
each update we maintain some summary information, 
and at any time can output a clustering. 
 Data stream restriction: data is 
assumed too large to store, 
so we do not keep all the input, 
or any constant fraction of it. 
Fundamentals of Analyzing and Mining Data Streams58
Clustering for the stream
 What should output of a stream clustering algorithm be?
 Classification of every input point?  
Too large to be useful? 
Might this change as more input points arrive?
– Two points which are initially put in different clusters might 
end up in the same one
 An alternative is to output k cluster centers at end 
– any point can be classified using these centers.
Input: Output:
30
Fundamentals of Analyzing and Mining Data Streams59
Approximation for k-centers
k-center: minimize diameter (max dist) of each cluster.
 Pick some point from the data as the first center. 
Repeat:
– For each data point, compute distance dmin from 
its closest center
– Find the data point that maximizes dmin
– Add this point to the set of centers
Until k centers are picked
 If we store the current best center for each point, then 
each pass requires O(1) time to update this for the new 
center, else O(k) to compare to k centers.
 So time cost is O(kn), but k passes [Gonzalez, 1985].
Fundamentals of Analyzing and Mining Data Streams60






ALG:
Select an arbitrary center c1
Repeat until have k centers
Select the next center ci+1 to  
be the one farthest from its 
closest center
Gonzalez Clustering k=4
Slide due to Nina Mishra
31
Fundamentals of Analyzing and Mining Data Streams61








Gonzalez Clustering k=4
Slide due to Nina Mishra
Fundamentals of Analyzing and Mining Data Streams62

	
  













Gonzalez Clustering k=4


 ! 

"#$


% $
 


 &
'!
$

($≤ ) *(
+ ($
 

% 
,
"$
 

$ #

≥&


≥ # 



-
≥ # -
.

/ $ 
32
Fundamentals of Analyzing and Mining Data Streams63
Gonzalez is 2-approximation
 After picking k points to be centers, find next point that 
would be chosen. Let distance from closest center = dopt
 We have k+1 points, every pair is separated by at least 
dopt. Any clustering into k sets must put some pair in 
same set, so any k-clustering must have diameter dopt
 For any two points allocated to the same center, they are 
both at distance at most dopt from their closest center
 Their distance is at most 2dopt, using triangle inequality.
 Diameter of any clustering must be at least dopt, and is at 
most 2dopt – so we have a 2 approximation.
 Lower bound: NP-hard to guarantee better than 2
Fundamentals of Analyzing and Mining Data Streams64
Gonzalez Restated
 Suppose we knew dopt (from Gonzalez algorithm for k-
centers) at the start
 Do the following procedure:
 Select the first point as the first center
 For each point that arrives:
– Compute dmin, the distance to the closest center
– If dmin > dopt then set the new point to be a new 
center dopt
33
Fundamentals of Analyzing and Mining Data Streams65
Analysis Restated
 dopt is given, so we know that there are k+1 points 
separated by ≥ dopt and dopt is as large as possible
 So there are ≤ k points separated by > dopt
 New algorithm outputs at most k centers: only include 
a center when its distance is > dopt from all others. 
If > k centers output, then > k points separated by > 
dopt, contradicting optimality of dopt. 
 Every point not chosen as a center is < dopt from some 
center and so at most 2dopt from any point allocated to 
the same center (triangle inequality)
 So: given dopt we find a clustering where every point is 
at most twice this distance from its closest center
Fundamentals of Analyzing and Mining Data Streams66
Guessing the optimal solution
 Hence, a 2-approximation – but, we aren’t given dopt
– If we knew d < dopt < 2d then we could run the algorithm.  If 
we find more than k centers, we guessed dopt too low
– So, in parallel, guess dopt = 1, 2, 4, 8...
– We reject everything < dopt, so best guess is < 2dopt:
our output will be < 2*2dopt/dopt = 4 approx
 Need log2 (dmax/dsmallest) guesses, dsmallest is minimum 
distance between any pair of points, as dsmallest < dopt
 O(k log(dmax / dsmallest) may be high, can we reduce more?
 [Charikar et al 97]: doubling alg uses only O(k) space, gives 
8-approximation. Subsequent work studied other settings
34
Fundamentals of Analyzing and Mining Data Streams67
Clustering Summary
 General techniques: keeping small subset (“core-set”) of 
input; guessing a key value; combining subproblems
 Many more complex solutions from computational 
geometry
 Variations and extensions:
– When few data points but data points are high 
dimensional, use sketching techniques to represent
– Different objectives: k-median, k-means, etc.
– Better approximations, different guarantees (e.g. outputs 
2k clusters, quality as good as that of best k-clustering)
Fundamentals of Analyzing and Mining Data Streams68
Summary
 We have looked at
– Sampling from streams and applications (entropy)
– Sketch summaries for more advanced computations
– Association Rule Mining to find interesting patterns
– Change Detection for anomaly detection and alerts
– Clustering to pick out significant clusters
 Many other variations to solve the problems discussed 
here, many other problems to study on data streams
– See more over the course of this workshop.
– Other tutorials and surveys: [Muthukrishnan ’05]
[Garofalakis, Gehrke, Rastogi ’02]
35
Fundamentals of Analyzing and Mining Data Streams69
References
[Agrawal, Imielinski, Swami ’93] R. Agrawal, T. Imielinski, A. Swami.  Mining 
Association Rules between Sets of Items in Large Databases. Proceedings 
of the ACM SIGMOD Conference on Management of Data, 1993.
[Alon, Matias, Szegedy ’96] N. Alon, Y. Matias, and M. Szegedy. The space 
complexity of approximating the frequency moments. In Proceedings of the 
ACM Symposium on Theory of Computing, pages 20–29, 1996. 
[Chakrabarti, Cormode, McGregor ’07] A. Chakrabarti, G. Cormode, and A. McGregor. 
A near-optimal algorithm for computing the entropy of a stream. In 
Proceedings of ACM-SIAM Symposium on Discrete Algorithms, 2007.
[Charikar, Chen, Farach-Colton ’02] M. Charikar, K. Chen, and M. Farach-Colton. 
Finding frequent items in data streams. In Procedings of the International 
Colloquium on Automata, Languages and Programming (ICALP), 2002.
[Cormode, Muthukrishnan ’04] G. Cormode and S. Muthukrishnan. An improved data 
stream summary: The count-min sketch and its applications.  Journal of 
Algorithms, 55(1):58–75, 2005.
Fundamentals of Analyzing and Mining Data Streams70
References
[ [Dasu et al ’06] T. Dasu, S. Krishnan, S. Venkatasubramanian, K. Yi.  An 
Information Theoretic Approach to Detecting Changes in Multi-Dimensional 
Data Streams. Proceedings of the 38th Symposium on the Interface of 
Statistics, Computing Science, and Applications (Interface), 2006.
[Demaine et al ’03] E. Demaine, A. López-Ortiz, and J. I. Munro. Frequency 
estimation of internet packet streams with limited space. In Proceedings of 
the 10th Annual European Symposium on Algorithms, volume 2461 of
Lecture Notes in Computer Science, pages 348–360, 2002.
[Garofalakis, Gehrke, Rastogi ’02] M. Garofalakis and J. Gehrke and R. Rastogi. 
Querying and Mining Data Streams: You Only Get One Look. ACM 
SIGMOD Conference on Management of Data, 2002
[Gonzalez ’85] T. F. Gonzalez. Clustering to minimize the maximum intercluster
distance. Theoretical Computer Science, 38(2-3):293–306, 1985.
[Karp, Papadimitriou, Shenker ’03] R. Karp, C. Papadimitriou, and S. Shenker. A 
simple algorithm for finding frequent elements in sets and bags. ACM 
Transactions on Database Systems, 2003.
36
Fundamentals of Analyzing and Mining Data Streams71
References
[Manku, Motwani ’02] G.S. Manku and R. Motwani. Approximate frequency counts 
over data streams. In Proceedings of International Conference on Very 
Large Data Bases, pages 346–357, 2002.
[Metwally, Agrawal, El Abbadi ’05] A. Metwally, D. Agrawal, and A. El Abbadi. 
Efficient computation of frequent and top-k elements in data streams. In 
Proceedings of ICDT, 2005.
[Misra, Gries ’82] J. Misra and D. Gries. Finding repeated elements. Science of 
Computer Programming, 2:143–152, 1982.
[Muthukrishnan ’05] S. Muthukrishnan. Data Streams: Algorithms and Applications. 
Now Publishers, 2005.
[Nath et al.’04] S. Nath, P. B. Gibbons, S. Seshan, and Z. R. Anderson. Synopsis 
diffusion for robust aggrgation in sensor networks.  In ACM SenSys, 2004.
[Vitter ’85] J. S. Vitter. Random Sampling with a Reservoir, ACM Transactions on 
Mathematical Software, 11(1), March 1985, 37-57.
