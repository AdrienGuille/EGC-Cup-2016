Techniques de fouille de donn√òes pour la r√ò√òcriture de
requ≈ítes en pr√òsence de contraintes de valeurs
H√òl≈Åne Jaudoin, Fr√òd√òric Flouvat
Laboratoire LIMOS, UMR CNRS 6158
Universit√ò Blaise Pascal - Clermont-Ferrand II,
63 177 Aubi≈Åre cedex, France
{hjaudoin,ouvat}@isima.fr
R√©sum√©. Dans cet article, nous montrons comment les techniques de fouilles de
donn√òes peuvent r√òsoudre efcacement le probl≈Åme de la r√ò√òcriture de requ≈ítes
en termes de vues en pr√òsence de contraintes de valeurs. A partir d‚Äôune forma-
lisation du probl≈Åme de la r√ò√òcriture dans le cadre de la logique de description
ALN (Ov), nous montrons comment ce probl≈Åme se rattache √† un cadre de d√ò-
couverte de connaissances dans les bases de donn√òes. L‚Äôexploitation de ce cadre
nous permet de b√òn√òcier de solutions algorithmiques existantes pour la r√òso-
lution du probl≈Åme de r√ò√òcriture. Nous proposons une impl√òmentation de cette
approche, puis nous l‚Äôexp√òrimentons. Les premiers r√òsultats d√òmontrent l‚Äôint√òr≈ít
d‚Äôune telle approche en termes de capacit√ò √† traiter un grand nombre de sources
de donn√òes.
1 Introduction
Aujourd‚Äôhui, les techniques d‚Äôanalyse et d‚Äôint√ògration de donn√òes sont devenues des atouts
majeurs pour les entreprises et les services gouvernementaux. En effet, ces techniques per-
mettent un gain de temps pour regrouper et croiser l‚Äôinformation distribu√òe. Dans le domaine
du d√òveloppement durable, ces techniques sont notamment indispensables an de rassembler et
d‚Äôanalyser les pratiques agricoles et ainsi garantir la tra√ßabilit√ò des pratiques. Plus pr√òcis√òment
nos travaux se situent dans le cadre d‚Äôun projet 1 visant √† mettre en place un syst≈Åme d‚Äôint√ògra-
tion pour interroger les sources de donn√òes agricoles distribu√òes. Le syst≈Åme doit ≈ítre exible
pour permettre l‚Äôarriv√òe de nouvelles sources de donn√òes an de suivre le processus d‚Äôinfor-
matisation du domaine agricole. En effet entre 2000 et 2003, le nombre d‚Äôexploitations ayant
un acc≈Ås √† Internet a tripl√ò 2. Il doit de plus permettre de traiter un grand nombre de sources
de donn√òes car le domaine est susceptible d‚Äôaccueillir, en plus des services d√òconcentr√òs des
minist≈Åres, un grand nombre d‚Äôexploitations.
Dans cet article, nous nous pla√ßons dans le cadre d‚Äôun syst≈Åme de m√òdiation suivant une
approche Local As View (LAV), o√∏ les vues sont d√òcrites via des requ≈ítes sur le sch√òma glo-
bal. Cette approche est connue pour ≈ítre exible car l‚Äôajout et la suppression de sources de
1Ce projet est r√©alis√© en collaboration avec le Cemagref, http ://www.cemagref.fr/
2http ://www.acta-informatique.fr/
- 77 - RNTI-E-6
Fouille de donn√òes pour la r√ò√òcriture de requ≈ítes
donn√òes n‚Äôaffectent pas le sch√òma global. Nous nous int√òressons plus particuli≈Årement au pro-
bl≈Åme de la r√ò√òcriture de requ≈ítes en termes de vues en pr√òsence de contraintes de valeurs.
Les contraintes de valeurs correspondent √† la notion de type √ònum√òr√ò en base de donn√òes.
Elles permettent de sp√òcier les valeurs autoris√òes pour un attribut donn√ò. Les contraintes
de valeurs sont utiles dans beaucoup d‚Äôapplications, comme par exemple pour la v√òrication
des contraintes d‚Äôint√ògrit√ò ou pour exprimer une forme d‚Äôinformation incompl≈Åte (Borgida et
Patel-Schneider, 1994). De plus, ce type de contraintes conna√Æt actuellement un regain d‚Äôint√ò-
r≈ít, impuls√ò notamment par les travaux li√òs au web s√òmantique. En effet, les types √ònum√òr√òs
font partie int√ògrante du langage d‚Äôontologie OWL 3, un standard √òmergeant du web s√òman-
tique 4. L‚Äôutilisation des contraintes de valeurs est motiv√òe par notre cadre applicatif. En effet,
de nombreuses vues ont souvent la m≈íme description et se distinguent uniquement par les va-
leurs autoris√òes pour certains de leurs attributs. De plus, les contraintes de valeurs interviennent
naturellement dans l‚Äôexpression de requ≈ítes typiques du domaine d‚Äôapplication.
Une version pr√òliminaire de notre travail concernant le probl≈Åme de r√ò√òcriture en termes
de vues dans le cadre du langage FL0(Ov) a √òt√ò publi√ò √† BDA‚Äô2004 (Jaudoin et al., 2004).
L‚Äôarticle pr√òsent√ò ici √òtend ces r√òsultats dans les directions suivantes :
¬ñ Nous consid√òrons ici le probl≈Åme de la r√ò√òcriture en termes de vues dans le cadre du lan-
gage ALN (Ov). En plus des constructeurs de quantication universelle et de conjonc-
tion du langage FL0, le langage ALN permet une forme de n√ògation et des contraintes
de cardinalit√ò. Le langage ALN (Ov) augmente le langage ALN avec le constructeur
(Ov) qui permet d‚Äôexprimer les contraintes de valeurs. L‚Äôinvestigation th√òorique du pro-
bl≈Åme de r√ò√òcriture est plus complexe dans le cadre du langageALN (Ov) du fait notam-
ment des int√òractions des contraintes de valeurs avec les contraintes de cardinalit√ò, ainsi
que de la n√òcessit√ò de tenir compte de l‚Äôinconsistance. La r√òsolution de ce probl≈Åme
n√òcessite une nouvelle caract√òrisation de la subsomption dans ALN (Ov) adapt√òe au
probl≈Åme de r√ò√òcriture ainsi qu‚Äôune caract√òrisation des nouvelles formes de r√ò√òcritures
qui apparaissent dans ALN (Ov) (c.f. lemme 1).
¬ñ Nous √òtudions ensuite les probl≈Åmes algorithmiques engendr√òs par les nouveaux cas de
r√ò√òcritures dansALN (Ov). Nous pr√òsentons un nouveau pr√òdicat, nomm√ò P2, issu de la
formalisation du probl≈Åme du calcul de ces nouveaux cas de r√ò√òcriture dans le cadre de
Mannila et Toivonen (1997). Ce pr√òdicat P2, en conjonction avec le pr√òdicat P1 pr√òsent√ò
dans (Jaudoin et al., 2004) et rappel√ò ici, permet de r√òsoudre le probl≈Åme de r√ò√òcriture.
¬ñ Enn, nous d√òcrivons succintement une impl√òmentation de notre approche de r√ò√òcriture
qui exploite et adapte un algorithme de fouille de donn√òes existant, Apriori. Nous pr√ò-
sentons ensuite les r√òsultats de nos exp√òrimentations qui viennent conforter l‚Äôint√òr≈ít des
techniques de fouilles de donn√òes dans notre cadre. Les premiers r√òsultats montrent la
capacit√ò de notre prototype √† passer √† l‚Äô√òchelle en supportant le traitement d‚Äôun grand
nombre de vues (jusqu‚Äô√† 15000). Notons que dans la litt√òrature, peu d‚Äôarticles pr√òsentent
les r√òsultats exp√òrimentaux de leurs approches de r√ò√òcriture. Ils se concentrent g√òn√òra-
lement sur les r√òsultats th√òoriques. A notre connaissance, (Pottinger et Halevy, 2001)
est une des rares r√òf√òrences qui d√òcrit l‚Äô√òvaluation des performances d‚Äôun algorithme de
r√ò√òcriture. Aussi la r√òalisation d‚Äôun prototype et son exp√òrimentation constituent √† notre
avis une contribution dans le domaine de la r√ò√òcriture.
3http ://www.w3.org/2004/OWL/
4OWL est actuellement une recommandation du W3C (http ://www.w3.org/).
- 78 -RNTI-E-6
H. Jaudoin et F. Flouvat
La suite de l‚Äôarticle est organis√òe comme suit. Dans la section 2, nous donnons les pr√òrequis n√ò-
cessaires √† la formalisation du probl≈Åme de la r√ò√òcriture de requ≈ítes en pr√òsence de contraintes
de valeur dans le cadre des logiques de description. La section 3 reformule ce probl≈Åme dans
un cadre de d√òcouverte de connaissances dans les bases de donn√òes. La section 4 pr√òsente
l‚Äôimpl√òmentation et les exp√òrimentations r√òalis√òes. En section 5, une conclusion et des pers-
pectives sont donn√òes. Les d√òmonstrations des lemmes et th√òor≈Åmes de cet article sont donn√òs
dans Jaudoin et al. (2005).
2 R√ò√òcriture de requ≈ítes en pr√òsence de contraintes
2.1 Pr√©requis sur les logiques de description
Les logiques de description sont un formalisme de repr√òsentation des connaissances qui
permet de repr√òsenter des structures complexes et de raisonner avec elles (Baader et al.,
2003). Elles permettent de d√òcrire un domaine d‚Äôapplication √† l‚Äôaide de concepts (pr√òdicats
unaires) et de r√¥les (pr√òdicats binaires). Une logique de description est d√ònie par un ensemble
de constructeurs. Dans cet article, nous nous int√òressons √† la logique ALN (Ov), dont les
constructeurs sont list√òs dans la table 1, colonne 1, o√∏ C est un ensemble de noms de concepts,
N un ensemble de noms de valeurs, RC un ensemble de noms de r√¥les dont l‚Äôimage est un
concept de C etRV un ensemble de noms de r√¥les qui prennent leurs valeurs dans N .
Constructeurs S√©mantique
>C C
>V V
> I = C [ V
? ;
P PI
:A InAI
C uD CI\DI
8Rc:C fx 2 C j 8y : (x; y) 2 Rc
I
! y 2 CIg
8Rv :fo1 : : : ; ong fx 2 C j 8y : (x; y) 2 Rv
I
! y 2 foI
1
; : : : ; oI
n
g  V g
 nR fx 2 C j

fy j (x; y) 2 RIg

  ng
 nR fx 2 C j

fy j (x; y) 2 RIg

  ng
avec A 2 C, n un entier positif, oi 2 N , R 2 RC [RV , Rc 2 RC et Rv 2 RV .
TAB. 1 ¬ñ Syntaxe et s√òmantique de la logique ALN (Ov)
Exemple 1 Exemples de concepts pouvant ≈ítre form√òs √† l‚Äôaide des constructeurs de
ALN (Ov).
¬ñ ParcelleCulturale u 8aRecuE::EffluentElevage u  1 aRecuE sp√òcie les
parcelles culturales qui ont re√ßu au moins un √òpandage qui n‚Äô√òtait pas un efuent d‚Äô√òle-
vage.
¬ñ 8numDepartement:f63; 43; 03g u 8aRecu:  3 typeProduit sp√òcie les indivi-
dus qui sont dans un des d√òpartements 63 ou 43 ou 03 et qui ont re√ßu moins de 3
types de produit. Les contraintes de valeurs ont permis ici de restreindre l‚Äôimage du
r√¥le numDepartement.
- 79 - RNTI-E-6
Fouille de donn√òes pour la r√ò√òcriture de requ≈ítes
La s√òmantique des concepts est donn√òe par une interpr√òtation I = (I ; :I) o√∏ I est
un ensemble non vide, appel√ò domaine d‚Äôinterpr√òtation et .I est une fonction d‚Äôinterpr√òta-
tion. Nous supposons que le domaine d‚Äôinterpr√òtation I est partionn√ò en deux ensembles
disjoints : C d√òcrivant l‚Äôensemble des individus du domaine et V d√òcrivant l‚Äôensemble des
valeurs. Un concept est interpr√òt√ò comme √òtant un sous-ensemble deI . Un r√¥le est interpr√òt√ò
comme un sous-ensemble de C I . L‚Äôinterpr√òtation I associe chaque valeur oi 2 N √† un
√òl√òment oIi de V tel que oi 6= oj implique que oIi 6= oIj . Plus pr√òcis√òment, la s√òmantique des
constructeurs de ALN (Ov) est donn√òe dans la colonne 2 de la table 1. Une interpr√òtation est
un mod≈Åle pour un concept C ssi CI 6= ;. Un concept est inconsistant ssi CI 6= ; pour toute
interpr√òtation I.
Etant donn√òe cette s√òmantique, il est possible de d√ònir la notion de subsomption et d‚Äô√òqui-
valence comme suit. Un concept C est subsum√ò par un conceptD, not√ò C v D, ssi CI  DI
8I. Un concept C est √òquivalent √† un concept D, not√ò C  D, ssi CI = DI 8I.
Les descriptions intentionnelles d‚Äôun domaine d‚Äôapplication sont d√ònies √† l‚Äôaide d‚Äôune
terminologie. Une terminologie est un ensemble ni d‚Äôaxiomes terminologiques de la forme :
(i) A v D (Sp√òcication primitive de concept) ou (ii) A  D (D√ònition de concept), o√∏ A
est un nom de concept etD un concept dans ALN (Ov). Dans cet article, nous supposons que
les terminologies sont acycliques, i.e. aucun concept ne fait r√òf√òrence √† lui-m≈íme directement
ou indirectement dans sa d√ònition ou dans sa sp√òcication. La s√òmantique des terminologies
est obtenue en √òtendant la notion d‚Äôinterpr√òtation aux axiomes terminologiques comme suit.
Une interpr√òtation I est un mod≈Åle pour une terminologie T ssi I est un mod≈Åle pour chaque
axiome de T .
Pour traiter le probl≈Åme de la r√ò√òcriture dans la logique ALN (Ov), nous nous appuyons
sur la forme normale donn√òe dans Jaudoin et al. (2005). La forme normale d‚Äôun concept per-
met d‚Äôexprimer un concept sous une forme canonique. Cette forme normale transforme tout
concept C en concept > ou en une conjonction d‚Äôatomes de la forme 8w:P avec w un mot
d√òni sur l‚Äôensemble des r√¥les de RC [ RV 5 et P est soit un concept atomique A ou une
restriction de cardinalit√ò ( nR ou  nR) ou un ensemble de valeurs E. Par la suite, on note
8w:P 2 C si 8w:P appara√Æt dans la description du concept C.
2.2 R√©√©criture dans ALN (Ov)
Dans cette section, nous d√ònissons le cadre de m√òdiation et le probl≈Åme de la r√ò√òcriture
dans le cadre des logiques de description. Puis nous donnons les caract√òristiques des r√ò√òcri-
tures dans ce contexte. Le sch√òma global S est une terminologie form√òe de d√ònitions de
concepts dans ALN (Ov). Une requ≈íte Q est un concept dans ALN (Ov). Q est d√òcrite en
termes des concepts de S. De plus Q est suppos√òe ≈ítre dans sa forme normale. V est une ter-
minologie form√òe de sp√òcications primitives dans ALN (Ov). Les sp√òcications primitives
de V permettent de d√òcrire les vues. Les vues sont d√òcrites en termes de S et sont suppos√òes
≈ítre donn√òes dans leur forme normale.
Dans ce contexte, on cherche √† r√òpondre √† une requ≈íte Q en ayant uniquement connais-
sance des vues de V . Une technique pour r√òpondre √† Q est de reformuler Q en une expression
qui utilise uniquement les vues de V . L‚Äôexpression obtenue est appel√òe r√ò√òcriture. On s‚Äôin-
5Soit r1 et r2 deux r√¥les. 8r1:r2:A d√©note le concept 8r1:8r2:A. Dans ce cas, r1:r2 est un mot o√π r1 appartient
√†RC uniquement et r2 appartient √†RC [RV .
- 80 -RNTI-E-6
H. Jaudoin et F. Flouvat
t√òresse ici aux r√ò√òcritures maximales de Q, i.e. les r√ò√òcritures qui permettent de calculer le
maximum de r√òponses √† une requ≈íte donn√òe. La d√ònition de r√ò√òcriture maximale est donn√òe
ci-dessous :
D√©nition 2 (R√©√©criture maximale) Soient V une terminologie de vues etQ un concept dans
ALN (Ov). Q
0 est une r√ò√òcriture maximale de Q en termes de V ssi :
1. Q0 est un concept dans le langage fu;tg qui r√òf≈Åre uniquement les noms des vues de V ,
2. Q0 v Q.
3. il n‚Äôexiste pas de concept Q1 dans fu;tg qui r√òf≈Åre uniquement les noms des vues de
V , tel que Q0 v Q1 v Q et Q0 6 Q1.
Par la suite, on appelle r√ò√òcriture conjonctive maximale de Q, toute r√ò√òcriture de Q dans le
langage fug. Comme montr√ò dans Jaudoin et al. (2005), une requ≈íte Q donn√òe a une unique
r√ò√òcriture maximale form√òe de l‚Äôunion de ses r√ò√òcritures conjonctives maximales. L‚Äôensemble
des r√ò√òcritures conjonctives maximales de Q dans le contexte de la logique ALN (Ov) est
ni. Aussi pour calculer les r√òponses d‚Äôune requ≈íte Q, on cherche √† calculer les r√ò√òcritures
conjonctives maximales de Q.
Pour calculer les r√ò√òcritures conjonctives maximales d‚Äôune requ≈íte donn√òe Q, on suit
une approche classique de r√ò√òcriture bas√òe sur l‚Äôalgorithme des paniers (Levy et al., 1996).
Informellement, cette approche fonctionne de la mani≈Åre suivante. Etant donn√ò une requ≈íte
Q  8w1:P1 u : : : u 8wn:Pn, la principale id√òe est de consid√òrer chaque atome 8wi:Pi de Q
isol√òment. A chaque atome 8wi:Pi de la requ≈íte est associ√ò un panier/ensemble qui contient
toutes les r√ò√òcritures conjonctives maximales de cet atome. Ensuite dans une deuxi≈Åme √òtape,
les r√ò√òcritures candidates de Q sont calcul√òes en effectuant le produit cart√òsien entre les pa-
niers. Ceci permet d‚Äôobtenir un sur-ensemble de toutes les r√ò√òcritures conjonctives maximales
de Q. Pour obtenir effectivement les r√ò√òcritures conjonctives maximales, les r√ò√òcritures incon-
sistantes et non maximales doivent ensuite ≈ítre supprim√òes de ce sur-ensemble.
Les travaux pr√òsent√òs dans Jaudoin et al. (2005) montrent en s‚Äôappuyant sur une carac-
t√òrisation de la subsomption dans ALN (Ov), que dans le cadre de m√òdiation d√òni pr√òc√ò-
demment, les r√ò√òcritures conjonctives maximales d‚Äôun atome donn√ò sont form√òes de sous-
ensembles minimaux 6 de V qui v√òrient les conditions √ònonc√òes dans le lemme qui suit.
Lemme 1 Soit Q  8w:P . Soient l la cardinalit√ò du plus grand des ensembles de valeurs qui
appara√Æt dans les vues ou la requ≈íte, et p la profondeur maximale7 des atomes apparaissant
dans les requ≈ítes et les vues. Si Q0  Vi1 u : : : u Vik o√∏ fVi1 ; : : : Vikg est un sous-ensemble
minimal de V tel que Q0 est subsum√òe par 8w:P alors une des conditions suivantes est v√òri-
√òe :
a) k = 1,
a.1) P 2 fA;:Ag et 8w:P 2 Vi1 ou,
a.2) P = ( nR) et 8w:( pR) 2 Vi1 avec p  n ou,
a.3) P = ( nR) et 8w:( pR) 2 Vi1 avec p  n
b) 1  k  l + 1,
6au sens de l'inclusion ensembliste
7la profondeur d'un atome 8w:P est √©gal √† la longueur du mot w, i.e. le nombre de r√¥les dans w.
- 81 - RNTI-E-6
Fouille de donn√òes pour la r√ò√òcriture de requ≈ítes
b.1) P = E et fVi1 :::Vikg est tel que : pour j 2 f1; : : : ; kg, 8w:Eij 2 Vij , et
\ikj=i1Ej  E.
b.2) P = ( n Rv), avec Rv 2 Rv , fVi1 :::Vikg est tel que : pour j 2 f1; : : : ; kg,
8w:Eij 2 Vij , et j \
ik
j=i1
Ej j  n.
c) 1  k  l + p et il existe un pr√òxe w0v de w tel que 8w0:( 0v) 2 uikj=i1Vj .
Ce lemme donne les conditions n√òcessaires pour qu‚Äôun sous-ensemble de vues de V forme
une r√ò√òcriture conjonctive maximale de Q  8w:P , i.e. pour qu‚Äôune conjonction de vues
appartiennent au panier B(w;P ) de l‚Äôatome 8w:P . Ainsi une r√ò√òcriture d‚Äôun panier peut ≈ítre
form√òe d‚Äôune seule vue (cas (a) du lemme) ou d‚Äôau plus l+ 1 (cas (b) du lemme) ou d‚Äôau plus
l+ p (cas (c) du lemme). Un examen plus attentif du lemme montre que lors de la construction
des paniers, on calcule des cas classiques de r√ò√òcriture dans le langage ALN (cas (a) et (c) du
lemme) et des cas de r√ò√òcritures sp√òciques √† la pr√òsence des contraintes de valeurs (cas (b.1)
et (b.2)) 8. Aussi, dans la suite de l‚Äôarticle, nous nous concentrons sur les probl≈Åmes du calcul
des r√ò√òcritures engendr√òes par les contraintes de valeurs car ces probl≈Åmes posent de nouvelles
difcult√òs en termes de r√ò√òcriture de requ≈ítes.
Soit une requ≈íte Q  8w:P o√∏ P est un ensemble de valeurs E ou une restriction de car-
dinalit√ò  nRv. Consid√òrons maintenant le probl≈Åme de la cr√òation du panier B(w;P ). Nous
nous int√òressons aux probl≈Åmes du calcul des r√ò√òcritures des cas (b.1) et (b.2) du lemme 1.
Pour d√ònir plus pr√òcis√òment ces probl≈Åmes, nous introduisons l‚Äôensemble Vw = fV1; :::; Vpg
qui d√òsigne le sous-ensemble de vues de V telles que 8i 2 f1; :::; pg;9Ei j (8w:Ei) 2 Vi.
Le probl≈Åme E_conj_rewrite(E,w) correspond au calcul des r√ò√òcritures de type (b.1). Il est
d√òni comme suit :
Probl√®me 1 Soit Q  8w:E et une terminologie V dansALN (Ov). Soit Vw  V .
Le probl≈Åme E_conj_rewrite(E,w) consiste √† calculer les plus petites conjonctions de vues
de Vw subsum√òes par 8w:E.
Le probl≈Åme N_conj_rewrite(n,wR) correspond au calcul des r√ò√òcritures de type (b.2). Il
est deni comme suit :
Probl√®me 2 Soit Q  8w:  n R et une terminologie V dansALN (Ov). Soit VwR  V .
Le probl≈Åme N_conj_rewrite(n,wR) consiste √† calculer les plus petites conjonctions de vues
de VwR subsum√òes par 8w:  n R.
L‚Äôexemple suivant illustre les solutions des probl≈Åmes pr√òsent√òs ci-dessus.
Exemple 3 Soit une requ≈íte Q telle que Q  8numDepartement:E u 8aRecu: 
3 typeProduit, avec E = f63; 43; 03g. Supposons qu‚Äôil existe 4 vues Vi; i 2 f1; :::; 4g
telles que Vi v 8numDepartement:Ei o√∏ E1 = f23; 15; 18; 80; 43; 03g, E2 = f03; 63g,
E3 = f01; 07; 11; 43; 63g, E4 = f26; 63g, et 3 vues Vi; i 2 f5; 6; 7g telles que Vi v
8aRecu:typeProduit:Ei pour i 2 f5; 6; 7g o√∏ E5 = fP1; P10; P15; P20; P27g, E6 =
fP1; P10; P15; P20; P26g, E7 = fP1; P10; P15; P26; P27g.
8Notons cependant que les r√©√©critures du cas (b.2) du lemme int√©ragissent avec les cas classiques de r√©√©critures
dansALN . Ces r√©√©critures sont n√©cessaires pour obtenir effectivement les r√©√©critures du cas (c) du lemme
- 82 -RNTI-E-6
H. Jaudoin et F. Flouvat
Ici on a VnumDepartement = fV1; V2; V3; V4g. On calcule les solutions de
E_conj_rewrite(E,numDepartement) √† partir de VnumDepartement. On obtient les conjonc-
tions suivantes V2, V1 u V3, V3 u V4 et V1 u V4. On peut par exemple v√òrier que E2  E.
Le panier B(numDepartement;E) contient alors les conjonctions V2, V1 u V3, V3 u V4 et
V1 u V4.
De la m≈íme mani≈Åre √† partir de VaRecu:typeProduit = fV5; V6; V7g, on obtient la solution
de N_conj_rewrite(3,aRecu.typeProduit) : V5 u V6 u V7. En effet, l‚Äôintersection des ensembles
E5, E6, E7 donne un ensemble dont la cardinalit√ò est inf√òrieure √† 3. Ainsi V5 u V6 u V7
appartient au panier B(aRecu; ( 3typeProduit)).
Dans la section qui suit, nous montrons comment les deux probl≈Åmes E_conj_rewrite(E,w)
et N_conj_rewrite(n,wR) se rattachent √† un cadre de d√òcouverte des connaissances dans les
bases de donn√òes.
3 Vers la mise en place de techniques de fouille de donn√òes
3.1 Le cadre de Mannila et Toivonen (1997)
Pour rattacher les probl≈Åmes √ònonc√òs pr√òc√òdemment √† un cadre de d√òcouverte de connais-
sances, nous nous appuyons sur le cadre th√òorique introduit dans Mannila et Toivonen (1997).
Il formalise un probl≈Åme basique de d√òcouverte de connaissances dans des bases de donn√òes,
qui peut ≈ítre √ònonc√ò de la mani≈Åre suivante : Soit r une base de donn√òes, L un langage pour
exprimer des propri√òt√òs ou d√ònir des sous-groupes des donn√òes, et P un pr√òdicat de s√òlection.
Le pr√òdicat P permet d‚Äô√òvaluer si une phraseX 2 L est ¬îint√òressante¬î dans r. L‚Äôobjectif est de
trouver la th√òorie de r selon L et P , i.e. l‚Äôensemble T h(r;L; P )=f ' 2 L jP (r; ') est vraig,
qui correspond √† l‚Äôensemble des phrases int√òressantes de r.
Soit une relation de sp√òcialisation/g√òn√òralisation, i.e. un ordre partiel , sur les motifs de
L. On dit que X g√òn√òralise Y et que Y sp√òcialise X quand X  Y . Soit S un ensemble de
phrases de L tel que si ' 2 S et   ' alors  2 S. Alors S peut ≈ítre repr√òsent√ò par sa bordure
positive Bd+(S) ou sa bordure n√ògative Bd (S).
Bd+(S) = f' 2 S j pour tout  2 L avec '  ,  62 Sg
Bd (S) = f' 2 L n S j pour tout  2 L avec   ',  2 Sg
La bordure positive correpond aux √òl√òments les plus sp√òciques de la th√òorie, tandis que la
bordure n√ògative correspond aux √òl√òments les plus g√òn√òraux de la th√òorie. Elles permettent
chancune de retrouver toutes les phrases X 2 L ¬îint√òressantes¬î dans r, i.e. celles pour les-
quelles P (r;X) est vrai. Notons que si le pr√òdicat P de T h(r;L; P ) est anti-monotone par
rapport √†  (i.e. si 8X;Y 2 L tels que X  Y et Pred(r; Y ) est vrai alors Pred(X; r) est
vrai), alors la th√òorie peut ≈ítre repr√òsent√òe par ces bordures.
Ce cadre peut ≈ítre appliqu√ò √† de multiples probl≈Åmes (Mannila et Toivonen, 1997), comme
par exemple le probl≈Åme de la d√òcouverte des motifs fr√òquents (Agrawal et al., 1993). La
section qui suit s‚Äôattache √† montrer comment le probl≈Åme de la r√ò√òcriture peut se ramener √†
une formulation ensembliste, puis ≈ítre transpos√ò dans le cadre pr√òc√òdemment introduit.
- 83 - RNTI-E-6
Fouille de donn√òes pour la r√ò√òcriture de requ≈ítes
3.2 Formulation des probl√®mes de r√©√©criture dans un cadre de d√©cou-
verte de connaissances
3.2.1 Formulation ensembliste de la r√©√©criture
Pour un mot w, un ensemble E, un entier n donn√òs, nous cherchons maintenant √† donner
une formulation ensembliste des probl≈Åmes E_conj_rewrite(E,w) et N_conj_rewrite(n,w). Pour
reformuler plus pr√òcis√òment ces probl≈Åmes, nous introduisons les d√ònitions suivantes :
D√©nition 4 Soient w un mot, E un ensemble et n un entier. Soit Fw = fE1; :::; Epg l‚Äôen-
semble des Ei associ√òs aux vues Vi de Vw, et P(Fw) l‚Äôensemble des parties de Fw.
S1(w;E) = fX 2 P(Fw)j \ fx 2 Xg  E et 8Y  X;\fy 2 Y g 6 Eg
S2(w; n) = fX 2 P(Fw)j j\fx 2 Xgj  n et 8Y  X; j\fx 2 Xgj > ng
S1(w;E) caract√òrise les plus petits sous-ensembles de Fw dont l‚Äôintersection des √òl√òments est
contenue dans E, tandis que S2(w; n) caract√òrise les plus petits sous-ensembles de Fw dont la
cardinalit√ò de l‚Äôintersection des √òl√òments est inf√òrieure √† n.
Le lemme suivant caract√òrise les solutions de E_conj_rewrite(E,w) et
N_conj_rewrite(n,wR) avec les ensembles S1(w;E) et S2(wR; n).
Lemme 2 Soient n un entier, w et wR des mots et E un ensemble. Soient deux probl≈Åmes
E_conj_rewrite(E,w) et N_conj_rewrite(n,wR). Soit b = uikj=i1Vj .
1. b est une solution de E_conj_rewrite(E,w)
ssi fVi1 ; :::; Vikg  Vw et fEi1 ; :::; Eikg 2 S1(w;E)
2. b est une solution de N_conj_rewrite(n,wR)
ssi fVi1 ; :::; Vikg  Vw:R et fEi1 ; :::; Eikg 2 S2(w:R; n)
La formulation ensembliste du probl≈ÅmeN_conj_rewrite(n,wR) est illustr√òe dans l‚Äôexemple
qui suit.
Exemple 5 Reprenons l‚Äô√ònonc√ò de l‚Äôexemple 3. On a FaRecu:typeProduit = fE5; E6; E7g.
On a S2(aRecu:typeProduit; 3) = ffE5; E6; E7gg. On retrouve alors la solution de
N_conj_rewrite(3,aRecu.typeProduit) : V5 u V6 u V7.
Dans la section suivante, nous montrons comment cette repr√òsentation ensembliste peut
≈ítre transpos√òe dans le cadre de Mannila et Toivonen (1997).
3.2.2 Calcul des r√©√©critures dans un cadre de d√©couverte de connaissances
Identication de S1(w;E) Dans ce contexte, le premier ensemble S1(w;E) peut se ramener
au cadre de d√òcouverte de connaissances pr√òc√òdent de la mani≈Åre suivante :
¬ñ la relation r est vide.
¬ñ le langage Lw est l‚Äôensemble des parties de Fw, i.e. P(Fw).
¬ñ le pr√òdicat, not√ò P1, est d√òni de la fa√ßon suivante :
Soient X 2 Lw, X = fE1; :::; Ekg et E un ensemble de valeurs.
P1(E;X) est vrai ssi \ki=1fEig 6 E.
¬ñ la relation d‚Äôordre est la relation d‚Äôinclusion .
- 84 -RNTI-E-6
H. Jaudoin et F. Flouvat
La th√òorie T h(;;Lw; P1) est alors l‚Äôensemble des √òl√òments de Fw qui v√òrient le pr√òdicat
P1. De plus, le pr√òdicat P1 √òtant anti-monotone, les notions de bordure positive et n√ògative
s‚Äôappliquent ici. Le th√òor≈Åme suivant permet de caract√òriser S1(w;E) en fonction de la bordure
n√ògative.
Th√©or√®me 1 Soit le probl≈Åme E_conj_rewrite(E,w). S1(w;E) = Bd ( Th(;;Lw; P1) )
Nous pouvons de la m≈íme mani≈Åre caract√òriser S2(w; n) dans le cadre th√òorique de Man-
nila et Toivonen (1997).
Identication de S2(w; n) Comme pr√òc√òdemment, la relation r est vide, Lw consiste en
l‚Äôensemble des parties de Fw = fE1; :::; Epg, et la relation d‚Äôordre est l‚Äôinclusion. Nous intro-
duisons un nouveau pr√òdicat P2(n;X) d√òni comme suit :X = fE1; :::; Ekg 2 Lw, P2(n;X)
est vrai ssi j \ki=1Ei j> n. Le pr√òdicat P2(n;X) est anti-monotone par rapport √† l‚Äôinclusion,
ce qui garantit l‚Äôexistence des bordures. Par cons√òquent, le th√òor≈Åme suivant donne une carac-
t√òrisation de S2(w; n) en fonction de la bordure n√ògative.
Th√©or√®me 2 Soit le probl≈Åme N_conj_rewrite(n,w). S2(w; n) = Bd ( Th(;;Lw; P2) )
L‚Äôexemple qui suit illustre la formulation de S2(w; n) dans le cadre introduit ci-dessus.
Exemple 6 Dans la suite de l‚Äôexemple 5, pour le mot aRecu:typeProduit,
LaRecu:typeProduit est l‚Äôensemble des parties de FaRecu:typeProduit. Le param≈Åtre n du
pr√òdicat P2 est √ògal √† 3. La th√òorie T h(;;LaRecu:typeProduit; P2) est √ògale √† ffE5g, fE6g,
fE7g, fE5; E6g, fE5; E7g, fE6; E7gg. La bordure positive de T h(;;LaRecu:typeProduit; P2)
est donc ffE5; E6g; fE5; E7g; fE6; E7gg, et sa bordure n√ògative est ffE5; E6; E7gg. On
retrouve le r√òsultat de l‚Äôexemple 5.
A partir de cette formalisation, il est possible d‚Äôutiliser des algorithmes de fouille de donn√òes
pour r√òsoudre ces probl≈Åmes, et plus particuli≈Årement les algorithmes de d√òcouvertes des mo-
tifs fr√òquents.
4 Impl√òmentation et exp√òrimentations
Choix d'impl√©mentation Un algorithme de r√ò√òcriture pour un sous-langage de FL0(Ov) a
√òt√ò impl√òment√ò √† l‚Äôaide d‚Äôun syst≈Åme de gestion de bases de donn√òes (SGBD), permettant ainsi
de g√òrer efcacement de grands volumes de donn√òes et de traiter un grand nombre de transac-
tions simultan√òes. Pour le moment, seul le calcul des solutions de E_conj_rewrite(w,E) a √òt√ò
impl√òment√ò sous forme d‚Äôun algorithme de fouille de donn√òes ext√òrieur au SGBD. Les don-
n√òes sont expatri√òes vers ce programme charg√ò d‚Äôex√òcuter l‚Äôalgorithme de fouille de donn√òes
et de renvoyer les r√òsultats au SGBD.
Nous utilisons l‚Äôalgorithme Apriori (Agrawal et Srikant, 1994) pour trouver les solutions
de E_conj_rewrite(w,E). Cet algorithme est l‚Äôalgorithme classique de d√òcouverte des motifs
fr√òquents. Il effectue un parcours par niveau de l‚Äôespace de recherche, et utilise une strat√ògie
d‚Äô√òlagage √† partir de motifs de la bordure n√ògative pour limiter le nombre de motifs g√òn√òr√òs.
Les avantages de cet algorithme pour r√òsoudre notre probl≈Åme sont multiples. Cet algorithme,
- 85 - RNTI-E-6
Fouille de donn√òes pour la r√ò√òcriture de requ≈ítes
tout en recherchant les motifs fr√òquents, d√òcouvre uniquement les motifs de la bordure n√òga-
tive, ce qui n‚Äôest pas le cas d‚Äôune grande partie des autres approches. De plus, sa strat√ògie et
son efcacit√ò ne d√òpendent pas du pr√òdicat √òtudi√ò. A l‚Äôoppos√ò, une grande partie des autres
algorithmes fondent leur efcacit√ò sur des techniques propres au pr√òdicat ¬î≈ítre fr√òquent¬î. L‚Äôef-
cacit√ò de ce type d‚Äôapproche pour un autre pr√òdicat est donc difcilement pr√òvisible.
L‚Äôimpl√òmentation d‚ÄôApriori utilis√òe est une adaptation de l‚Äôimpl√òmentation C++ de Bor-
gelt (2003). Cette impl√òmentation est reconnue pour ≈ítre l‚Äôimpl√òmentation la plus efcace
d‚ÄôApriori actuellement (Goethals et Javeed Zaki, 2003; Bayardo et al., 2004). L‚Äôimpl√òmenta-
tion initiale d‚ÄôApriori a √òt√ò modi√òe de fa√ßon √† rendre l‚Äôalgorithme ind√òpendant du pr√òdicat
√òtudi√ò. Plus concr≈Åtement, pour pouvoir appliquer Apriori √† un nouveau pr√òdicat, il suft
de d√ònir les op√òrations propres √† ce pr√òdicat, et de le passer en param≈Åtre de l‚Äôalgorithme.
Actuellement, en plus de diff√òrents pr√òdicats li√òs aux motifs fr√òquents, le pr√òdicat P1 a √òt√ò
impl√òment√ò permettant ainsi de trouver les solutions de E_conj_rewrite(w,E) par Apriori.
L‚Äôavantage de notre impl√òmentation est donc de faciliter l‚Äôutilisation d‚ÄôApriori pour r√òsoudre
d‚Äôautres probl≈Åmes que ceux de fouille de donn√òes, en √òvitant d‚Äôavoir √† r√ò√òcrire √† chaque fois
l‚Äôalgorithme.
Exp√©rimentations Nous nous concentrons ici sur l‚Äôexp√òrimentation de la phase de r√òsolu-
tion de E_conj_rewrite(w,E). Cette phase √òtant l‚Äôune des plus co√üteuse, son √òtude va nous
permettre d‚Äôestimer le nombre de vues pouvant ≈ítre trait√òes. Notons que cette borne corres-
pond au nombre de vues que l‚Äôalgorithme de r√ò√òcriture a identi√ò comme √òtant pertinentes √†
la r√ò√òcriture d‚Äôun atome de la forme 8mot:valeurs, i.e. les vues de Vmot. Ainsi cette borne
conditionne uniquement la taille de l‚Äôentr√òe d‚ÄôApriori et ne fait pas gure de limite sur le
nombre de vues que l‚Äôalgorithme de r√ò√òcriture peut traiter.
Les exp√òrimentations ont √òt√ò r√òalis√òes sur des jeux de donn√òes synth√òtiques. Les jeux d‚Äôes-
sais ont √òt√ò cr√ò√òs √† l‚Äôaide du g√òn√òrateur al√òatoire d‚ÄôOracle, de fa√ßon √† ce que la cardinalit√ò
des contraintes de valeurs soit √ògale √† un entier n ou comprise entre 1 et un entier n tel que
n 2 f10; 20; 30; 40g. On a mesur√ò les temps d‚Äôex√òcution d‚ÄôApriori sur ces jeux d‚Äôessais. Ces
exp√òrimentations ont √òt√ò r√òalis√òes sur un pentium IV pro 2.6 Ghz avec 3 Go de m√òmoire.
Comme le montre la gure 1, lorsque la taille des contraintes de valeurs est petite, il est
possible de prendre un grand nombre de vues en entr√òe (e.g. 15000 vues pour des contraintes
de taille inf√òrieure √† 10). D≈Ås que la taille des contraintes augmente, le nombre de vues que
peut traiter l‚Äôalgorithme, diminue (gure 1). En effet, plus la taille des contraintes est grande,
plus les contraintes risquent de s‚Äôintersecter et que cette intersection ne soit pas incluse dans
E. Par cons√òquent, le nombre de motifs int√òressants est susceptible d‚Äô≈ítre important et le pro-
grammme dans ce cas, n√òcessite plus d‚Äôespace m√òmoire que disponible. Notons que lorsque
les contraintes de valeurs sont de taille xe (gure gauche de la gure 1), Apriori est mis en
difcult√ò plus rapidement que lorsque les contraintes sont de taille variable. Ceci s‚Äôexplique
par le fait que par exemple pour des contraintes de cardinalit√ò au plus 10, les contraintes sont
compos√òes en moyenne de 5 valeurs.
D‚Äôune mani≈Åre g√òn√òrale, ces jeux ont montr√ò qu‚Äôil est possible de prendre en entr√òe pour
la r√ò√òcriture des atomes de la forme 8mot:valeurs, jusqu‚Äô√† 15000 vues. N√òanmoins, il est
difcile de comparer les performances de notre prototype avec d‚Äôautres applications de r√ò√òcri-
ture de requ≈ítes dans la mesure o√∏ dans ce domaine les r√òsultats th√òoriques ont toujours prim√ò
sur les r√òsultats exp√òrimentaux. A notre connaissance, (Pottinger et Halevy, 2001) est une des
- 86 -RNTI-E-6
H. Jaudoin et F. Flouvat
0
5
10
15
20
25
30
35
40
3000 5000 10000 15000
Nombre de vues
Te
m
ps
 d
'e
x√©
cu
tio
n 
en
 s
ec
on
de
s
10
20
30
40
0
5
10
15
20
25
30
35
40
45
50
3000 5000 10000 15000
Nombre de vues
Te
m
ps
 d
'e
x√©
cu
tio
n 
en
 
se
co
n
de
s 10
20
30
40
FIG. 1 ¬ñ Temps d‚Äôex√òcution d‚ÄôApriori pour des contraintes de taille xe puis variable
rares r√òf√òrences qui d√òcrit l‚Äô√òvaluation des performances d‚Äôun algorithme de r√ò√òcriture. Leur
impl√òmentation est consid√òr√òe comme permettant le passage √† l‚Äô√òchelle, car pour r√ò√òcrire une
requ≈íte, elle peut traiter pr≈Ås de 12000 vues. Aussi par rapport √† ces r√òsultats, notre approche
de r√ò√òcriture bas√òe sur Apriori permet d‚Äôenvisager le passage √† l‚Äô√òchelle.
5 Conclusions et perspectives
Dans cet article, nous avons conrm√ò l‚Äôint√òr≈ít des techniques de fouilles de donn√òes
pour traiter le probl≈Åme de la r√ò√òcriture en pr√òsence de contraintes de valeurs. En effet dans
ALN (Ov), de nouveaux cas de r√ò√òcritures engendr√òs par les contraintes peuvent b√òn√òcier
d‚Äôune formulation dans le cadre de d√òcouverte de connaissances de Mannila et Toivonen
(1997). De plus, l‚Äôimpl√òmentation de notre approche bas√ò sur une impl√òmentation g√òn√òrique
d‚ÄôApriori permet de traiter un grand nombre de vues et d‚Äôenvisager le passage √† l‚Äô√òchelle de
notre algorithme de r√ò√òcriture. Toutefois, l‚Äôex√òcution d‚ÄôApriori devient probl√òmatique quand
une grande partie de l‚Äôespace de recherche doit ≈ítre parcourue, i.e. quand il existe de grands
motifs int√òressants. Dans de telles congurations, pour le probl≈Åme de la d√òcouverte des fr√ò-
quents, des algorithmes ont √òt√ò propos√òs an de trouver plus efcacement les motifs de grande
taille (Han et al., 2000; Uno et al., 2003; Flouvat et al., 2004). L‚Äôadaptation de certaines de ces
approches pourrait donc permettre de traiter un nombre plus important de vues.
R√òf√òrences
Agrawal, R., T. Imielinski, et A. N. Swami (1993). Mining association rules between sets of
items in large databases. In SIGMOD conference, Washington, pp. 207¬ñ216. ACM Press.
Agrawal, R. et R. Srikant (1994). Fast algorithms for mining association rules in large data-
bases. In VLDB conference, Santiago de Chile, Chile, pp. 487¬ñ499.
Baader, F., D. Calvanese, D. McGuinness, D. Nardi, et P. Patel-Schneider (Eds.) (2003). The
Description Logic Handbook: Theory, Implementation, and Applications. Cambridge Uni-
versity Press.
- 87 - RNTI-E-6
Fouille de donn√òes pour la r√ò√òcriture de requ≈ítes
Bayardo, R., B. Goethals, et M. J. Zaki (Eds.) (2004). ICDM Workshop on Frequent Itemset
Mining Implementations, Volume 126 of CEUR Workshop Proceedings.
Borgelt, C. (2003). Efcient implementations of Apriori and Eclat. In ICDM Workshop on
Frequent Itemset Mining Implementations.
Borgida, A. T. et P. F. Patel-Schneider (1994). A semantics and complete algorithm for sub-
sumption in the classic description logic. Journal of Articial Intelligence Research 1.
Flouvat, F., F. D. Marchi, et J.-M. Petit (2004). ABS: Adaptive borders search of frequent
itemsets. In ICDM Workshop on Frequent Itemset Mining Implementations, Volume 126 of
CEUR Workshop Proceedings.
Goethals, B. et M. Javeed Zaki (2003). Advances in frequent itemset mining implementations:
Introduction to FIMI‚Äô03. In ICDM Workshop on Frequent Itemset Mining Implementations.
Han, J., J. Pei, et Y. Yin (2000). Mining frequent patterns without candidate generation. In
SIGMOD Conference, pp. 1¬ñ12.
Jaudoin, H., J.-M. Petit, C. Rey, M. Schneider, et F. Toumani (2005). Query rewriting us-
ing views in presence of value constraints. In F. W. Ian Horrocks, Ulrike Sattler (Ed.),
Description Logics, pp. 112¬ñ119.
Jaudoin, H., F. Toumani, J.-M. Petit, et M. Schneider (2004). Utilisation d‚Äôun cadre de d√òcou-
verte des connaissances pour la r√ò√òcriture de requ≈ítes en pr√òsence de contraintes de valeurs.
In J. L. Maitre (Ed.), BDA 2004, pp. 407¬ñ426.
Levy, A., A. Rajaraman, et J. Ordille (1996). Querying Heterogeneous Information Sources
Using Source Descriptions. In VLDB conference, Mumbai (Bombay), India, pp. 251¬ñ262.
Mannila, H. et H. Toivonen (1997). Levelwise search and borders of theories in knowledge
discovery. Data Mining and Knowledge Discovery 1(3), 241¬ñ258.
Pottinger, R. et A. Halevy (2001). Minicon : A scalable algorithm for answering queries using
views. The VLDB Journal 10(2-3), 182¬ñ198.
Uno, T., T. Asai, Y. Uchida, et H. Arimura (2003). LCM: An efcient algorithm for enumer-
ating frequent closed item sets. In Workshop on Frequent Itemset Mining Implementations.
Summary
In this paper, we show how data mining techniques can be used to solve efciently the
problem of query rewriting using views in presence of value constraints within the setting of
description logicALN (Ov). Firstly, we give a formalization of this problem in the framework
of ALN (Ov). Then we show how to t this formalization with a KDD framework. Therefore
we reuse KDD scalable algorithmic solutions to solve this rewriting problem. We describe an
implementation of this approach, and give some experimental results. The rst results show
the scability of this kind of approach.
- 88 -RNTI-E-6
