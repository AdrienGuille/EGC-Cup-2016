Correction et complétude d’un algorithme de recherche
d’information par treillis de concepts
Nizar Messai, Marie-Dominique Devignes, Amedeo Napoli, Malika Smaïl-Tabbone
UMR 7503 LORIA, BP 239, 54506 Vandœuvre-lès-Nancy, FRANCE
{messai,devignes,napoli,malika}@loria.fr
http://www.loria.fr/∼messai
Résumé. Dans cet article nous présentons BR-Explorer, un algorithme de re-
cherche d’information correct et complet qui s’appuie sur la classification par
treillis de concepts. L’algorithme BR-Explorer a pour objectif la recherche d’ob-
jets pertinents pour une requête donnée. Initialement, nous disposons d’un con-
texte formel représentant la relation entre un ensemble d’objets décrits par un
ensemble d’attributs et du treillis de concepts correspondant à ce contexte. Étant
donné une requête, l’algorithme BR-Explorer commence par générer un concept
formel représentant la requête puis l’insère dans le treillis de concepts. Ensuite,
BR-Explorer localise, dans le treillis résultant, un “concept pivot” à partir du-
quel il construit la réponse à la requête étape par étape en effectuant un parcours
en largeur des concepts subsumants le concept pivot jusqu’au concept le plus
général du treillis. Finalement BR-Explorer retourne en réponse l’ensemble des
objets pertinents ordonnés selon leur degré de pertinence pour la requête.
1 Introduction
La notion de treillis de Galois (ou treillis de concepts) d’une relation est à la base d’une
famille de méthodes de classification conceptuelle (Godin et al., 1995b). Introduite par Barbut
et Monjardet (1970), cette approche a été à la base de l’analyse formelle de concepts (Ganter et
Wille, 1999) où on propose de considérer chaque élément du treillis comme un concept formel
et le graphe (diagramme de Hasse) comme une relation de généralisation/spécialisation entre
les concepts. Cette forme de classification constitue l’une des motivations de l’application des
treillis de concepts pour la recherche d’information dès l’apparition de l’analyse formelle de
concepts. La recherche d’information a par la suite été explicitement mentionnée comme étant
l’une des applications possibles des treillis de concepts (Godin et al., 1995b). Plus tard, une
approche pour la recherche d’information en utilisant les treillis de concepts, la recherche d’in-
formation par treillis, a été proposée dans (Carpineto et Romano, 2000, 2004). La motivation
principale qui a conduit à l’utilisation des treillis de concepts pour la recherche d’information
vient du fait que la classification en treillis permet de combiner la recherche par requête et la
recherche par navigation (Godin et al., 1995a). En effet, les concepts formels qui s’organisent
en un treillis de concepts (voir les définition dans la section 2) sont vus comme des classes de
documents pertinents pour un ensemble de contraintes données (représenté par une requête).
BR-Explorer
La relation de subsomption (la relation d’ordre partiel entre les concepts du treillis) entre les
concepts permet le passage d’un concept à un autre concept plus général ou plus spécifique
offrant ainsi la possibilité de naviguer dans la hiérarchie considérée.
L’utilisation des treillis de concepts dans les systèmes de recherche d’information spécia-
lisés favorise un meilleur rappel et une meilleure précision. En effet, le domaine de recherche
(corpus) est souvent plus restreint, ce qui permet d’une part de réduire les problèmes de passage
à l’échelle notamment pour l’aspect navigation et d’autre part d’améliorer les performances du
processus de recherche du fait de la non nécessité d’indexation automatique et de l’assise for-
melle de la FCA
Une méthode de recherche d’information par treillis de concepts a été introduite dans (Mes-
sai et al., 2005) et appliquée pour la recherche de sources de données biologiques dans l’an-
nuaire BioRegistry (Smail-Tabbone et al., 2005; Messai et al., 2006). Dans cet article nous
développons la présentation formelle de l’algorithme BR-Explorer qui constitue la base de la
méthode de recherche proposée dans (Messai et al., 2005) et nous donnons les preuves de
correction de complétude de cet algorithme.
Le reste de cet article est organisé comme suit. Nous commençons en section 2 par un bref
rappel des notions et définitions de base relatives à l’analyse formelle de concepts. Ensuite
nous détaillons, dans la section 3, l’algorithme de recherche d’information par treillis, BR-
Explorer. Dans la section 4, nous illustrons l’application de l’algorithme BR-Explorer sur un
exemple simple. Dans la section 5, nous donnons les preuves de correction et complétude
de BR-Explorer par rapport au critère de pertinence défini. Nous concluons et donnons les
perspectives de ce travail en section 6.
2 Rappel des notions de base de l’analyse formelle de concepts
Dans cette section nous rappelons brièvement les définitions et les résultats concernant
l’analyse formelle de concepts nécessaires pour la suite de cet article (voir aussi (Ganter et
Wille, 1999)).
Définition 1 (Contexte formel) Un contexte formel est un triplet K = (G,M, I) où G est un
ensemble d’objets, M est un ensemble d’attributs et I est une relation binaire entre G et M
appelée relation d’incidence de K et vérifiant :
I ⊆ G×M et (g,m) ∈ I (notée aussi gIm) signifie que l’objet g ∈ G possède l’attribut
m ∈M .
Définition 2 Soit K = (G,M, I) un contexte formel. Pour tout A ⊆ G et B ⊆M , on définit :
– A′ = {m ∈M | ∀ g ∈ A, gIm}
– B′ = {g ∈ G | ∀m ∈ B, gIm}
Intuitivement, A′ est l’ensemble des attributs communs à tous les objets de A et B′ est
l’ensemble des objets possédant tous les attributs de B. L’opérateur ′ est appelé opérateur de
dérivation et s’applique aussi bien aux sous-ensembles de G qu’aux sous-ensembles de M .
Cet opérateur peut se composer avec lui même, pour partir d’un sous-ensemble d’objets A,
produire A′ et à partir de A′ produire le sous-ensemble d’objets A′′ (la notation ′′ est utilisée
pour marquer la composition). Les opérateurs ′ et ′′ vérifient les propriétés suivantes pour A,
A1, A2 des sous-ensembles de G et B, B1, B2 des sous-ensembles deM :
N. Messai et al.
– A1 ⊆ A2⇒ A2′ ⊆ A1′, B1 ⊆ B2⇒ B2′ ⊆ B1′
– A ⊆ A′′ et A′ = A′′′, B ⊆ B′′ et B′ = B′′′ (′′′ est la composition de ′ et ′′)
– A ⊆ B′ ⇔ B ⊆ A′
L’opérateur composé ′′ définit une fermeture sur l’ensemble des parties deG, noté ℘(G), ou
sur l’ensemble des parties deM , noté ℘(M). Rappelons qu’une fermeture h sur un ensemble
partiellement ordonné (E,≤) est extensive (∀ x ∈ E, h(x) ≤ x), monotone croissante (∀ x,
y ∈ E, x ≤ y alors h(x) ≤ h(y)) et idempotente (∀ x ∈ E, h(h(x)) ≤ h(x)). Un élément
x ∈ E est dit fermé pour h si et seulement si x = h(x).
Définition 3 (Concept formel) Soit K = (G,M, I) un contexte formel. Un concept formel
est un couple (A,B) tel que A ⊆ G, B ⊆ M , A′ = B et B′ = A. A et B sont respecti-
vement appelés extension (extent) et intension (intent) du concept formel (A,B). On note
B(G,M, I) l’ensemble des concepts formels associés au contexte formel K = (G,M, I).
Un sous-ensemble B de M est l’intension d’un concept formel dans B(G,M, I) si et
seulement si B′′ = B (B est fermé pour l’opérateur ′′) et, de façon duale, un sous-ensemble
A de G est l’extension d’un concept formel dans B(G,M, I) si et seulement si A′′ = A
(A est fermé pour l’opérateur ′′). Les concepts de B(G,M, I) sont ordonnés par une relation
de subsomption entre concepts (notée v ) qui se définit par : (A1, B1) v (A2, B2) si et
seulement si A1 ⊆ A2 (ou de façon duale B2 ⊆ B1), (A1, B1) et (A2, B2) étant deux
concepts formels deB(G,M, I). (A2, B2) est dit subsumant de (A1, B1). Cette relation de
subsomption permet d’organiser les concepts formels en un treillis complet, (B(G,M, I),v),
appelé treillis de concepts ou encore treillis de Galois (Barbut et Monjardet, 1970), qui est noté
B(G,M, I). Rappelons pour finir qu’un treillis est un ensemble partiellement ordonné (E,≤)
tel que tout couple d’éléments (x, y) dans E × E admet une borne inférieure (ou infimum)
notée x ∨ y et une borne supérieure (ou supremum) notée x ∧ y. Le treillis est complet si
toute partie S de E admet une borne inférieure notée
∧
S et une borne supérieure notée
∨
S.
En particulier, un treillis complet admet un élément minimal (bottom) noté ⊥ et un élément
maximal (top) noté >.
3 Formalisation de l’algorithme BR-Explorer
Dans cette section nous formalisons l’algorithme BR-Explorer et nous définissons les no-
tions que nous avons utilisé lors de cette formalisation.
3.1 Définitions
Définition 4 (Requête) Une requête Q est un couple ({x},{x}′) où x est un objet virtuel et
{x}′ est un ensemble d’attributs décrivant les objets à chercher.
Dans la définition 4, nous supposons que l’objet virtuel x possède tous les attributs dans
{x}′ ({x}′ est l’image de {x} par l’opérateur de dérivation ′ défini dans la section 2).
Comme dans la majorité des algorithmes de recherche d’information par treillis (Godin
et al., 1995a; Carpineto et Romano, 2000), BR-Explorer effectue la recherche d’objets per-
tinents en insérant la requête Q = ({x},{x}′) dans le treillis de concept du contexte formel
considéré. Une telle insertion peut être considérée comme l’ajout d’une nouvelle entrée (un
BR-Explorer
nouvel objet et ses attributs) dans le contexte formel considéré. De cette façon, deux alterna-
tives sont possibles pour la construction du nouveau treillis de concepts : soit la reconstruction
à partir de zéro soit l’extension de façon incrémentale à partir du treillis déjà construit en uti-
lisant des algorithmes de construction incrémentale de treillis de concept comme l’algorithme
de Godin et al. (1995b) et l’algorithme AddIntent de Merwe et al. (2004). Dans ce travail nous
avons choisi d’utiliser la deuxième solution qui est plus efficace que la première.
Définition 5 (⊕) Pour un contexte formel K = (G,M, I) et une requête Q = ({x}, {x}′),
nous définissons l’opérateur d’addition ⊕ comme suit :
KQ = K⊕Q
= (G,M, I)⊕ ({x}, {x}′)
= (G ∪ {x},M ∪ {x}′, IQ)
= (GQ,MQ, IQ)
Définition 6 (Pivot) Considérons K = (G,M, I) un contexte formel et Q = ({x}, {x}′) une
requête. Le concept pivot dans le treillis de concept B(GQ,MQ, IQ) du contexte formel KQ
est le concept formel P = ({x}′′, {x}′).
Considérons l’ensemble de concepts formelsB(G,M, I) du contexte formelK = (G,M, I)
et considérons la requête Q= ({x},{x}′). Selon la relation entre l’ensemble {x}′ et les inten-
sions des concepts formels dansB(G,M, I), nous distinguons les cas suivants pour le concept
pivot P = ({x}′′,{x}′) dans le treillis de conceptsB(GQ,MQ, IQ) :
– S’il n’existe pas de concept C = (A,B) ∈ B(G,M, I) tel que {x}′ ⊆ B alors {x} et
{x}′ sont fermés dansGQ etMQ respectivement et {x}′′ = {x}. Cela signifie que l’ajout
de la nouvelle entrée dans le contexte formelK⊕Q produit au moins un nouveau concept
formel ({x},{x}′) = ({x}′′,{x}′). De plus, chaque concept formel C1 = (A1, B1) véri-
fiant B1 ⊆ {x}′ est transformé en C2 = (A1∪ {x},B1) dansB(GQ,MQ, IQ).
– S’il existe un concept C = (A,B) ∈ B(G,M, I) tel que {x}′ ⊆ B alors nous distin-
guons deux cas :
– Si {x}′ ⊂ B alors {x}′′ = A ∪ {x} et le concept pivot est P = (A ∪ {x},{x}′).
Cela signifie que l’objet virtuel x (la nouvelle entrée dans K ⊕ Q) est fusionnée
avec d’autres objets possédant les mêmes attributs. Comme dans le cas précédent,
l’opération K ⊕ Q produit la création d’au moins un nouveau concept formel dans
B(GQ,MQ, IQ) à savoir le concept pivot P = (A ∪ {x},{x}′). De plus, chaque
concept formel C1 = (A1, B1) vérifiant B1 ⊆ {x}′ est transformé en C2 = (A1∪
{x},B1) dansB(GQ,MQ, IQ).
– Si {x}′ = B alors {x}′′ = A ∪ {x} et le concept pivot est P = (A ∪ {x},{x}′) = (A
∪ {x},B). Toutefois, contrairement aux deux cas précédents, l’opération K ⊕ Q ne
produit aucun nouveau concept formel dans B(GQ,MQ, IQ). Elle transforme sim-
plement les concepts formels de la forme C1 = (A1, B1) tels que B1 ⊆ {x}′ en C2 =
(A1∪ {x},B1).
Définition 7 (couverture supérieure) (1) Considérons un contexte formel K = (G,M, I),
l’ensemble des ses concepts formels B(G,M, I) et le treillis de concepts B(G,M, I). La
couverture supérieure (abréviée en couverture-sup) d’un concept formel D ∈ B(G,M, I) est
N. Messai et al.
constituée des subsumants directs (appelés upperneighbors dans (Ganter et Wille, 1999)) de
D dansB(G,M, I) :
couverture−sup(D) = {C ∈ B(G,M, I) |D v C and @Z ∈ B(G,M, I) |D v Z v C}
(2) Étant donné un ensemble {Cj}j∈J (J étant un entier positif inférieur au nombre de
concepts formels dansB(G,M, I)) de concepts formels dansB(G,M, I), la couverture supé-
rieure de l’ensemble {Cj}j∈J est définie par l’union des couvertures supérieures des concepts
formels :
couverture−sup({Cj}j∈J) =
⋃
j∈J
couverture−sup(Cj)
Définition 8 (pertinence) (1) Considérons une entrée (un couple formé par un objet et l’en-
semble de ses attributs) ({a},{a}′) dans un contexte formel K = (G,M, I) et une requête Q =
({x},{x}′). l’objet a est pertinent pour la requête Q si et seulement si {a}′ ∩ {x}′ 6= Ø, i.e. il
existe au moins un attribut dans {x}′ qui est possédé par l’objet a.
(2) Le degré de pertinence de l’objet a par rapport à la requêteQ est donné par le nombre
d’attributs communs entre {a}′ et {x}′ i.e. |{a}′ ∩ {x}′|.
Proposition 1 Considérons un contexte formel K = (G,M, I) et une requête Q = ({x},{x}′).
Tous les objets dansG pertinents pourQ sont dans l’extension du concept pivotP = ({x}′′,{x}′)
et dans les extensions de ses subsumants dansB(GQ,MQ, IQ).
Preuve 1 Considérons d’abord les objets dans {x}′′, l’extension du concept pivot. Selon la
définition de P = ({x}′′,{x}′) (définition 6) et la définition de la pertinence (définition 8), tous
les objets dans {x}′′ sont pertinents pour Q = ({x},{x}′) puisqu’ils partagent tous les attributs
de la requête (l’ensemble {x}′).
Considérons maintenant le cas des subsumants du concept pivot P . Soit C = (A,B) un
subsumant de P dansB(GQ,MQ, IQ), i.e. P = ({x}′′,{x}′) v C = (A,B). Par définition de
la relation de subsomption "v" dans le treillis de concepts, B ⊆ {x}′. Ce qui signifie que tout
objet dans A possède au moins un attribut dans {x}′, d’où la pertinence pour Q.
Lorsque son intension est vide, le concept le plus général dans le treillis de concepts (top)
n’est pas considéré lors de l’identification des objets pertinents pour une requête. En effet dans
un tel cas, il peut exister des objets dans l’extension de top qui ne possèdent aucun attribut de
{x}′ et ne vérifient donc pas le critère de pertinence (définition 8).
3.2 L’algorithme BR-Explorer
Dans cette section nous détaillons l’algorithme de recherche d’information par treillis BR-
Explorer. Pour ce faire considérons un contexte formel K = (G,M, I), le treillis de concepts
qui lui correspondB(G,M, I) et une requête Q = ({x},{x}′).
Intuitivement BR-Explorer procède comme suit. D’abord la requête Q est insérée dans
le treillis B(G,M, I) (voir algorithme 1 ligne 1). Cette insertion produit un nouveau treillis
de concepts B(GQ,MQ, IQ) contenant le concept pivot P = ({x}′′,{x}′) (ligne 2 de l’al-
gorithme). Comme mentionné précédemment, les objets pertinents pour la requête sont dans
BR-Explorer
l’extension du concept pivot et des subsumants du concept pivot. Donc pour identifier ces ob-
jets, il suffit de commencer la recherche dans le treillis B(GQ,MQ, IQ) à partir du concept
pivot P et effectuer un parcours en largeur (vers le haut) du treillis jusqu’au concept le plus
général, >.
La localisation deP dansB(GQ,MQ, IQ) est détaillée dans la procédureLocaliser_Pivot.
L’idée de base de la procédure de recherche du concept pivot est l’élagage. La recherche de
P commence à partir du concept bottom, ⊥, et à chaque fois que l’intension B d’un concept
C = (A,B) ne vérifie pas {x}′ ⊆ B tous ses subsumants sont ignorés puisque eux aussi ne
vérifieront pas cette condition (car leurs intensions sont des parties de B).
Une fois le concept pivot localisé, nous procédons à la construction du résultat, notéRobjets
(ligne 8 et 18 dans l’algorithme BR-Explorer). On note par SUBSi l’ensemble de concepts
considérés à l’itération i de BR-Explorer. La première étape consiste à considérer l’extension
de P , le seul concept dans SUBS0, et à ajouter à Robjets les éventuels objets autres que x
dans cette extension avec un rang égal à 1 (lignes 3 à 10 de BR-Explorer). À l’étape suivante
nous considérons SUBS1 = couverture-sup(P ). L’ensemble des objets dans les extension
des concepts de SUBS1 qui ne figurent pas encore dans le résultat (objets émergeants) sont
ajoutés à Robjets avec leur rang correspondant (soit 1 si aucun objet n’a été ajouté au résultat
à l’étape précédente, soit 2 sinon) (lignes 11 à 21 de BR-Explorer). Le reste des étapes est
constitué des itérations sur SUBSi en effectuant le même traitement que sur SUBS1 jusqu’à
atteindre un ensemble SUBSi qui est vide, auquel cas BR-Explorer s’arrête et retourne le ré-
sultatRobjets obtenu. À chaque étape i, si le concept> appartient à SUBSi et si son intension
est vide alors les objets figurant dans son extension sont ignorés.
4 Déroulement de l’algorithme sur un exemple
Considérons le contexte formel K = (G,M, I) donné par le tableau 1. Le treillis de
G \M m1 m2 m3 m4 m5 m6
g1 × × × × ×
g2 × × × ×
g3 × × × ×
g4 × × × ×
g5 × ×
g6 × × ×
g7 × ×
TAB. 1 – Exemple de contexte formel K = (G,M, I).
conceptsB(G,M, I) correspondant au contexte formelK = (G,M, I) est donné par la figure
1 (faite par le logiciel ConExp 1 (Yevtushenko, 2000)). Cette représentation, dite réduite, des
treillis de concepts est la plus utilisée dans la communauté de l’analyse formelle de concepts.
Elle s’appuie sur l’héritage à la fois des attributs et des objets entre les nœuds représentant
les concepts du treillis. Les attributs sont placés au plus haut dans le treillis : à chaque fois
1http ://sourceforge.net/projects/conexp
N. Messai et al.
Algorithm 1 BR-Explorer
Require: K = (G,M, I),B(G,M, I) et Q = ({x},{x}′)
Ensure: Robjets
1: Insérer Q dansB(G,M, I)
2: P = ({x}′′,{x}′):= Localiser_Pivot(B(GQ,MQ, IQ), Q)
3: n := 1 \\ n est le niveau dans le treillis de conceptsB(GQ,MQ, IQ) à partir de P
4: SUBSn−1 := {P}
5: rang := 1
6: if {x}′′ 6= {x} then
7: Rrang := X ′′\X
8: Robjets := (rang,Rrang)
9: rang := rang + 1
10: end if
11: while SUBSn−1 6= Ø do
12: SUBSn := couverture− sup(SUBSn−1)
13: Rrang := Ø
14: for all C = (A,B) ∈ SUBSn tel que B 6= Ø do
15: Rrang := Rrang ∪A
16: end for
17: ObjetsEmergeants := Rrang\(X ∪R1,R2, ...,Rrang−1)
18: Robjets := Robjets ∪ (rang,ObjetsEmergeants)
19: n := n+ 1
20: rang := rang + 1
21: end while
Algorithm 2 Localiser_Pivot
Require: B(GQ,MQ, IQ) et Q = ({x},{x}′)
Ensure: P = ({x}′′,{x}′)
1: trouvé := faux
2: SUBS := ⊥ \\ ⊥ est le concept bottom dansB(GQ,MQ, IQ)
3: while trouvé = faux do
4: for tout C = (A,B) ∈ SUBS do
5: if {x}′ = B then
6: P := C
7: trouvé := vrai
8: break
9: else if {x}′ ⊂ B then
10: SUBS := couverture− sup(SUBS)
11: break
12: end if
13: end for
14: end while
BR-Explorer
FIG. 1 – Le treillis de conceptsB(G,M, I) correspondant au contexte formelK = (G,M, I).
qu’un nœud N est étiqueté par un attribut m, tous les descendants de N dans le treillis hé-
ritent l’attribut m. De façon duale, les objets sont placés au plus bas dans le treillis : à chaque
fois qu’un nœud N est étiqueté par un objet g tous ses ancêtres héritent vers le haut l’objet g.
Ainsi l’extension d’un concept C (correspondant à un nœud N dans le treillis) est obtenue en
considérant tous les objets qui apparaissent sur les descendants du nœud N dans le treillis et
l’intension de C est obtenue en considérant tous les attributs qui apparaissent sur les ancêtres
du nœud N dans le treillis.
Considérons la requêteQ = ({x},{x}′) avec {x}′ = {m3,m5,m6}. L’ajout deQ = ({x},{x}′)
au contexte formel K = (G,M, I) à l’aide de l’opérateur ‘` ⊕ ” produit le contexte formel
KQ = (GQ,MQ, IQ) = K ⊕ Q donné par le tableau 2. Le treillis de concept résultant de
G \M m1 m2 m3 m4 m5 m6
g1 × × × × ×
g2 × × × ×
g3 × × × ×
g4 × × × ×
g5 × ×
g6 × × ×
g7 × ×
x × × ×
TAB. 2 – Le contexte formel KQ = (GQ,MQ, IQ) = K⊕Q.
N. Messai et al.
l’insertion de Q dans le treillis B(G,M, I)), noté B(GQ,MQ, IQ), est donné par la figure 2.
Sur cette figure nous avons schématisé les étapes du déroulement de l’algorithme BR-Explorer
FIG. 2 – L’application de l’algorithme BR-Explorer sur le treillisB(GQ,MQ, IQ).
pour cet exemple. Les traitements effectués dans chacune de ces étapes sont respectivement les
suivantes :
1. Localisation du concept pivot P dans le treillisB(GQ,MQ, IQ) à l’aide de la procédure
Localiser_Pivot. Ici P = ({x, g1},{m3,m5,m6}) = SUBS0. {x}′′ = {x, g1} 6= {x}
(BR-Explorer ligne 6) donc nous ajoutons au résultat Robjets (vide) l’objet g1 avec un
rang égal à 1 et nous incrémentons le rang de 1 (BR-Explorer ligne 9).
2. Comme SUBS0 6= Ø (BR-Explorer ligne 11) nous calculons donc SUBS1 :
SUBS1 = couverture − sup(SUBS0) = {({g1,g2,g3,x},{m3,m5})}. Les objets qui
émergent à cette étape sont g2 et g3, qui sont ajoutés à Robjets avec un rang égal à 2
(BR-Explorer ligne 18) et le rang est incrémenté de 1.
3. Comme SUBS1 6= Ø, SUBS2 est calculé :
SUBS2 = {({g1,g2,g3,g4,x},{m3}), {g1,g2,g3,g5,x},{m5})}. Les objets qui émergent
sont g4 et g5 et sont ajoutés àRobjets au rang 3.
4. À cette étape, SUBS3 est formé du seul concept >, qui a une intension vide : il n’y a
donc pas d’objets retournés.
5. Cette étape correspond à l’arrêt de l’algorithme puisque SUBS4 = Ø. Le résultatRobjets
est retourné.
Finalement le résultat obtenu en réponse à la requête Q = ({x},{m3,m5,m6}) est :
BR-Explorer
1- g1 pour le partage des attributsm3,m5 etm6 avec Q
2- g2 pour le partage des attributsm3 etm5 avec Q
g3 pour le partage des attributsm3 etm5 avec Q
3- g4 pour le partage de l’attributm3 avec Q
g5 pour le partage de l’attributm5 avec Q
5 Correction et complétude de BR-Explorer
5.1 Correction
Définition 9 Étant donné un contexte formel K = (G,M, I) et une requête Q = ({x}, {x}′),
l’algorithme BR-Explorer est correct par rapport au critère de pertinence si tout objet retrouvé
par l’algorithme est pertinent pour la requête Q.
Proposition 2 L’algorithme BR-Explorer est correct par rapport au critère de pertinence
donné à la définition 8.
Preuve 2 Considérons une requête Q = ({x}, {x}′) et un objet g retrouvé par l’algorithme
BR-Explorer (g ∈ Robjets).
Selon la proposition 1, si g est retrouvé par BR-Explorer alors g appartient soit à l’exten-
sion du concept pivot P soit à l’une des extensions des concepts subsumants P dans le treillis
de concepts. Dans les deux cas, nous avons {g}′ ∩ {x}′ 6= Ø, ce qui prouve la pertinence de g
pour la requête Q (d’après la définition 8).
5.2 Complétude
Définition 10 L’algorithme BR-Explorer est complet par rapport au critère de pertinence si
tout objet de l’ensemble G pertinent pour Q est retrouvé par l’algorithme.
Proposition 3 L’algorithme BR-Explorer est complet par rapport au critère de pertinence
donné à la définition 8.
Preuve 3 Considérons une requête Q = ({x}, {x}′) et un objet g ∈ G pertinent pour Q.
Selon la définition de pertinence (définition 8), nous avons {g}′ ∩ {x}′ 6=Ø. Nous pouvons
distinguer les deux cas suivants :
– Si {g}′ ⊂ {x}′ alors il existeC = (A,B) ∈ B(GQ,MQ, IQ) tel queB = {g}′ et g ∈ A
(C = ({g}′′, {g}′) = (A, {g}′)). Cela signifie que C est un subsumant du concept
pivot P dans le treillis de conceptsB(GQ,MQ, IQ), et que g est dans l’extension de ce
subsumant de P . Selon la proposition 1, g est retrouvé par l’algorithme BR-Explorer.
– Si {x}′ ⊆ {g}′ alors {g}′′ ⊆ {x}′′. Et puisque g ∈ {g}′′ alors g ∈ {x}′′. Cela signifie
que l’objet g appartient à l’extension du concept pivot P = ({x}′′, {x}′). Selon la
proposition 1, g est retrouvé par l’algorithme BR-Explorer.
Les propositions 2 et 3 nous permettent d’énoncer le théorème suivant.
N. Messai et al.
Théorème 1 Étant donné un contexte formel K = (G,M, I) et une requête Q = ({x}, {x}′).
L’algorithme de recherche d’information par treillis BR-Explorer (algorithme 1) est correct et
complet par rapport au critère de pertinence donné à la définition 8.
Le théorème précédent précise que, pour un contexte formelK = (G,M, I) et une requête
Q = ({x},{x}′), si un objet g ∈ G possède un ensemble de propriétés {g}′ ⊆ M qui vérifie
{g}′ ∩ X ′ 6=Ø, alors g est pertinent pour la requête Q et g est retrouvé par l’algorithme BR-
Explorer.
6 Conclusion et perspectives
Nous avons détaillé, dans cet article, l’algorithme BR-Explorer de recherche d’information
par treillis BR-Explorer. Nous avons prouvé la correction et la complétude de cet algorithme
par rapport au critère de pertinence que nous avons défini. Ces preuves garantissent, étant
donnée une requête, de trouver tous les objets pertinents et uniquement les objets pertinents
pour cette requête dans le contexte considéré.
Nous avons appliqué l’algorithme BR-Explorer pour la recherche de sources de données
biologiques dans l’annuaire BioRegistry (Messai et al., 2005; Smail-Tabbone et al., 2005; Mes-
sai et al., 2006). Les objets du contexte formel considéré sont les sources de données biolo-
giques et les attributs sont l’ensemble des propriétés associées à ces sources. Ces propriétés
sont extraites,des experts biologistes, à partir des métadonnées qui annotent les sources et ap-
partiennent souvent à des ontologies de domaines ou à des vocabulaires contrôlés. BR-Explorer
peut aussi être réutilisé pour tout corpus décrit sous forme d’un contexte formel.
En perspectives à ce travail, nous proposons d’étendre la méthode pour traiter des contextes
plus complexes tels que les contextes flous (pondération des attributs), les contextes avec des
attributs complexes (à valeur dans des intervalles ou des domaines discrets) et de façon gé-
nérale les contextes multivalués. Une telle extension permettra d’améliorer la définition de la
pertinence en considérant par exemple les préférences des utilisateurs et les relation séman-
tiques qui peuvent exister entre les attributs.
Références
Barbut, M. et B. Monjardet (1970). Ordre et classification : Algèbre et combinatoire, Tome II.
Paris : Hachette.
Carpineto, C. et G. Romano (2000). Order-theoretical ranking. Journal of the American Society
for Information Science 51(7), 587–601.
Carpineto, C. et G. Romano (2004). Concept Data Analysis : Theory and Applications. John
Wiley & Sons.
Ganter, B. et R. Wille (1999). Formal Concept Analysis (Mathematical Foundations ed.).
Springer.
Godin, R., G. W. Mineau, R. Missaoui, et H. Mili (1995a). Méthodes de classification concep-
tuelle basées sur les treillis de Galois et applications. Revue d’intelligence artificielle 9(2),
105–137.
BR-Explorer
Godin, R., R. Missaoui, et H. Alaoui (1995b). Incremental Concept Formation Algorithms
Based on Galois (Concept) Lattices. Computational Intelligence 11, 246–267.
Merwe, D. V. D., S. A. Obiedkov, et D. G. Kourie (2004). AddIntent : A New Incremental
Algorithm for Constructing Concept Lattices. In P. W. Eklund (Ed.), ICFCA Concept Lat-
tices, Second International Conference on Formal Concept Analysis, ICFCA 2004, Sydney,
Australia, February 23-26, 2004, Proceedings, Volume 2961, pp. 372–385. Springer.
Messai, N., M.-D. Devignes, A. Napoli, et M. Smail-Tabbone (2005). Querying a bioinformatic
data sources registry with concept lattices. In G. S. F. Dau, M.-L. Mugnier (Ed.), ICCS’05,
LNAI, pp. 323–336. Springer-Verlag Berlin Heidelberg.
Messai, N., M.-D. Devignes, A. Napoli, et M. Smail-Tabbone (2006). Treillis de concepts
et ontologies pour interroger l’annuaire de sources de données biologiques BioRegistry.
Ingénierie des Systèmes d’Information : Systèmes d’information spécialisés 11(1), 39–60.
Smail-Tabbone, M., S. Osman, N. Messai, A. Napoli, et M.-D. Devignes (2005). Bioregis-
try : a structured metadata repository for bioinformatic databases. In The 1st International
Symposium on Computational Life Science, CompLife’05, Konstanz, Germany, September
25-27, 2005, Konstanz, Germany.
Yevtushenko, S. A. (2000). System of data analysis "Concept Explorer". In Proceedings of the
7th national conference on Artificial Intelligence KII-2000, Russia, pp. 127–134.
Summary
In this paper we present the BR-Explorer algorithm, a sound and complete information
retrieval algorithm, based on Formal Concept Analysis. The BR-Explorer algorithm addresses
the problem of retrieving the relevant objects for a given query. Initially, a formal context rep-
resenting the relation between a set of objects and the corresponding set of their attributes is
given, and the associated concept lattice is built. The BR-Explorer algorithm starts by gener-
ating a formal concept representing the considered query, and classifies this query concept in
the concept lattice. Then, the BR-Explorer tries to locate the so-called “pivot” concept in the
concept lattice, for building step by step the query result (considering the pivot superconcepts
in the concept lattice). Finally, the BR-Explorer algorithm returns a set of relevant objects
ranked with respect to their relevance with the query.
