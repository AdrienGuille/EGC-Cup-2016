Preservation of timed properties during an incremental
development by components
Jacques Julliand, Hassan Mountassir, Emilie Oudot
LIFC - Laboratoire d’Informatique de l’Université de Franche-Comté
16, route de Gray, 25030 Besançon Cedex, France
Ph:+33 (0)3 81 66 64 51, Fax:+33 (0)3 81 66 64 50
{julliand,mountass,oudot}@lifc.univ-fcomte.fr
Abstract. We are interested in the preservation of local properties of timed com-
ponents during their integration in a timed system. Timed components are mod-
eled as timed automata or timed automata with deadlines. Properties considered
are all safety and liveness properties which can be expressed with the timed
linear logic MITL (Metric Interval Linear Logic), as well as non-zenoness and
deadlock-freedom. Integration of components is a kind of incremental develop-
ment which consists in checking locally the properties of the components, before
integrating them in the complete system, using some composition operator. Of
course, established properties have to be preserved by this integration. Checking
preservation can be achieved by means of the verification of timed τ -simulation
relations. Composability, compatibility and compositionality of these relations
w.r.t. composition operators are properties which allow to reduce the cost of
this verification. We examine these properties when integration is achieved with
two different timed composition operators: the classic operator usually taken
for timed systems and which uses a CSP-like composition paradigm, and a non-
blocking operator closer to the CCS paradigm.
Key-words. τ -simulations, component-based timed systems, integration of com-
ponents, preservation of timed linear properties.
1 Introduction
Incremental development methods are a way to cope with the state space explosion prob-
lem of model-checking, which is increased in the case of timed systems due to the presence
of timing constraints. In particular, for component-based systems, a way to develop incre-
mentally is to use integration of components. This method is indicated for the verification of
local properties of the components. It consists in checking the properties in isolation on the
component before integrating it in its environment, with some parallel composition operator.
Model-checking is there still applicable since the size of the components is generally small
enough. Of course, this method is valid only if established properties of the component still
hold after integration.
Preservation of timed properties during an incremental development by components
In Bellegarde et al. (2005), we defined two τ -simulation relations, adapted to timed sys-
tems, with preservation abilities: a timed τ -simulation preserving safety properties, and a
divergence-sensitive and stability-respecting (DS) timed τ -simulation which preserves all prop-
erties which can be expressed in the linear timed logic MITL (Metric Interval Temporal Logic)
(Alur et al., 1996), strong non-zenoness and deadlock-freedom.
Properties such as composability, compatibility and compositionality of the simulation rela-
tions are essential properties for integration of components. Consider components A, B, C
and D. Composability is a major property since it expresses that a component A simulates its
composition with another component. The direct consequence is that properties of A (which
are preserved by the simulation) are automatically preserved by composition. It is thus clearly
essential for integration of components, or for the reuse of a component. Given some compo-
sition operator ‖, compatibility states that if A simulatesB (and thus, properties ofA also hold
on B) then A‖C simulates B‖C. During development, it is beneficial for instance in the case
of the replacement in a system of the component A by the component B. Compositionality
is a consequence of compatibility since it expresses that if A simulates B and C simulates D
then, A‖C simulates B‖D.
Therefore, in this paper, we study if the simulations we defined in Bellegarde et al. (2005)
allow to benefit of these properties, in particular when integration is achieved with one of the
two following operators: the classic parallel composition operator used for timed systems and
a non-blocking operator defined in Bornot et al. (1997). The first operator uses a composition
paradigm a la CSP (Hoare, 1985). The second one is closer to the paradigm of CCS (Milner,
1989) and uses a notion of priorities between actions to favour synchronizations. This analysis
shows that the timed τ -simulation is well-adapted to both operators, since we benefit of the
three properties without any assumptions. The DS timed τ -simulation is appropriate in the
case of the non-blocking operator, on some conditions. This study of the properties of the
simulations with respect to these composition operators is the contribution of the paper.
The structure of the paper is the following. In section 2, we recall some background on timed
systems. We present timed automata which is the formalism we use to model timed systems
and the two composition operators we consider for these automata. Section 3 recalls the simu-
lation relations we defined for timed systems in Bellegarde et al. (2005), and their preservation
abilities. Section 4 presents the contributions of this paper. We study whether the simulations
have the composability, compatibility and compositionality properties w.r.t. the two compo-
sition operators. Finally, section 5 presents a synthesis of the results obtained, as well as the
consequences in terms of preservation during integration, and plans some future works.
2 Preliminary definitions
In this section, we recall some background on the models we consider for timed systems,
i.e., timed automata and timed automata with deadlines. We also present the two operators that
we consider in this work for their composition.
2.1 Timed automata
Timed automata were introduced in Alur and Dill (1994). They are finite automata with
real-valued variables, called clocks, which model the time elapsing.
Jacques Julliand et al.
Clock valuations and clock constraints. Let X be a set of clocks. A clock valuation overX
is a function v : X → R+ mapping to each clock inX a value in R+. Let v be a valuation over
X and t ∈ R+, the valuation v + t is obtained by adding t to the value of each clock. Given
Y ⊆ X , the reset in v of the clocks in Y , written [Y := 0]v is the valuation obtained from v
by setting to zero all clocks in Y , and leaving the values of other clocks (∈ X\Y ) unchanged.
The set Cdf (X) of diagonal-free clock constraints overX is defined as follows:
g ::= x ∼ c | g ∧ g | true where x ∈ X , c ∈ N, and ∼∈ {<,≤,=,≥, >}.
A valuation v overX satisfies a constraint x ∼ c, written v ∈ x ∼ c, if v(x) ∼ c.
Syntax. A timed automaton (TA) is tuple A =〈Q, q0,Σ,X, T, Invar〉, where Q is a finite set
of locations, q0 is the initial location, Σ is an alphabet of names of actions andX is a finite set
of clocks. Invar is a function mapping a clock constraint to each location, called its invariant.
Each edge of a TA is a tuple e = (q, g, a, r, q′) where q and q′ are respectively its source and
target location, g is its guard, a is its label and r is a set of clocks to be reset by the edge.
Semantics. The semantics of a TA A is an infinite graph which states are pairs (q, v) where q
is a location ofA and v is a valuation overX s.t. v ∈ Invar(q). Transitions are either discrete
transitions or time transitions. Consider a state (q, v). Given an edge e = (q, g, a, r, q′) of A,
(q, v)
a
→ (q′, [r := 0]v) is a discrete transition if v ∈ g. Given t ∈ R+, time transitions have
the form (q, v) t→ (q, v + t). Given a state s = (q, v), s+ t denotes the pair (q, v + t). A run
of a TA is a path of its semantic graph. A run is said non-zeno if time can diverge along the
run. A TA is said strongly non-zeno if all its runs are non-zeno.
A variant: timed automata with deadlines. Timed automata with deadlines (TAD) are a
variant of TA introduced in Sifakis and Yovine (1996). The main difference lies in the fact
that time-progress conditions are not given as invariants in locations, but are associated as
deadlines with the edges. The deadline represents the moment when time can not progress any
more before taking the edge. Formally, the syntax of TAD is the same as the one of TA, with
no invariants. Edges are tuples (q, g, d, a, r, q′) where q, g, a, r and q′ are defined as for TA
and d is a clock constraint representing the deadline.
2.2 Timed parallel composition operators
We consider two composition operators which take into account the timing constraints
of the components. The first one, which is the classic operator for TA, uses a composition
paradigm close to the one of CSP. The second, which we call non-blocking parallel compo-
sition operator, is closer to the paradigm of CCS and uses a notion of priorities between actions.
Classic parallel composition operator. This composition operator, written ‖, operates be-
tween TA with disjoint sets of clocks. Intuitively, it is defined as a synchronized product,
where actions with the same label synchronize, other actions interleave and time elapses syn-
chronously between the components. Formally, consider two TA A =〈QA, q0A ,ΣA,XA, TA,
InvarA〉 and B =〈QB, q0B ,ΣB,XB, TB , InvarB〉, such that XA ∩ XB = ∅. The classic
parallel composition ofA andB, writtenA‖B, results in a TA which set of clocks isXA∪XB
and which labels are in ΣA ∪ ΣB . The set Q of locations is a subset of QA ×QB . The initial
location is the pair (q0A , q0B ). The invariant of a location (qA, qB) is Invar(qA)∧Invar(qB).
Edges in one TA which label is not the label of any edge in the other TA is an interleaving edge
Preservation of timed properties during an incremental development by components
in the composition and is still defined with the same guard, label and reset. Synchronized edges
are obtained by the following rule:
(qA, qB) ∈ Q, (qA, gA, a, rA, q
′
A
) ∈ TA ,
(qB , gB , a, rB , q
′
B
) ∈ TB
((qA, qB), gA ∧ gB , a, rA ∪ rB , (q
′
A
, q′
B
)) ∈ T
The main drawback of this operator is that deadlocks are generally introduced during com-
position. For this reason, other operators have been defined, such as the following one.
Non-blocking parallel composition operator. This operator was introduced in Bornot et al.
(1997) to operate between TAD with disjoint alphabets and sets of clocks. It is defined as
a product in which all actions interleave and time elapses synchronously between compo-
nents. Some actions synchronize, according to a synchronization function p: ΣA × ΣB →
Σsync ∪ {⊥}, where Σsync is an alphabet disjoint from ΣA and ΣB . The function maps to
each pair of labels (a, b) the label in Σsync of the action resulting of the synchronization of
two actions a and b, or the special symbol ⊥ if the two actions do not synchronize. Since all
actions interleave, priorities are used to favour synchronized actions rather than interleaving.
Different synchronization modes can be used. The AND mode is the classic one. The MIN
mode corresponds to a synchronization with interruption, i.e., the first enabled action causes
the synchronization even if the other one is not yet enabled. Finally, the MAX mode is a syn-
chronization with waiting, i.e., the first enabled action waits for the other to be enabled for
synchronization to occur.
3 Timed τ -simulations to preserve properties
In Bellegarde et al. (2005), we defined two kinds of simulation relations for timed automata.
The first one, called timed τ -simulation, preserves safety properties. The second one, called
divergence-sensitive and stability-respecting (DS) timed τ -simulation, preserves all properties
expressed with the timed linear logic MITL (Metric Interval Temporal Logic), strong non-
zenoness and deadlock-freedom.
Consider two TA A andB with respective alphabetsΣA and ΣB , s.t. ΣA ⊆ ΣB . In B, actions
in ΣB\ΣA are called non-observable and renamed by τ . Other actions, in ΣA, are called
observable. In the sequel, we focus directly on the definition of the DS timed τ -simulation
Sds. The definition of the timed τ -simulation, written S, can be obtained by removing the
clauses divergence-sensitivity and stability-respect. The predicate free (Tripakis, 1998), used
in Definition 1, is defined as follows. Given a location q, free(q) is the set of all valuations (of
states with q as discrete part) from which a discrete transition can be taken after some delay.
Definition 1 (Divergence-sensitive and stability-respecting (DS) timed τ -simulation Sds) Let
A =〈QA, q0A ,ΣA,XA,TA, InvarA〉 andB =〈QB , q0B ,ΣA ∪{τ},XB,TB, InvarB〉 be two
TA s.t. XA ⊆ XB . We call SA and SB the respective set of states of A and B. The DS timed
τ -simulation Sds is the greatest binary relation included in SB×SA. Consider sA = (qA, vA)
in SA and sB = (qB , vB) in SB . We say that sBSdssA if:
1. Strict simulation: sB a→ s′B ∧ a ∈ ΣA ⇒ ∃s′A · (sA
a
→ s′A ∧ s
′
B Sds s
′
A).
2. Delays equality: sB t→ sB + t ⇒ sA t→ sA + t ∧ sB + t Sds sA + t.
Jacques Julliand et al.
3. τ -transitions stuttering: sB τ→ s′B ⇒ s′B Sds sA.
4. Divergence-sensitivity: B does not contain any non-zeno τ -cycles.
5. Stability-respect: vB 6∈ free(qB)⇒ vA 6∈ free(qA).
Given two TA A and B, and their respective initial state s0A and s0B , we say that A
simulates B w.r.t. Sds written B Sds A if s0BSdss0A .
4 Properties of timed τ -simulations w.r.t. timed parallel com-
position
It seems interesting to avoid a systematic verification of the relations to ensure preserva-
tion during an incremental development. For this purpose, composability, compatibility and
compositionality of the relations w.r.t. the composition operators used for integration of com-
ponents are essential properties. Thus, in this section, we study these three properties for the
timed τ -simulation and the DS one w.r.t. the two operators presented in section 2.2. In the
sequel, we use the following notations. Given a TA A, we note SA its set of states and ΣA
its alphabet. A state of A is simply written sA or s′A, which respectively represent the pairs
(qA, vA) and (q′A, v′A). The initial state of A is written s0A .
4.1 Classic parallel composition
We first examine the properties with the timed τ -simulation.
Proposition 1 (Composability) Let A and B be TA. We have: A‖B S A.
PROOF. By construction ofA‖B, its initial state is the pair (s0A , s0B ). To prove thatA‖B S
A, it is enough to prove that (s0A , s0B )Ss0A . By definition,S is the greatest relation included
in SA‖B×SA which satisfies clauses 1 to 3 of Definition 1. Thus, each relationR ⊆ SA‖B×SA
which satisfies these clauses is included in S . Consider a relation R ⊆ SA‖B × SA such that
∀(sA, sB) ∈ SA‖B , (sA, sB)R s
′
A if sA = s′A. Consider ((sA, sB), sA) ∈ R.
1. Strict simulation: let (sA, sB)
a
→ (s′A, s
′
B) in A‖B such that a ∈ ΣA. By construction
of A‖B, a transition sA
a
→ s′A exists in A. By definition of R, (s′A, s′B)R s′A and R
satisfies the strict simulation.
2. Delays equality: same arguments than those for strict simulation can be used.
3. τ -transitions stuttering: consider a transition (sA, sB)
τ
→ (s′A, s
′
B) in A‖B. Recall that
τ -transitions represent non-observable actions initially labelled inΣB\ΣA. By construc-
tion of A‖B, s′A = sA. Thus, (sA, s′B)R sA and R satisfies τ -transitions stuttering.

Proposition 2 (Compatibility) Let A, B and C be TA. If A S B then A‖C S B‖C.
PROOF. The structure of the proof is similar to the previous one. A complete version can be
found in Julliand et al. (2007). 
Preservation of timed properties during an incremental development by components
Proposition 3 (Compositionality) Let A, B, C and D be TA. If A S B and C S D then
A‖C S B‖D.
PROOF. Immediate with Proposition 2. Since A S B, then A‖C S B‖C. Since C S D,
then B‖C S B‖D. By transitivity of the relation S , we have A‖C S B‖D. 
The timed τ -simulation allows to benefit of the three properties for free. This is not the
case for the DS timed τ -simulation. Indeed, the operator ‖ is known to introduce deadlocks
during composition, which prevents the clause stability-respect of the DS timed τ -simulation
from being established. However, this simulation allows to get the properties when using the
non-blocking parallel composition operator, on some simple conditions.
4.2 Non-blocking parallel composition
First note that the non-blocking parallel composition operates between TAD. Thus, in this
section, we extend the notationsS andSds , initially defined for TA, to TAD. This extension
does not matter since the simulations are defined at a semantic level and that the semantics of
TAD is given by an infinite graph of the same kind than for TA.
Consider two TADA andA′, and suppose thatA′ is obtained fromA by integration of compo-
nents using the non-blocking parallel composition operator, i.e., A′ = A|B for some automa-
tonB. For a TADA to simulates a TADA′, we imposed in the definition of the simulation that
ΣA ⊆ ΣA′ . Moreover, we suppose that observable actions in A′ (and, in particular, synchro-
nized actions) have the same label than inA. Therefore, without loss of generality, we consider
here that the synchronization function of the operator | is defined by p: ΣA×ΣB → ΣA ∪{⊥}
such that, given a ∈ ΣA and b ∈ ΣB , a p b = a if the two actions synchronize. In other words,
the label of the synchronized action is the same than the one of the action of A which takes
part in the synchronization.
We focus directly on the DS timed τ -simulation, and on the most used synchronizationmode of
the operator, the AND one. First, the following result is necessary for composability. Complete
proofs for the following propositions can be found in Julliand et al. (2007).
Proposition 4 (Non τ -divergence preservation) Let A and B be TAD. Actions in ΣB\ΣA
are renamed by τ . If B does not contain any non-zeno τ -cycles, then A|B does not contain
any non-zeno τ -cycles.
Proposition 5 (Composability) Let A and B be TAD. Actions in ΣB\ΣA are renamed by τ
in B. If B does not contain any non-zeno τ -cycles, we have: A|B Sds A.
PROOF. This proposition can be proved using the same method than for proposition 1. The
proof for stability-respect is immediate by definition of | and the fact that this operator does
not introduce deadlocks, due to a total interleaving of all the actions. Divergence-sensitivity is
ensured since τ -transitions ofA|C are labelled with actions inΣB\ΣA and sinceA Sds B.
Proposition 6 (Compatibility) Let A, B and C be TAD. If A Sds B then A|C Sds B|C.
PROOF. Similar arguments than in the proof of proposition 2 apply for clauses 1 to 3. The
proof for divergence-sensitivity and stability-respect is immediate as in proposition 5. 
Jacques Julliand et al.
Classic parallel Non-blocking parallel composition
composition AND / MIN MAX
Properties preserved MITL, deadlock-freedom,
during integration safety strong non-zenoness none
of components (hyp. div. 1 and 2)
TAB. 1 – Synthesis on the preservation of properties during integration of components
Proposition 7 (Compositionality) Let A, B, C and D be TA. The internal actions of A|C
(i.e. in (ΣA ∪ ΣC)\(ΣB ∪ ΣD)) are renamed by τ . If A Sds B, C Sds D and A|C does
not contain any non-zeno τ -cycles then A|C Sds B|D.
PROOF. Immediate with proposition 6. 
Remark 1 (MIN and MAX modes) Recall that the MIN synchronization mode corresponds
to a synchronization with interruption. As for the AND mode, this paradigm is taken into ac-
count by strengthening the guard of the synchronized action, which implies that the concerned
clauses (strict simulation and delays equality) hold. Therefore, propositions 5 to 7 also hold
when using the MIN mode. The MAX synchronization mode corresponds to a synchronization
with waiting, which means that when one action in the synchronization is enabled, it waits for
the other to be enabled to synchronize. It follows immediatly that the propositions do not hold.
For instance, composability does not hold since synchronized actions (which are observable
actions) can be taken later in A|B than they were in A. Similar arguments can be given for
compatibility and compositionality.
Remark 2 (Timed τ -simulation and |) We focused on the DS timed τ -simulation. The propo-
sitions also hold, without assumptions, in the case of timed τ -simulation, when using AND and
MIN modes. Indeed, the DS timed τ -simulation is obtained from the timed τ -simulation by
adding divergence-sensitivity and stability-respect. As the three properties hold for the DS
timed τ -simulation (modulo assumptions for divergence-sensitivity in the case of composabil-
ity and compositionality), they also hold for the timed τ -simulation.
4.3 Synthesis
TAB. 1 gives an interpretation of these results in terms of properties preserved during an
integration of components. The abbreviations hyp. div. 1 and hyp. div. 2 represent respectively
the assumptions in propositions 5 and 7 for divergence-sensitivity.
5 Conclusion and Future works
In previous works, we defined τ -simulation relations for timed systems, with preservation
abilities. Checking these relations is a way to guarantee the preservation of properties during
incremental development of timed systems, in particular during integration of components.
However, we wish to avoid the verification of the simulations, while still benefiting of their
Preservation of timed properties during an incremental development by components
preservation abilities. For this purpose, in this paper, we studied the properties of composabil-
ity, compatibility and compositionality of the relations w.r.t. two composition operators for
timed systems: the classic operator, and a non-blocking one with three different synchroniza-
tion modes. It turns out that the properties hold for the timed τ -simulation with both operators
(except when using the MAX synchronization mode with the non-blocking one). This means
that the preservation of safety properties is ensured for free when using these operators for in-
tegration of components. The divergence-sensitive and stability-respecting timed τ -simulation
has the properties only with the non-blocking operator (except with the MAX mode), on some
conditions for divergence-sensitivity. Thus, MITL properties, deadlock-freedom and strong
non-zenoness, are preserved (on the conditions expressed) during integration of components
with this operator. This is not the case when using the classic operator. The reason is that this
operator does not prevent from introducing deadlocks during composition, which makes the
stability-respecting part of the simulation not guaranteed during integration of components.
References
Alur, R. and D. Dill (1994). A theory of timed automata. Theoretical Computer Science 126(2),
183–235.
Alur, R., T. Feder, and T. Henzinger (1996). The benefits of relaxing punctuality. Journal of
the ACM 43, 116–146.
Bellegarde, F., J. Julliand, H. Mountassir, and E. Oudot (2005). On the contribution of a τ -
simulation in the incremental modeling of timed systems. In Proc. of FACS’05, Volume 160
of ENTCS, Macao, Macao, pp. 97–111. Elsevier.
Bornot, S., J. Sifakis, and S. Tripakis (1997). Modeling Urgency in Timed Systems. In COM-
POS’97, Volume 1536 of LNCS. Springer-Verlag.
Hoare, C. (1985). Communicating Sequential Processes. Prentice Hall.
Julliand, J., H. Mountassir, and E. Oudot (2007). Composability, compatibility, composition-
ality: automatic preservation of timed properties during incremental development. Research
Report RR2007-01, LIFC, Laboratoire d’Informatique de l’Université de Franche-Comté.
Milner, R. (1989). Communication and Concurrency. Prentice Hall.
Sifakis, J. and S. Yovine (1996). Compositional Specification of Timed Systems. In Proc. of
STACS’96 - Invited Paper, Volume 1046 of LNCS, pp. 347–359.
Tripakis, S. (1998). The analysis of timed systems in practice. Ph. D. thesis, Universite Joseph
Fourier, Grenoble, France.
