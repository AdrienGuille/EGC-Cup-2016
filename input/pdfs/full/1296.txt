A C-space sensitivity analysis of Earliest Deadline First
scheduling
Jean-François Hermant∗ and Laurent George∗
∗ECE/LACSC
53 rue de Grenelle
75007 Paris, France
{hermant, lgeorge}@ieee.org
Abstract. This paper presents a sensitivity analysis for the dimensioning of
real-time systems in which sporadic tasks are executed according to the preemp-
tive Earliest Deadline First (EDF) scheduling policy. The timeliness constraints
of the tasks are expressed in terms of late termination deadlines. A general case
is considered, where the task deadlines are independent of the task sporadicity
intervals (also called periods). New results for EDF are shown, which enable us
to determine the C-space feasibility domain, such that any task set with its worst-
case execution times in the C-space domain is feasible with EDF. We show that
the C-space domain is convex, a property that can be used to reduce the number
of inequalities characterizing the C-space domain.
1 Introduction
This paper considers the problem of correctly dimensioning real-time systems. The correct
dimensioning of a real-time system strongly depends on the determination of the task Worst-
Case Execution Times (WCETs). Based on the WCETs, a Feasibility Condition (FC) (1),
(10), (5) can be established to ensure that the timeliness constraints of all the tasks are always
met, regardless of their release times, when they are scheduled by either a fixed or a dynamic
priority-driven preemptive scheduling algorithm. The timeliness constraints are expressed in
terms of late termination deadlines imposed on the completion times of the tasks. The task
model is the classical sporadic model. A sporadic task set τ = {τ1, ..., τn} is composed of n
sporadic tasks, where a sporadic task τi is defined by:
• xi: its worst-case execution time (WCET).
• Ti: its minimum inter-arrival time (also called, by extension, the period).
• Di: its relative deadline (a task released at time t must be executed by its absolute
deadline t+Di).
In the sequel, we assume the general case where deadlines and periods are independent.
A C-space sensitivity analysis of Earliest Deadline First scheduling
A recent research area called sensitivity analysis aims at providing interesting information on
the feasibility of a system when changing task WCETs, task periods (4), or task deadlines
(9). This permits, for example, finding a feasible task set, if the current one is not feasible, by
modifying the task parameters (WCETs, periods, or deadlines) or determining the impact of
an architecture change on the feasibility of a task set (WCET change). In this paper, we are
interested in the sensitivity on WCETs. We want to determine the C-space feasibility domain
as defined by Bini and Buttazzo (3) when tasks are scheduled with non preemptive Earliest
Deadline First. The C-space is a region of n dimensions where each dimension denotes the
WCET of a task such that for any vectorX = {x1, . . . , xn} in the C-space, task set τ is feasi-
ble.
In the case of Fixed Priority scheduling, when deadlines are less than or equal to periods, Bini
and Di Natale (4) have shown how to compute the maximum expansion factor α applied to
all the WCETs of the tasks to remain in the C-space at a reasonable cost (see Section 3), such
that ∀τi ∈ τ , i = 1 . . . n, the WCET of τi is αxi. They finally propose a parametric equa-
tion of the C-space, detailed in Section 3. In the general case, when deadlines and periods
are independent, α can be computed by successive iterations, where each iteration requires a
pseudo-polynomial time complexity. In this paper, we show how to derive from an analysis of
EDF in a time interval [min(D1, . . . , Dn), lcm(T1, . . . , Tn)) the C-space region parametric
equation.
The rest of the paper is organized as follows. Section 2 reviews classical concepts for unipro-
cessor scheduling. Section 3 presents the state of the art in real-time scheduling with a focus on
Fixed Priority (FP) scheduling sensitivity analysis and EDF scheduling. In Section 4, we intro-
duce new results on EDF scheduling that can be useful for a sensitivity analysis of the WCETs.
We then establish the C-space feasibility region parametric equations. In Section 5, we show
in an example how to determine the C-space domain. Finally, we give some conclusion.
2 Concepts and notations
We recall classical results in the uniprocessor context for real-time scheduling.
• A task is said to be non-concrete if its request time is not known in advance. In this
paper, we only consider non-concrete request times, since the activation request times
are supposed to be unpredictable.
• Given a non-concrete task set, the synchronous scenario corresponds to the scenario
where all the tasks are released at the same time.
• EDF is the preemptive version of Earliest Deadline First non-idling scheduling. EDF
schedules tasks according to their absolute deadlines: the task with the shortest absolute
deadline has the highest priority. Ties are broken arbitrarily.
• FP is a preemptive Fixed-Priority scheduling according to an arbitrary priority assign-
ment.
• For FP, hp(i) denotes the subset of tasks with a priority higher than or equal to that of τi
except τi.
Hermant et al.
• A task set is said to be valid with a given scheduling policy if and only if no task occur-
rence ever misses its absolute deadline with this scheduling policy.
• U =∑ni=1 xiTi is the processor utilization factor, i.e., the fraction of processor time spent
in the execution of the task set (8). If U > 1, then no scheduling algorithm can meet the
task deadlines.
• Wi(t) = xi +
∑
τj∈hp(i)
⌈
t
Tj
⌉
xi.
• W (t) =∑nj=1 ⌈ tTj ⌉xj .
• The processor demand h(t) is the amount of processing time requested by all tasks,
whose release times and absolute deadlines are in time interval [0, t] in the synchronous
scenario (1), where bxc returns the integer part of x. We have for a given task set τ :
h(t) =
∑n
j=1 hj(t)xj where hj(t) =Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
• Dmin is the minimum deadline (Dmin =Min{D1, . . . , Dn}).
• P is the least common multiple of the task periods (P = LCM{T1, . . . , Tn}).
• The synchronous scenario corresponds to the scenario where all the tasks are released at
the same time (at time 0).
3 State of the art
For Fixed-Priority (FP) scheduling, necessary and sufficient FCs have been proposed, based on
the computation of the task worst-case response times (6), (10). The worst-case response time
is obtained in the worst-case synchronous scenario and is computed by successive iterations. A
task set is then declared feasible if the worst-case response time of any task in the synchronous
scenario is less than or equal to its deadline.
In the case of deadlines less than or equal to periods for all tasks, the worst-case response time
ri of a task τi is obtained in the synchronous scenario for the first release of τi at time 0 and is
the solution of the equation (6) ri = Wi(ri). ri is computed by successive iterations and the
number of iterations is bounded by 1 +
∑
τj∈hp(i)
⌊
Di
Tj
⌋
. The FC has been revisited by Bini
and Buttazzo (3), who show that a necessary and sufficient feasibility condition for a task set
is: ∃t ∈ S, such thatWi(t)/t ≤ 1, where S = ∪τj∈hp(i){kTj, k ∈ N} ∩ [0, Di]. For any task
τi, the times to check correspond to the arrival times of the tasks of higher priority than τi in
time interval [0, Di]. This feasibility has been improved by Bini and Buttazzo (3), who show
how to reduce S. For any task τi, they show how to significantly reduce the number of times
to check in time interval [0, Di] to at most 2i−1 times instead of 1 +
∑
τj∈hp(i)
⌊
Di
Tj
⌋
times.
The C-space can be obtained at an acceptable complexity for a reasonable number of tasks
and can be used for a sensitivity analysis. This result can be used to determine the C-space
(n dimensions) feasibility region for the WCETs of a sporadic task set such that any vector
X = {x1, . . . , xn} of WCETs in the C-space region leads to a feasible task set. The C-space
region is then defined as follows:
A C-space sensitivity analysis of Earliest Deadline First scheduling
Theorem 1. (3) Let τ = τ1, . . . , τn be a set of periodic taks indexed by decreasing priorities.
The C-space region when ∀i,Di ≤ Ti is defined as the region such that ∀X = {x1, . . . , xn} ∈
R+n:
∀i = 1 . . . n, ∃t ∈ Pi−1(Di), xi +
∑i−1
j=1
⌈
t
Tj
⌉
xj where Pi(t) is defined by the recurrent
equation:{ P0(t) = t
Pi(t) = Pi−1(
⌊
t
Ti
⌋
Ti) ∪ Pi− 1(t)
When deadlines and periods are independent, Tindell et al. (10) show that the worst-case
response time of a sporadic task τi is not necessarily obtained for the first activation request
of τi at time 0. The number of activations to consider is 1 +
⌊
Li
Ti
⌋
, where Li is the length of
the worst-case level-τi busy period defined by Lehoczky (7) as the longest period of processor
activity running tasks of priority higher than or equal to τi in the synchronous scenario. It can
be shown that Li =
∑
τj∈hp(i)∪τi
⌈
Li
Tj
⌉
xj . From its definition, Li is bounded by U.P (5).
In that case, the complexity depends on Li leading to a pseudo-polynomial time complexity.
In such a context, the characterization of the C-space might be very costly. α is computed by
iterations, but the computation becomes more and more costly. Indeed, when α increases, the
length of the level-τi busy period tends towards P as the load utilization tends towards 1. As
a conclusion for FP scheduling, sensitivity analysis can be proposed in the case of deadlines
less than or equal to periods but not in the general case, because increasing the task WCETs
requires the recomputation of the lengths of the busy periods which tend towards P , a poten-
tially exponential length.
For EDF scheduling, Baruah et al. (1) show that a necessary and sufficient feasibility condition
is ∀t ∈ [0, L), h(t) ≤ t, where L is the length of the first busy period in the synchronous
scenario. When U ≤ 1, L can be computed by successive iterations and is a solution of
L = W (L). With this feasibility test, we have the same drawback as with FP in the general
case of independent periods and deadlines, as the value of L increases and tends towards P
when we compute α by increasing iterations.
We notice that, in both approaches, the dimensioning strongly depends on the values of the task
WCETs. We now introduce new results for EDF to determine the C-space feasibility domain.
4 Sensitivity analysis for EDF
This section is divided into two subsections. In Section 4.1, we revisit the classical feasibility
condition for EDF based on processor demand and establish new results for the feasibility of a
sporadic task set scheduled with EDF. In Section 4.2, we show how to determine the C-space
feasibility domain. The C-space region is expressed with parametric equation.
4.1 Revisiting the feasibility condition for EDF
The following lemma is an adaption of (1):
Lemma 1. Let τ be a task set. τ feasible with preemptive EDF⇔
Supt∈R+∗
{
h(t)
t
}
≤ 1.
Hermant et al.
Proof. The necessary and sufficient feasibility condition for EDF is as follows: Task set τ
is feasible with preemptive EDF if and only if ∀t ∈ R+, h(t) ≤ t, which is equivalent to
Supt∈R+∗
{
h(t)
t
}
≤ 1. The condition U ≤ 1 is clearly necessary as Supt∈R+∗
{
h(t)
t
}
≤ 1⇒
U ≤ 1. Indeed, limt→∞
(
Supt∈R+∗
{
h(t)
t
})
= U
We now prove the following theorem, showing how to compute Supt∈R+∗
{
h(t)
t
}
:
Theorem 2. Supt∈R+∗
{
h(t)
t
}
=Max
{
U, Supt∈[Dmin,P )
{
h(t)
t
}}
.
Proof. 1 ♦ Firstly, we show that: Max
{
U, Supt∈[Dmin,P )
{
h(t)
t
}}
≤
Supt∈R+∗
{
h(t)
t
}
.
By definition, we have: limt→+∞
{
h(t)
t
}
≤ Supt∈R+∗
{
h(t)
t
}
, i.e.
U ≤ Supt∈R+∗
{
h(t)
t
}
.
Furthermore, we have: Supt∈[Dmin,P )
{
h(t)
t
}
≤ Supt∈R+∗
{
h(t)
t
}
.
It follows that: Max
{
U, Supt∈[Dmin,P )
{
h(t)
t
}}
≤ Supt∈R+∗
{
h(t)
t
}
.
2 ♦ Secondly, we show that: Supt∈R+∗
{
h(t)
t
}
≤
Max
{
U, Supt∈[Dmin,P )
{
h(t)
t
}}
.
Given that h(t) returns 0 for all t ∈ [0, Dmin), we have: ∀t ∈ [0, P ), h(t) ≤ Supt∈[Dmin,P )
{
h(t)
t
}
×
t.
Furthermore, we have: ∀(t1, t2) ∈ R+ ×R+, t2 ≥ t1, h(t2, A)− h(t1, A) ≤W (t2 − t1, A).
Consequently, for all (t, k) ∈ [0, P ) × N, we have: h(t+kP,A)t+kP ≤ h(t)+W (kP,A)t+kP .
Hence, h(t+kP,A)t+kP ≤
Supt∈[Dmin,P ){h(t,A)t } t
t+kP +
U kP
t+kP , and
h(t+kP,A)
t+kP ≤
Max
{
U, Supt∈[Dmin,P )
{
h(t)
t
}}
.
It follows that Supt∈R+∗
{
h(t)
t
}
≤Max
{
U, Supt∈[Dmin,P )
{
h(t)
t
}}
.
We therefore have the following theorem:
Theorem 3. A task set τ is feasible with premptive EDF⇔
Supt∈R+∗
{
h(t)
t
}
=Max
{
U, Supt∈M
{
h(t)
t
}}
≤ 1, where
M = ⋃nj=1 {Dj + kj Tj , 0 ≤ kj ≤ ⌈P−DjTj ⌉− 1}.
A C-space sensitivity analysis of Earliest Deadline First scheduling
Proof. Straightforward from Lemma 1 and Theorem 2.
SetM = ⋃nj=1 {Dj + kj Tj , 0 ≤ kj ≤ ⌈P−DjTj ⌉− 1} corresponds to the deadlines of the
tasks in time interval [Dmin, P ) where function h(t) varies.
Notice that this test is valid for any WCET configuration and will be used to characterize the
C-space domain in Section 4.2.
4.2 C-space feasibility domain for EDF
Theorem 4. C-space domain DEDF (τ) ⊂ R+n of X = (x1, . . . , xn) is defined as the subset
of X ∈ R+n such that:
Supt∈R+∗
1t
n∑
j=1
hj(t)xj
 ≤ 1,
This defines all the task sets feasible with EDF. We have:
DEDF (τ) =
X ∈ R+n,Max
Supt∈M{1
t
n∑
j=1
hj(t)xj},
n∑
j=1
xj
Tj
 ≤ 1

where:
M =
n⋃
j=1
{
Dj + kj Tj , 0 ≤ kj ≤
⌈
P −Dj
Tj
⌉
− 1
}
.
Proof. Straightforward from theorem 2.
From Theorem 3, C-space feasibility domainDEDF (τ) is defined by a set ofm+1 constraints.
The firstm constraints come from the set of times inM, the (m+1)th constraint comes from
the load utilization. We now show how to reduce the times to consider inM, to extract from
the first m constraints, the subset of times inM representing the most constrained inequal-
ities, i.e. times where Supt∈R+∗
{
h(t)
t
}
is obtained. For any time ti, starting from time t1
downto tm, we show how to determine if time ti should be considered or can be removed from
M. We formalize the problem as a linear programming problem Pi for each time ti we try
to maximize the objective function∑nj=1 hj(ti)xj taking into account them− 1 constraints,
k 6= i,∑nj=1 hj(tk)xj ≤ tk. We then check if for time ti,∑nj=1 hj(ti)xj < ti. If it is the
case, then adding the constraint
∑n
j=1 hj(ti)xj ≤ ti for time ti will bring the same result,
i.e
∑n
j=1 hj(ti)xj < ti. Hence ti can then be removed fromM. Otherwise, time ti must be
kept, indeed,
∑n
j=1 hj(ti)xj ≥ ti. The constraint
∑n
j=1 hj(ti)xj ≤ ti must be taken into
account.
We use the simplex algorithm to solve for any time the maximization problem. The simplex
algorithm must be applied on convex regions. We can therefore apply it step by step on the
times ofM provided that the C-space region obtained for any time ti is convex (we show this
property in this section).
Hermant et al.
Linear Programming problem
We now give in terms of a linear programming problem, the problem of determining if a time
ti inM should be kept or not. To solve this linear programming problem, we maximize step
by step every function h(ti) =
∑n
j=1 hj(ti)xj , representing an objective function under the
following linear constraints:
m⋃
k = 1
k 6= i
{h(tk) ≤ tk} .
The linear programming problem can be expressed by means of a matrix ofm lines and n
rows where the value at line p and row q is hp(tq) except for line p = i where it is equal to 0.
We multiply this matrix with a times vector X = {x1, . . . , xn} and check if the result is less
than a time vector such that any line j 6= i, equals to tj and line i equals to 0 (the constraint
for line i is always met). The linear problem Pi associated to time ti is as follows:
(Pi)

Maximize
∑n
j=1 hj(ti)xj ,
h1(t1) h2(t1) · · · hn(t1)
.
.
.
.
.
.
.
.
.
.
.
.
h1(ti−1) h2(ti−1) · · · hn(ti−1)
0 0 0 0
h1(ti+1) h2(ti+1) · · · hn(ti+1)
.
.
.
.
.
.
.
.
.
.
.
.
h1(tm) h2(tm) · · · hn(tm)

m,n

x1
.
.
.
.
.
.
.
.
.
.
.
.
xn

n
≤

t1
.
.
.
ti−1
0
ti+1
.
.
.
tm

m
x1 ≥ 0, x2 ≥ 0, . . . , xn ≥ 0.
Linear Problem 1. Optimisation problem Pi associated to time ti
C-space domain convexity
Let Ei ⊂ R+n be the closed region of X = (x1, . . . , xn) meeting the following property :
1
ti
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}
xj ≤ 1.
Hence :
Ei =
X ∈ R+n, 1ti
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}
xj ≤ 1
 , ti ∈M.
Lemma 2.
The set Ei ∈ R+n is convex. That is :
∀(X,X ′) ∈ E2i , ∀λ ∈ [0, 1], λX + (1− λ)X ′ ∈ Ei.
Proof. By definition, we have:
A C-space sensitivity analysis of Earliest Deadline First scheduling
X ∈ Ei ⇔
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}
xj ≤ ti,
X ′ ∈ Ei ⇔
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}
x′j ≤ ti.
Furthermore, we have λ ∈ [0, 1]. It follows:
λ
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}
xj + (1− λ)
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}
x′j ≤ ti.
Hence, we have:
n∑
j=1
Max
{
0, 1 +
⌊
ti −Dj
Tj
⌋}(
λxj + (1− λ)x′j
) ≤ ti.
Finally, we have:
λX + (1− λ)X ′ ∈ Ei.
The C-space region E ⊂ R+n of X = (x1, . . . , xn) meeting :
Limt→+∞
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 ≤ 1,
is denoted:
E =
X ∈ R+n, Limt→+∞
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 ≤ 1
 .
Lemma 3. The C-space E ∈ R+n is convex. That is :
∀(X,X ′) ∈ E2, ∀λ ∈ [0, 1], λX + (1− λ)X ′ ∈ E .
Proof. By definition, we have:
Limt→+∞
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 =
n∑
j=1
xj
Tj
.
Furthermore, we have: X ∈ E ⇔∑nj=1 xjTj ≤ 1 and X ′ ∈ E ⇔∑nj=1 x′jTj ≤ 1.
By hypothesis, we have:λ ∈ [0, 1].It follows: λ ∑nj=1 xjTj + (1− λ) ∑nj=1 x′jTj ≤ 1.
Hence, we have:
Hermant et al.
n∑
j=1
λxj + (1− λ)x′j
Tj
≤ 1.
Finally, we have:
λX + (1− λ)X ′ ∈ E .
The C-space feasibility domainDEDF (τ) ⊂ R+n ofX = (x1, . . . , xn)meeting the following
inequation:
Supt∈R+∗
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 ≤ 1,
is denoted:
DEDF (τ) =
X ∈ R+n, Supt∈R+∗
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 ≤ 1
 .
Corollary 1. The C-space region DEDF (τ) ∈ R+n is convex. That is :
∀(X,X ′) ∈ DEDF (τ)×DEDF (τ), ∀λ ∈ [0, 1], λX + (1− λ)X ′ ∈ DEDF (τ).
Proof. From theorem 4, we have:
Supt∈R+∗
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj

=
Supt∈[Dmin, P [∪{+∞}
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj

=
Max
Supt∈M
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 ,
n∑
j=1
xj
Tj
.
By definition, we have:
DEDF (τ) =
X ∈ R+n, Supt∈R+∗
1t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
 ≤ 1
 .
It follows:
A C-space sensitivity analysis of Earliest Deadline First scheduling
DEDF (τ) =
{
X ∈ R+n, Supt∈M
{
1
t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
}
≤ 1 ∧
n∑
j=1
xj
Tj
≤ 1
}
.
Therefore we have:
DEDF (τ) =
(
m⋂
i=1
Ei
)⋂
E .
The intersection of a finite number of convex C-space regions in R+n is a convex region in
R+n.
Corollary 2. The C-space feasibility domain DEDF (τ) is the intersection of a finite number
convex and closed regions. It is therefore a convex polytope in R+n.
Furthermore, the C-space domainDEDF (τ) is a closed convex polytope. It is therefore convex
polyhedra in R+n.
5 Numerical applications
Let us consider a sporadic task set τ = {τ1, τ2, τ3}, composed of three non concrete tasks
where for any task τi, Ti and Di are fixed and xi ∈ R+ the WCET of the task is a parameter.
τ1 : (x1, T1, D1) = (x1, 7, 5), τ2 : (x2, T2, D2) = (x2, 11, 7) and τ3 : (x3, T3, D3) =
(x3, 13, 10).
We have with this example: P = 1001 and Dmin = 5. From Theorem 3, we must consider
the setM of times for the computation of h(t) in time interval [5, 1001[ whereM is given by:
M = {5 + 7 k1, k1 ∈ {0, . . . , 142}}∪
{7 + 11 k2, k2 ∈ {0, . . . , 90}}∪
{10 + 13 k3, k3 ∈ {0, . . . , 76}} .
In this example, we havem = Card(M) = 281 times inM.
We recall that the C-space feasibility domain DEDF (τ) for EDF is defined by a set of m + 1
linear constraints:
DEDF (τ) =
{
X ∈ R+n, Supt∈M
{
1
t
n∑
j=1
Max
{
0, 1 +
⌊
t−Dj
Tj
⌋}
xj
}
≤ 1 ∧
n∑
j=1
xj
Tj
≤ 1
}
.
Applying the simplex algorithm on the Linear Problem 1, for any time ti ∈ M, starting from
time t1 down to time tm, we obtain the following subset S1 of times inMmaximizing h(t) for
any vector of durations X = {x1, . . . , xn} ∈ R+n. We solve this problem with the classical
simplex algorithm implemented in the Maple 11 computer algebra system.
S1 = {5, 7, 10, 12, 19, 40, 62} ⊆ M.
Hermant et al.
We have:
Supt∈R+∗
{
h(t)
t
}
=Max
{
x1
5
,
x1 + x2
7
,
x1 + x2 + x3
10
,
2x1 + x2 + x3
12
,
3x1 + 2x2 + x3
19
,
6x1 + 4x2 + 3x3
40
,
9x1 + 6x2 + 5x3
62
}
.
As: {
x1 + x2 ≤ 7
2x1 + x2 + x3 ≤ 12 ⇒ 3x1 + 2x2 + x3 ≤ 19, x1 + x2 + x3 ≤ 102x1 + x2 + x3 ≤ 126x1 + 4x2 + 3x3 ≤ 40 ⇒ 9x1 + 6x2 + 5x3 ≤ 62.
We can still reduce the times to test to S2, valid for any configuration of X in the C-space
domain where S2 = {5, 7, 10, 12, 40} ⊆ S1.
Finally, if we consider h(t)/t for every times in S2, and from Theorem 3 we have:
Supt∈R+∗
{
h(t)
t
}
=Max
{
x1
5 ,
x1+x2
7 ,
x1+x2+x3
10 ,
2 x1+x2+x3
12 ,
6 x1+4 x2+3 x3
40 ,
x1
7 +
x2
11 +
x3
13
}
.
Hence,
DEDF (τ) =
{
X ∈ R3, Supt∈R+∗
{
h(t ; τ)
t
}
≤ 1
}
,
DEDF (τ) =
0 ≤ |x1| ≤ 5,
0 ≤ |x2| ≤ 7− |x1|,
0 ≤ |x3| ≤
Min
{
10− |x1| − |x2|, 12− 2 |x1| − |x2|, 13 (40− 6 |x1| − 4 |x2|), 177 (1001− 143|x1| − 91|x2|)
}
.
We show in figure 1 a graphical representation of the C-space obtained with our example.
FIG. 1 – C-space feasibility domain DEDF (τ)
A C-space sensitivity analysis of Earliest Deadline First scheduling
6 Conclusion
In this paper, we have presented new results for a sensitivity analysis of preemptive EDF.
We have considered sporadic tasks with independent periods and deadlines. Our goal was to
express the C-space feasibility domain with parametric equations. We have also shown that the
C-space domain can be obtained from an analysis of EDF in a time interval of duration bounded
by the least common multiple of the task periods. From this analysis, a linear programming
problem is identified and solved with the simplex algorithm. We have shown on an example
that this enables us to significantly reduce the complexity of the C-space domain equation.
References
[1] S. Baruah, R. Howell, and L. Rosier. Algorithms and complexity concerning the preemp-
tive scheduling of periodic real-time tasks on one processor. Real-Time Systems, Vol. 2,
pp. 301-324, 1990.
[2] S. Baruah, A. K. Mok, and L. Rosier. Preemptively scheduling hard real-time sporadic
tasks on one processor. Proceedings of the 11th Real-Time Systems Symposium, pp. 182-
190, 1990.
[3] E. Bini and G. Buttazzo. Schedulability Analysis of Periodic Fixed Priority Systems.
IEEE Transactions On Computers, Vol. 53, No. 11, Nov.2004.
[4] E. Bini, M. Di Natale, and G. Buttazzo. Sensitivity Analysis for Fixed-Priority Real-
Time Systems. Proceedings of the 18th Euromicro Conference on Real-Time Systems
(ECRTS’06), Dresden, Germany July 5-7, 2006.
[5] L. George, N. Rivierre, and M. Spuri. Preemptive and non-preemptive scheduling real-
time uniprocessor scheduling. INRIA Research Report, No. 2966, September 1996.
[6] M. Joseph and P. Pandya. Finding response times in a real-time system. BCS Comp.
Jour., 29(5), pp. 390-395„ 1986.
[7] J. Lehoczky. Fixed priority scheduling of periodic task sets with arbitrary deadlines.
Proceedings 11th IEEE Real-Time Systems Symposium, pp 201-209, Dec. Lake Buena
Vista, FL, USA, 1990.
[8] L. C. Liu and W. Layland. Scheduling algorithms for multi-programming in a hard real
time environment. Journal of ACM, Vol. 20, No 1, pp. 46-61, January 1973.
[9] I. R. Patricia Balbastre and A. Crespo. Optimal deadline assignment for periodic real-
time tasks in dynamic priority systems. Proceedings of the 18th Euromicro Conference
on Real-Time Systems (ECRTS’06), Dresden, Germany July 5-7, 2006.
[10] K. Tindell, A. Burns, and A. J. Wellings. Analysis of hard real-time communications.
Real-Time Systems, Vol. 9, pp. 147-171, 1995.
