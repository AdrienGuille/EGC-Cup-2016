Qualitative Abstraction based Verification for Analog
Circuits
Mohamed H. Zaki∗, Sofiène Tahar∗, Guy Bois∗∗
∗Dept. of Electrical & Computer Engineering, Concordia University
Montreal, Quebec, H3G 1M8, Canada
{mzaki, tahar}@ece.concordia.ca
∗∗Genie Informatique, Ecole Polytechnique de Montreal
Montreal, Quebec, H3C 3A7 , Canada
guy.bois@polymtl.ca
Abstract. The verification of analog designs is a challenging and exhaustive
task that requires deep understanding of the physical behaviors. In this paper,
we propose a qualitative based predicate abstraction method for the verification
of a class of non-linear analog circuits. The method is based on combining
techniques from constraint solving and computer algebra along with symbolic
model checking. We have implemented the proposed verification algorithms
using the computer algebra system Mathematica and the SMV model checker.
1 Introduction
A cornerstone in embedded systems are analog designs, which are integrated circuits, re-
quired at the interfaces with the real world environment. Computer aided design (CAD) has
been under intense research during the past decades to overcome challenges in the design pro-
cess of analog designs. For verification purposes, simulation approaches are usually applied
to check that a design is robust with respect to different types of inaccuracies. However, with
designs growing in complexity, introducing more rigorous verification techniques, comple-
menting simulation is becoming of great importance.
Formal methods like model checking have been advocated for the verification of digital
designs where their correctness is proved mathematically against some formal properties. Mo-
tivated by the success of the application of formal methods in the verification of digital designs,
researchers started investigating the formal verification of analog designs. In analog designs,
one is interested in global properties connected to the dynamic behavior of the design. Un-
like its digital counterpart, analog designs verification is a challenging and exhaustive task
that requires deep understanding of their behavior. Challenging problems like non- linear ef-
fects make a direct application of formal methods very difficult and abstraction techniques are
required in order to achieve this task. Predicate abstraction is one of the most successful ab-
straction approaches developed in (8), for the verification of systems with infinite state space.
In this approach, the state space is divided into a finite set of regions and a set of rules is used
to build the transition between these regions in a way that the generated state transition sys-
tem can be verified using model checking. Among the proposed enhancements of predicate
Qualitative Abstraction based Verification for Analog Circuits
abstraction is the lazy abstraction approach (11). The basic idea here is instead of generating
the entire abstract model, a region is abstracted only when it is needed in the verification step.
Refinement is applied starting from the earliest state at which the abstract counterexample fails
to have a concrete counterpart.
Inspired by the concept of lazy abstraction, we propose a qualitative abstraction approach
for analog designs represented by non-linear ordinary differential equations (ODEs), such that
satisfaction of the property in the abstract model guarantees its satisfaction in the circuit-level
model. In the proposed abstraction, the state space is initially partitioned based on the quali-
tative properties of the analog model and symbolic constrained based methods are applied to
check for property validation. In case of failure, an iterative verification/refinement process is
applied where the regions violating the property are refined and symbolic model checking is
applied for the property validation. We implemented the proposed verification algorithm using
the computer algebra systemMathematica (17), along with the model checker SMV (3).
Related Work. Literature touching the different aspects of the work in this paper is wide
enough and spans through different research domains. We will highlight in the following the
most relevant work while in depth investigations can be found in references therein. The com-
mon trend in analog and mixed signal design formal verification is the necessity of the explicit
state space exploration using approximate reachable sets corresponding to the continuous dy-
namics of the system, to deduce the validity of the properties of interest. This relies on the
discretization using over-approximating domains like polyhedra and intervals. In (10), the au-
thors proposed to use variable size hypercubes, enhancing the precision for the constructed
state space. Variant approaches of the polyhedral based analysis were proposed. For instance,
the model checking tools d/dt (4), Checkmate (9) and PHaver (6) were adapted and used in
the verification of a biquad low-pass filter (4), a tunnel diode oscillator and a ∆Σmodulator (9),
and voltage controlled oscillators (6). In (18), the authors proposed a more precise approxima-
tion for the reachable states, where state space exploration algorithms are handled with Taylor
approximations over interval domains. In fact, all above surveyed formal methods limit the
verification of the circuit to a predefined time bound as they depend on explicit states explo-
ration. In contrast, we propose in this paper qualitative based methods for the abstract models
construction and verification, therefore, overcoming the time bound requirement. In addition,
the predicate abstraction presented in the current paper allows non-linear partitioning of the
state space based on qualitative information extracted from the system model.
In (1), the authors combined predicate abstraction with polyhedral analysis for the verifica-
tion of reachability properties of linear hybrid systems. Similar, but a more general abstraction
approach was proposed in (2). In (15; 16) a qualitative based approach was developed for ab-
stract model generation for hybrid systems, based on higher derivative analysis and invariance
generation. A similar invariant based approach was proposed in (14), where more general in-
variants are constructed. In (13), the authors proposed the idea of barrier certificates. Barrier
certificates if they exists, are invariants that separate system behavior from a bad state, hence
providing a safety verification approach. The work presented in this paper is in line with the
above mentioned. However, we distinguish ourselves in several aspects. First, we propose to
extract qualitative predicates from the system behavior which can complement the qualitative
predicates presented in (15). We also propose different ideas for transition relation, based on a
variant of the mean value theorem. In addition, the construction of the invariant predicates we
use do not require a priori knowledge of initial conditions and in contrast to barrier certificates
M.H. Zaki et al.
give knowledge of the whole system behavior rather than specific behaviors.
The rest of the paper is organized as follows: We introduce the proposed verification
methodology in Section 2. After that, we proceed in Section 3 by defining the analog sys-
tem model, explaining predicate abstraction and introducing a class of qualitative invariants.
The constraint based verification approach is explained in Section 4, followed by the abstract
model construction in Section 5. Implementation issues along with illustrative experimental
results are described in Section 6, before concluding with a discussion in Section 7.
2 Proposed Methodology
The verification methodology we propose is illustrated in Figure 1. Starting with a circuit
description as a system of ODEs, along with specification properties provided in computational
temporal logic (∀CTL) (3), we symbolically extract qualitative predicates of the system. The
abstract model is constructed in successive steps. In the basis step, we only consider predicates
that define the invariant regions for the system of equations based on the Darboux theory
of integrability (7). Informally, the Darboux theory is concerned with the identification of
the different qualitative behaviors of the continuous state space of the system. We make use
of such idea to divide the analog design state space into qualitatively distinct regions where
no transition is possible between states of the different regions. Satisfaction of properties is
verified on these regions using constraint based methods, which rely on qualitative properties
of the system, by generating new constraints that prove or disprove a property. The property
verification hence provides the advantage of avoiding explicit computation of reachable sets.
If the property cannot be verified at this stage, refinement is needed only for the non-
verified regions by adding more predicates. Conventional model checking is then applied on
the newly generated abstract model. The extraction of the predicates is incremental in the sense
that more precision can be achieved by adding more information to the original construction of
the system. When the property is marked violated, one possible reason is because of the false
negative problem due to the over-approximation of the abstraction. In this case, refinement
techniques may be introduced 1.
Temporal 
Properties
Analog 
Designs
Qualitative 
Based 
Verification
Qualitative 
Analyzer
Qualitative 
Predicates Predicate Abstraction
Model 
Checking
Refine
Property 
Verified
Property 
Not Verified
FIG. 1 – Verification Methodology
1We use a simple refinement procedure based on interval methods for ODEs that identify and eliminate the spurious
counterexamples, however its description is outside the scope of this paper.
Qualitative Abstraction based Verification for Analog Circuits
3 Preliminaries
3.1 System Description
We are concerned in this paper with analog circuits that are composed of basic compo-
nents like inductors, capacitors and transistors in addition to non-linear sources (e.g., voltage
controlled current sources). Such circuits can be described by non-linear polynomial ODEs as
follows:
Definition 1 Analog Circuit Model. An Analog circuit model is a tuple A = (X ,X0,P ),
with X = Vc1 ×Vcn × . . .× Ilm ⊆ Rd as the continuous state space with d-dimensions, where
Vci and Il j are the voltage across the capacitance ci and the current through the inductance
l j, respectively. X0 ⊆ X is the set of initial states (initial voltages on the capacitances and
currents through the inductance) and P : X → Rd is the continuous vector field.
The behavior of such analog circuit model A is governed by polynomial differential equa-
tions of the form: x˙k =
dxk
dt = Pk(x1, . . . ,xd) = a0+
m
∑
l=1
Pl,k(x1, . . . ,xd), where t is the inde-
pendent real time, Pk (k = 1, . . . ,d) is a polynomial of degree m, a0 is a constant and Pl,k is
a polynomial of degree l, Pl,k = ∑
i1+...+id=l
ai1,...,idx
i1
1 . . .x
id
d , where ai1,...,id is a constant. We
assume that the differential equation has a unique solution for each initial value. The seman-
tics of the analog model A = (X ,X0,P ) over a continuous time period Tc = [τ0,τ1] ⊆ R+
can be described as a trajectory Φx : Tc → X for x ∈ X0 such that Φx(t) is the solution of
x˙k = Pk(x1, . . . ,xd), with initial condition Φx(0) = x and t ∈ Tc, is a time point. We can view
the behavior of the analog model A as a transition system:
Definition 2 Analog Transition System. The transition system for analog model A is de-
scribed as a tuple TA = (Q,Q0,σ,L) where q ∈ Q is a configuration (x,Γ), x ∈ X and Γ is a
set of intervals where ∪i≥0ti ⊆ R+, ti ∈ Γ. We have t1, t2 ∈ Γ for Φx′(t1) = Φx′′(t2) = x and
x′,x′′ ∈ X0. q ∈ Q0, when t0 ∈ Γ and t0 is the singular interval, σ ⊆ Q×Q is a transition
relation such that (qn,qm) ∈ σ iff ∃tn ∈ Γn, ∃tm ∈ Γm. tn < tm and limtn→tm Φqnx (tn) =Φqmx (tm),
x ∈ X0. Finally, L is an interpretation function such that L : Q→ Rn×2R
+
.
The set of reachable states Reach can then be defined as: Reach := {q′ ∈Q|∃q∈Reach(0), t ∈
LΓ(q′),x′ = Lx(q′),x= Lx(q) such that Φx(t) = x′}, where Reach(0) := Q0.
3.2 Predicate Abstraction
Predicate abstraction is a method where the set of abstract states is encoded by a set of
Boolean variables representing each a concrete predicate. Based on (1), we define a discrete
abstraction of the analog model A with respect to a given n-dimensional vector of predicates
Ψ= (ψ1, . . . ,ψn), where ψ :Rd→ B, with B= {0,1} and d is the ODEs system dimension. A
polynomial predicate is of the form ψ(x) := P (x1, . . . ,xd)∼ 0, where ∼∈ {<,≥}. Hence, the
infinite state space X of the system is reduced to 2n states in the abstract system, corresponding
to the 2n possible Boolean truth evaluates of Ψ.
Definition 3 Abstract Transition System. An abstract transition system is a tuple TΨ =
(QΨ,Ã,QΨ,0), where:
M.H. Zaki et al.
• QΨ ⊂ L×Bn is the abstract state space for a n-dimensional vector predicates, where an
abstract state is defined as a tuple (l,b), with l ∈ L is a label and b ∈ Bn.
• Ã⊆QΨ×QΨ is a relation capturing abstract transition such that {bÃ b′|∃x∈ ϒΨ(b), t ∈
R+ : x′ = Φx(t) ∈ ϒΨ(b′)∧ x→ x′}, where the concretization function: ϒΨ : Bn → 2Rd is
defined as ϒΨ(b) := {x ∈ Rd |∀ j ∈ {1, , . . . ,n} : ψ j(x) = b j}.
• QΨ,0 := {(l,b) ∈ QΨ|∃x ∈ ϒΨ(b),x ∈ X0} is the set of abstract initial states.
We define the set of reachable states as: ReachΨ =
⋃
i≥0Reach
(i)
Ψ , where Reach
(0)
Ψ = QΨ,0,
Reach(i+1)Ψ = Postc(Reach
(i)
Ψ ), ∀i≥ 0 and Postc(l,b) := {(l′,b′) ∈QΨ|(l,b)Ã (l′,b′)}. We can
then deduce the following property between concrete and abstract reachable states.
Lemma 1 Given an Analog abstract transition system TΨ(A) and a vector of predicates Ψ,
the following holds: Reach⊆ {q ∈ Q|∃(l,b) ∈ ReachΨ : x ∈ ϒΨ(b)∧Lx(q) = x}
3.3 Invariants
Usually, a continuous system has a behavior that varies in different regions of phase space
which boundaries are defined by special system solutions known in the literature as Darboux
invariants (7). These invariants partition the concrete state space into a set of qualitative dis-
tinctive regions.
Definition 4 Given the system of ODEs dxkdt =Pk(x1(t), . . . ,xd(t)), with k= 1, . . .d (
dx
dt =P(x),
x ∈ Rd and P = (P1, . . . ,Pd)), we define the corresponding vector field as DP = P.∂x =
∑dk=1Pk
∂
∂xk
.
The correspondence between the system of ODEs and the vector field DP is obtained by
defining the time derivative of functions of x as follows. Let G be a function of x: G :Rk→R,
then dGdt := G˙ = DP(G) = P.∂xG . The time derivative is called the derivative along the flow
since it describes the variation of function G of x with respect to t as x evolves according to
the differential system. When DP(G) = 0, ∀x ∈ Rk, we have a time independent first integral
of DP. Several methods were developed recently based on Darboux integrability theory (7),
which is a theory concerned with finding closed form solutions of system of ODEs, to tackle the
problem by looking for a basis set of invariants, i.e., Darboux invariants. Rather than looking
at functions which are constant on all solutions, we look at functions which are constant on
their zero level set. Darboux polynomials Ji provide the essential skeleton for the phase space
from which all other behaviors can be qualitatively determined.
Definition 5 Darboux Polynomials (7). Given a vector field DP =
d
∑
i=1
Pi
∂
dxi
associated with
the system dxdt = P(x), a Darboux polynomial is of the form J (x) = 0 with J ∈ R[x], when
DJ =K J , where K =K (x) is a polynomial called the cofactor of J = 0.
Lemma 2 Given a system of ODEs and a vector field Df, J is an invariant of the system if J
divides Df, more formally, if there exists K ∈ R[x] such that Df(J ) = K J . The solution set of
the system vanishes on the curve of J .
In the context of abstraction, we define the invariant regions as conjunction of Darboux
invariant predicates. An invariant region can be considered as an abstraction of the state space
that confines all the system dynamics initiated in that region:
Qualitative Abstraction based Verification for Analog Circuits
Definition 6 We say that a region V is an invariant region of an analog model A such that
P (x(0)) = s0 |=V , P (x(ς)) = sς |=V and ∀t ∈ [0,ς],P (x(t)) = st |=V . LetV = {x∈Rk|x |=
Γ}, be an invariant region, where Γ is a conjunct of Darboux predicates (each is of the form
p(x)∼ 0, where p is a polynomial function and ∼∈ {<,≥}). If x(0) is some initial state, then
V = V (x(0)) denotes an over-approximation of the set of states reachable from x(0).
Example 1 Consider the non-linear circuit shown in Figure 2.a, where the non-linearity comes
from the voltage controlled current sources which currents Ics1 and Ics2 are described, respec-
tively, as f1 =−x32+x1−x2 and f2 =−x31+2x2. The voltages across the capacitors c1 and c2
can be described using ODEs, respectively, as follows: x˙1 =−x32 and x˙2 = x1−x31. We identify
the corresponding invariants: j1 = 1− x21− x22 and j2 = 1− x21+ x22, which are used to form
three invariant regions: R1 = j1 ≥ 0∧ j2 ≥ 0, R2 = j1 < 0∧ j2 < 0 and R3 = j1 < 0∧ j2 ≥ 0
as shown in Figure 2.b. Note that j1 ≥ 0∧ j2 < 0 is infeasible and therefore discarded.
c2 = 1
g1 = 1
c1 = 1 g2 = 1
Ics1=    f1(x1,x2)
Ics2=    f2(x1,x2)
x2x1
(a) Analog Circuit Schematic
R3
R3
R1 R2R2
2.4
x1
2
−3.2
1.6
−4
−2.4
−0.8
40
−1.6
−2
0.8
−4.0
4.0
3.2
0.0
x2
(b) Darboux Invariants
FIG. 2 – Illustrative Non-linear Analog Circuit
4 Constraint Based Verification
In this section, we propose a qualitative verification approach for analog circuits based on
constraint based methods. The basic idea is to apply quantified constraint based techniques
to answer questions about qualitative behaviors of the designs, by constructing functions that
validate or falsify the property. The idea is different from conventional approaches as it does
not require the explicit reachable states computation. We consider two types of properties that
can be verified using that approach, namely safety and switching properties.
Safety Properties. Safety properties can be expressed in CTL (3) as ∀¤p; meaning that al-
ways on all executions the constraint predicate p is satisfied for a set of initial conditions. The
verification starts by getting the dual property ∃♦¬p (which means that there is an execution
falsifying the constraint p) and applies constraint solving on the dual property within the in-
variant regions of interest. In case of unsatisfiability, we conclude that the original property is
satisfied in the region, otherwise we cannot conclude the truth of the property and a refinement
model providing more details of the region is constructed.
Proposition 1 Safety Property Verification. ∀¤P is always satisfied in an invariant region
V , if its dual property ∃♦¬P is never satisfied in that region.
M.H. Zaki et al.
Example 2 Consider the circuit in Example 1, with initial conditions x1(0) ∈ [−0.7,−1.1]
and x2(0) ∈ [0.5,0.9]. Suppose the property to check is ∀¤P := x21+ x2− 3 < 0 (see Figure
3.a for details), meaning that all flows initiated from x(0) = (x1(0),x2(0)), will be bounded
by x21+ x2− 3. The following regions satisfy the initial conditions R1 = j1 ≥ 0∧ j2 ≥ 0 and
R3 = j1 < 0∧ j2 ≥ 0. We check whether ∃♦P := x21+ x2−3≥ 0 is satisfiable in the invariant
regions R1 and R3. By applying constraint solving in Mathematica, we find that for the region
R3, the constraints system is satisfiable, hence the original property cannot be verified, and
the state space of the region needs to be refined. For the region R1, the constraints system is
infeasible, therefore we conclude that the safety property is satisfied.
P
X(0)
R3
R3
R1 R2R2
−3.2
20−4
0.8
x2
1.6
2.4
−0.8
−2 4
−2.4
−1.6
0.0
−4.0
x1
4.0
3.2
(a) Safety Verification (Example 2)
Q2
j3j2
j1
Q1
−5.0
−7.5
x2
7.5
10
0.0
5
2.5
x1
−5
5.0
0−10
−2.5
(b) Switching Verification (Exam-
ple 3)
FIG. 3 – Constraint Based Verification for the Circuit in Figure 2.a
Switching Properties. A special case of reachability verification ∃♦Q is the switching condi-
tion verification, i.e., starting from a set of initial conditions, the system will eventually cross a
threshold, triggering a switching condition. Such property is of great importance, for instance,
a MOSFET transistor acting as switch changes states based on the voltage condition applied
on its gate. We consider here a restricted form of the switching property, where we assume that
threshold predicates divide the invariant region by intersecting the invariant region boundaries
(at least two Darboux predicates). Given an invariant region V , a predicate Q is a switching
condition if
k∧
i=0
∃x.(Q (x) = 0)∧ (Ii(x) = 0), where k ≤ 2 and I is a Darboux invariant. The
switching verification can be stated as follows:
Proposition 2 Switching Property Verification. ∃♦Q is satisfied in a regionV , ifQ (x(0))<
0 and DP(Q )> 0 or if Q (x(0))> 0 and DP(Q )< 0, in the region V . If these conditions are
satisfiable, we conclude that the property is verified and switching occurs.
Example 3 Consider the circuit shown in Figure 2.a, where the voltages across the capacitors
c1 and c2 are described, respectively, as follows: x˙1 = x21 + 2x1x2 + 3x
2
2 and x˙2 = 4x1x2 +
2x22, with initial conditions x1(0) ∈ [0.5,1] and x2(0) ∈ [0.3,0.5]. Suppose that the switching
condition property to check is ∃♦x1+x2−5= 0, meaning that switching occurs when a certain
trajectory will cross the threshold Q1 := x1+ x2− 5 = 0 (see Figure 3.b). We construct the
Darboux functions: j1 := x2, j2 := x1+x2, j3 := x1−x2. The region R1= j1> 0∧ j2> 0∧ j3>
0 satisfies the initial conditions. In addition, the predicate x1+ x2− 5 < 0 satisfies the initial
condition and DP(x1+ x2− 5) > 0 because DP(x1+ x2− 5) = (x1+ x2)(x1+ 5x2) is always
positive in R1. Consider the initial conditions X(0)1 := (x1(0) ∈ [−10,−8] and x2(0) ∈ [4,5])
Qualitative Abstraction based Verification for Analog Circuits
and X(0)2 := (x1(0) ∈ [−0.5,−1] and x2(0) ∈ [0.3,0.5]) in the invariant region R2 = j1 >
0∧ j2 < 0∧ j3 < 0. For the switching condition Q2 := −x1+ x2− 5 = 0, we find that the
initial condition X(0)1 satisfies −x1+ x2−5 > 0, and X(0)2 satisfies −x1+ x2−5 < 0 while
DP(−x1+ x2−5) = −(x1− x2)2 will be always negative in region R2, therefore we conclude
that the switching will occur for the initial condition X(0)1 but not for X(0)2.
Sometimes constraint based verification fails to provide answers for the verification prob-
lem as the above methods are not complete in general. In addition, more complex properties
like oscillation cannot be proved using the above method. We complement the approaches
described in this section, by the predicate abstraction method allowing conventional model
checking to be applied.
5 Predicate Abstraction
5.1 Abstract State Space
In general, the effectiveness of the predicate abstraction method depends on the choice of
predicates. In addition of using Darboux predicates described in Section 3.3, we choose pred-
icates identified in the properties of interest. In addition to temporal property predicates, basic
ideas from the qualitative theory of continuous systems can be adapted within the predicate
abstraction framework. The termination of the predicate generation phase is not necessary for
creating an abstraction. We can stop at any point and construct the abstract model. A larger
predicate set yields a finer abstraction as it results in a larger state space in the abstract model.
A set of predicates can be constructed using the notion of critical forms, which are special
functions along them, the vector field direction is either vertical or horizontal. In between these
forms, there can be no vertical nor horizontal vectors. In a region (abstract state) determined
by the critical forms, all vectors follow one direction. These predicates can be obtained easily
by setting x˙ = 0. A generalization of critical forms is the concept of isoclines. Isoclines are
functions over which the system trajectories have a constant slope. A predicate pi is an isocline
of ODEs system if and only if ∃ai ∈ R with i = 1, . . .d such that Σdi=1aiPi(x)|pi = 0. Isocline
and critical forms provide qualitative information about the system behavior. Hence, such
information can be used in refuting certain behavior that is shown unreachable. For instance
by knowing different constants ai, we deduce the direction of the flow crossing the isoclines
and therefore we decide how to build transitions between abstract states. Finding different
isocline predicates within an invariant region can be achieved by solving constraints on the
parameters of predefined forms of an isocline predicate.
Another kind of predicates, we propose, referred to as conditioned predicates, have the
property that under specific conditions, they provide certain information about the solution
flow. A predicate pi is a conditioned predicate of an ODEs system with conditions Γ1, . . . ,Γd ,
if it is of the form Σni=1ΓiPi(x)|pi = 0, where the conditions Γi are polynomials with i= 1, . . .d
and d is the system dimension. For instance, consider the 3-dimensional system with the
state variables x,y,z, and the property predicate z > 1. We can construct another predicate
that intersects z > 1 at specific conditions, say y˙x˙ = 0. Then, the new predicate is of the form
y˙− (z−1)x˙= 0.
Example 4 Consider the analog circuit in Example 1. The critical forms predicates are p1 :=
x1, p2 := x2, p3 := 1− x1 and p4 := 1+ x1, as shown in Figure 4.a. For illustration purposes,
we choose two isocline predicates p5 := x1− x31+ x32 and p6 := x1− x31− x32 to show in Figure
M.H. Zaki et al.
4.b. Suppose, we are interested to verify a property including the predicate p7 := x2−x1 > 0.3,
we can construct the conditioned predicate p8 := x˙2−(x2−x1−0.3)x˙1 = 0 as shown in Figure
4.c. To build the abstract state space, we have three invariant regions and eight predicates. As
certain combination of predicates are infeasible, the number of abstract states is< 28 abstracts
states. In fact, region R1 = j1 ≥ 0∧ j2 ≥ 0 is subdivided into 29 abstract states.
P2
P1P4 P3
−0.4
−2.0
0.4
−0.8
1
−1.6
1.2
0−2
−1.2
−1 2
x2
1.6
0.8
x1
2.0
0.0
(a) Critical Forms Predicates
P6 P5
−1.2
0.8
x1
1−1
−1.6
1.2
−0.4
−2.0
−2
x2
1.6
0.0
0 2
0.4
−0.8
2.0
(b) Isocline Predicates
P8
P7
1.5
2.0
−0.5
x2
0.0
1.0
−1.0
1.5
−0.5 0.5
0.5
0.0
1.0
x1
(c) Conditioned Predicates
FIG. 4 – Predicates for the Circuit in Figure 2.a
5.2 Computing Abstract Transitions
One main issue in constructing abstract state transition systems is the identification of
the possible transitions. As we divide the state space into invariant regions, we need only to
construct transitions between abstract states within a region. Therefore, we do not need to con-
struct an abstract model for the whole state space. In general, information from the solution of
the ODEs is required to describe transitions between abstract states. In practice, each abstract
transition is initialized to the trivial relation relating all states and then stepwise refined by
eliminating unfeasible transitions. This guarantees that any intermediate result represents an
abstraction and the refinement can be stopped at any point of time. In the remaining of this
section, we use a set of different rules to construct transition between abstract states.
The simplest rule to use is the Hamming distance rule (15). The Hamming distance (HD)
is the number of predicates for which the corresponding valuations are different in different
abstract states. For instance, the Hamming distance between state s1 :=(p1= 1∧ p2= 0∧ p3=
1∧ p4 = 1) and state s2 := (p1 = 1∧ p2 = 0∧ p3 = 0∧ p4 = 1) is 1, written HD(s1,s2) = 1.
Given two abstract states s1 and s2, we say that a transition can exist between two abstract
states only if HD(s1,s2) = 1. The next rule we apply is based on the generalized mean value
theorem (5), which is an extension of the mean value theorem (MVT) for n-dimension.
Theorem 1 Generalized Mean Value Theorem (5). If x(t) is continuous on a time inter-
val t1 ≤ t ≤ t2, and differentiable on t1 < t < t2, and assuming that there exists a vector V
orthogonal to x(a) and to x(b), then there is tc : t1 < Tc < t2 such that V is orthogonal to x˙(tc)
We use quantified constraint based methods to check whether such condition is satisfied
between two abstract states. If the MVT is not satisfied, we deduce that no transition exists
between the two states. The above rules give an over-approximation of the transition system as
no information about the vector field direction is used. In order to remove such redundant tran-
sitions in the region of interest, we complement the above rules by applying the intermediate
value theorem as a way to identify the flow direction. In the context of abstraction, a transition
between two abstract states exists if a predicate valuation change during the execution over an
interval domain as follows:
Qualitative Abstraction based Verification for Analog Circuits
Theorem 2 Intermediate Value Theorem Given a predicate λ, two states S1 = (l,b) and
S2 = (l′,b′) differing only on the valuation of λ and a time step interval solution I : {a1 ≤ x≤
a2}, there is a transition between S1 and S2 if b |= JλKa1 (i.e., λ(a1) ∈ γ(b)), b′ |= JλKa2 (i.e.,
λ(a2) ∈ γ(b′)), JλKa1 6= JλKa2 6= 0 and ∃x such that JλKx = 0, with the interpretation functionJ.K : Rd →{+,−,0}
To check for the above condition, we use interval analysis to guarantee that the solution is
reliable; the real solutions are enclosed by the computed intervals. Such guarantee is derived
from the fundamental theorem of interval analysis (12).
Theorem 3 (12) Let f : Rd → R be a continuous function, then F : Id → I is an interval
extension of f if { f (x1, . . . ,xd)|x1 ∈ X1, . . . ,xd ∈ Xd} ⊆ F(X1, . . . ,Xd), where I is the interval
domain.
5.3 Abstraction Based Verification
Given the analog model transition system TA and a property ϕ expressed in ∀CTL. The
problem of checking that the property holds in this model written as TA |= ϕ can be simplified
to the problem of checking that a related property holds on an approximation of the model TΨ,
i.e., TΨ |= ϕ˜, with ϕ˜ = µ(ϕ), where µ is a mapping function: µ : Rd → B which is a function
associating to each predicate λ(x1, . . . ,xd) an atomic proposition P. The main preservation
theorem can be stated as follows (2):
Theorem 4 Suppose TΨ is an abstract model of TA , then for all ∀C˜TL state formulas de-
scribing TΨ and every state of TA , we have s˜ |= ϕ˜ ⇒ s |= ϕ, where s ∈ γ(s˜). Moreover,
TΨ |= ϕ˜⇒ TA |= ϕ.
If a property is proved on an abstract model TΨ, then we are done. If the verification of TΨ
reveals TΨ 2 ϕ˜, then we cannot conclude that TA is not safe with respect to ϕ˜, since the coun-
terexample for TΨ may be spurious. In order to remove spurious counterexamples, refinement
methods on the abstract model can be applied (2).
6 Implementation and Experiments
For experimentation purposes, we used Mathematica’s algebraic manipulation and quan-
tified constraint solving capabilities (17) for the constraint based verification and for the con-
struction of the abstract model. Conventional model checking on the abstract models is ap-
plied using SMV (3). For instance, the built-in Mathematica function Reduce[expr,vars] sim-
plifies the statement expr by solving equations or inequalities for the state variables vars =
{v1,v2, . . . ,vm} and eliminating quantifiers. Reduce gives True if the expr is proved to be al-
ways true, False if expr is proved to be always false and a reduced expr otherwise. For exam-
ple, the safety verification problem in Example 2 can be formulated using Reduce as follows:
Reduce[Exists[{x1,x2},1− x21− x22 ≥ 0&&1− x21+ x22 ≥ 0,−3+ x21+ x2 ≥= 0],{x1,x2}].
The problem of finding invariants is an important part of the methodology. We need to
find Darboux invariants and in the case of reachability verification, we look for invariants
bounding the reachable states. Finding invariants is based on the evaluation of the coeffi-
cients of the predefined forms of polynomials. In this algorithm, we start with an invariant
form with an initial degree and check if such invariant exists, if not, we increase the degree
M.H. Zaki et al.
to form a new polynomial. A bound on the degree must also be specified to ensure termi-
nation of the search of the invariants. An arbitrarily assigned bound at the beginning of the
algorithm is usually proposed hence ensuring termination. This is possible using the Math-
ematica FindInstance function, for example. FindInstance[expr,vars] finds an instance of
vars that makes expr True if an instance exists, and gives {} if it does not. The result of
FindInstance is of the form {{v1→ inst1,v2→ inst2, . . . ,vm→ instm}} where insti is the pro-
vided value. For example, to find the Darboux invariants j we apply FindInstance as follows:
FindInstance[ForAll[{x,y},D j == K j],{coe f s}], where j is a polynomial in x,y, with un-
known coefficients coe f s and K is the cofactor.
6.1 Experimentation
We applied the proposed verification to a variety of analog circuits. In addition to the
different configurations of the circuit in Figure 2, we verified the oscillation properties for the
circuit shown in Figure 5.a, with non-linear voltage source vs and non-linear current source
cs. Given the state space and the generated invariant regions (boundaries shown in bold in
Figure 5.b), we verify the following ACTL property on the set of trajectories: ∀¤(∀♦(Vc >
Il)) ∧ ∀¤(∀♦(Vc < Il)), which can be understood as on every computation path, whenever
the capacitor voltage Vc value exceeds the inductor current value Il , it will eventually decrease
below Il again and vise-versa. We constructed the abstract model of the oscillator and verified
the property using SMV. We found indeed that the circuit will always oscillate only inside the
bounded regions shown in Figure 5.b (Experimental details can be found in (19).
g2 = 1
+
−
g1 = 1
c = 1
Ics=    f2(I_l,V_c)
l=1
vs
Vvs=  f1(I_l,V_c)
V_c
I_l
(a) Analog Circuit
−3
0−1
0
I_l
−4
1
−2
5
3
−1
−5
1
2
V_c
3
4
2−2
(b) Phase Portrait and Invariant Regions
FIG. 5 – Non-Linear Oscillator
7 Conclusion
In this paper, we proposed a qualitative verification approach of analog circuits. The ap-
proach is based on abstracting and verifying the qualitative behavior of the circuits using a
combination of techniques from predicate abstraction and constraint solving along with model
checking. The principle novelties in this paper are: (1) We adapted the concept of lazy abstrac-
tion for the verification of analog circuits. To this aim, we identified a set of basic qualitative
predicates (Darboux polynomials) as invariance predicates which helps avoid the construction
of an abstract model for the whole state space. (2) We proposed a constraint solving approach
for the verification of safety and reachability properties. Such method does not require explicit
representation of state space, but relies on generating functions that prove of disapprove the
Qualitative Abstraction based Verification for Analog Circuits
properties. Our methodology overcomes the time bound limitations of exhaustive methods de-
veloped in related work. Future work includes extending the predicate abstraction to support
analog and mixed signal systems and exploring more case studies.
References
[1] R. Alur, T. Dang, F. Ivancic. Reachability Analysis Via Predicate Abstraction. In HSCC, LNCS 2289, pp. 35-48.
Springer, 2002.
[2] E. Clarke, A. Fehnker, Z. Han, B. Krogh, O. Stursberg, M. Theobald. Verification of Hybrid Systems based on
Counterexample-guided Abstraction Refinement. In TACAS, LNCS 2619, pp. 192–207, Springer, 2003.
[3] E. Clarke, O. Grumberg , D.A. Peled. Model Checking. MIT Press, 1999.
[4] T. Dang, A. Donze, O.Maler: Verification of Analog and Mixed-Signal Circuits Using Hybrid System Tech-
niques. In FMCAD, LNCS 3312, pp. 14-17, Springer, 2004.
[5] M. Furi, M. Martelli. A Multidimensional Version of Rolle’s Theorem. The AMS, 102(3), 1995, pp. 243-249.
[6] G. Frehse, B. H. Krogh, R. A. Rutenbar. Verifying Analog Oscillator Circuits Using Forward/Backward Abstrac-
tion Refinement. In DATE, IEEE/ACM, pp. 257-262, 2006.
[7] A. Goriely. Integrability and Nonintegrability of Ordinary Differential Equations, Advanced Series on Nonlinear
Dynamics, Vol 19, World Scientific, 2001.
[8] S. Graf and H. Saidi. Construction of Abstract State Graphs with PVS. In CAV, LNCS 1254, pp. 72-83. Springer,
1997.
[9] S.Gupta, B.H. Krogh, R.A. Rutenbar. Towards Formal Verification of Analog Designs, In ICCAD, IEEE/ACM,
pp. 210-217, 2004.
[10] W. Hartong, R. Klausen, L. Hedrich. Formal Verification for Nonlinear Analog Systems: Approaches to Model
and Equivalence Checking, In Advanced Formal Verification, pp. 205-245, Kluwer, 2004.
[11] A. Henzinger, R. Jhala, R. Majumdar, and G. Sutre. Lazy Abstraction. In POPL, ACM, pp. 58–70, 2002.
[12] R. E. Moore. Methods and Applications of Interval Analysis, SIAM, 1979.
[13] S. Prajna, A. Jadbabaie. Safety Verification of Hybrid Systems Using Barrier Certificates. In HSCC, pp. 477-492,
Springer, 2004.
[14] S. Sankaranarayanan, H. Sipma, Z. Manna. Constructing Invariants for Hybrid Systems. In HSCC, LNCS 2993,
pp 539-554, Springer, 2004.
[15] A. Tiwari and G. Khanna. Series of Abstractions for Hybrid Automata. In HSCC, LNCS 2289, pp. 465-478,
Springer, 2002.
[16] A. Tiwari and G. Khanna. Nonlinear Systems: Approximating Reach Sets. In HSCC, LNCS 2993, pp. 600-614,
Springer, 2004.
[17] S. Wolfram. Mathematica: A System for Doing Mathematics by Computer. Addison Wesley Publishing, 1991.
[18] M. Zaki, G. Al Sammane, S. Tahar, and G. Bois. Combining Symbolic Simulation and Interval Arithmetic for
the Verification of AMS Designs, In FMCAD, IEEE, 2007.
[19] M. Zaki, S. Tahar, and G. Bois: Combining Constraint Solving and Formal Methods for the Verification of
Analog Designs. Technical Report, ECE Department, Concordia University, Montreal, Quebec, Canada, May
2007, website http://hvg.ece.concordia.ca/Publications/TECH_REP/ANA_CBV_TR07
